/*
+--------------------------------------------------------------------------+
| PROJECT : PROTOCOL STACK                                                 |
| FILE    : m_rr_com.val                                                   |
| SOURCE  : "msg\rr_com.mdf"                                               |
| LastModified : "2004-01-16"                                              |
| IdAndVersion : "8010.606.02.008"                                         |
| SrcFileTime  : "Wed Nov 28 10:20:42 2007"                                |
| Generated by CCDGEN_2.5.5A on Thu Sep 25 09:52:54 2014                   |
|           !!DO NOT MODIFY!!DO NOT MODIFY!!DO NOT MODIFY!!                |
+--------------------------------------------------------------------------+
*/

/* PRAGMAS
 * PREFIX                 : NONE
 * COMPATIBILITY_DEFINES  : NO (require PREFIX)
 * ALWAYS_ENUM_IN_VAL_FILE: NO
 * ENABLE_GROUP: NO
 * CAPITALIZE_TYPENAME: NO
 * CCDNAME: RR_COM
 */


#ifndef M_RR_COM_VAL
#define M_RR_COM_VAL


#define CDG_ENTER__M_RR_COM_VAL

#define CDG_ENTER__FILENAME _M_RR_COM_VAL
#define CDG_ENTER__M_RR_COM_VAL__FILE_TYPE CDGINC
#define CDG_ENTER__M_RR_COM_VAL__LAST_MODIFIED _2004_01_16
#define CDG_ENTER__M_RR_COM_VAL__ID_AND_VERSION _8010_606_02_008

#define CDG_ENTER__M_RR_COM_VAL__SRC_FILE_TIME _Wed_Nov_28_10_20_42_2007

#include "CDG_ENTER.h"

#undef CDG_ENTER__M_RR_COM_VAL

#undef CDG_ENTER__FILENAME


// VALTAB-FF: REL99 
// 
// Value constants for VAL_ab_type
// 
// #define AB_8_BIT                       (0x0)   /* 8 bit access burst shall be used */
// #define AB_11_BIT                      (0x1)   /* 11 bit access burst shall be used */

/*
 * Value constants for VAL_acc_tech_typ
 */
#define VAL_ACC_TECH_TYP___DEF         (0x0)      /* unknown                        */
#define ACC_GSM_P                      (0x0)      /* GSM P                          */
#define ACC_GSM_E                      (0x1)      /* GSM E -note that GSM E covers GSM P */
#define ACC_GSM_R                      (0x2)      /* GSM R - note that GSM R covers GSM E and GSM P */
#define ACC_GSM_1800                   (0x3)      /* GSM 1800 (DCS)                 */
#define ACC_GSM_1900                   (0x4)      /* GSM 1900 (PCS)                 */
#define ACC_GSM_450                    (0x5)      /* GSM 450                        */
#define ACC_GSM_480                    (0x6)      /* GSM 480                        */
#define ACC_GSM_850                    (0x7)      /* GSM 850                        */
// VAL-FF: REL99  
// #define ACC_CAP_SAME_AS_PRECED         (0xf)   /* When access capabilities of a band is same as it's previously included band. */
// VAL-FF: REL99  
// #define ACC_INVALID                    (0xe)   /* no valid access technology type present (this value isn?t defined in the specification) */
// VAL-FF: !REL99  
#define ACC_INVALID                    (0xf)      /* no valid access technology type present (this value isn?t defined in the specification) */

/*
 * Value constants for VAL_pow_class
 */
#define POWER_CLASS_1                  (0x1)      /* Power Class 1                  */
#define POWER_CLASS_2                  (0x2)      /* Power Class 2                  */
#define POWER_CLASS_3                  (0x3)      /* Power Class 3                  */
#define POWER_CLASS_4                  (0x4)      /* Power Class 4                  */
#define POWER_CLASS_5                  (0x5)      /* Power Class 5                  */
#define VAL_POW_CLASS___6              (0x6)      /* Reserved                       */
#define VAL_POW_CLASS___7              (0x7)      /* Reserved                       */
#define MIN_CLASS_GSM                  (0x2)      /* minimal GSM power class        */
#define MAX_CLASS_GSM                  (0x5)      /* maximal GSM power class        */
#define MIN_CLASS_DCS                  (0x1)      /* minimal DCS power class        */
#define MAX_CLASS_DCS                  (0x3)      /* maximal DCS power class        */
#define MIN_CLASS_PCS                  (0x1)      /* minimal PCS power class        */
#define MAX_CLASS_PCS                  (0x3)      /* maximal PCS power class        */
#define CLASS_MIN_POW_GSM              (0x5)      /* GSM power class with the lowest output power */
#define CLASS_MIN_POW_DCS              (0x2)      /* DCS power class with the lowest output power */
#define CLASS_MIN_POW_PCS              (0x2)      /* PCS power class with the lowest output power */
#define IDX_PWRCLASS_900               (0x0)      /* Index for use with rf_cap.rf_power.pow_class4[] array */
#define IDX_PWRCLASS_1800              (0x1)      /* Index for use with rf_cap.rf_power.pow_class4[] array */
#define IDX_PWRCLASS_1900              (0x2)      /* Index for use with rf_cap.rf_power.pow_class4[] array */
#define IDX_PWRCLASS_850               (0x3)      /* Index for use with rf_cap.rf_power.pow_class4[] array */
#define IDX_PWRCLASS_400               (0x4)      /* Index for use with rf_cap.rf_power.pow_class4[] array */
// VAL-FF: REL99  
// #define IDX_PWRCLASS_700               (0x5)   /* Index for use with rf_cap.rf_power.pow_class4[] array */

/*
 * Value constants for VAL_bool
 */
#define NO                             (0x0)      /* value is not set               */
#define YES                            (0x1)      /* value is set                   */
#define NOT_SUPPORTED                  (0x0)      /* feature not supported          */
#define SUPPORTED                      (0x1)      /* feature supported              */

/*
 * Value constants for VAL_flag
 */
#define GRR_NO                         (0x0)      /* not present                    */
#define GRR_YES                        (0x1)      /* present                        */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_bss_paging_coord
// 
// #define CS_PG_NOT_SUPPORTED            (0x0)   /* The cell does not support Circuit-Switched paging co-ordination */
// #define CS_PG_SUPPORTED                (0x1)   /* The cell supports Circuit-Switched paging co-ordination */

/*
 * Value constants for VAL_ctrl_ack_type
 */
#define VAL_CTRL_ACK_TYPE___0          (0x0)      /* default format is four access bursts */
#define VAL_CTRL_ACK_TYPE___1          (0x1)      /* default format is RLC/MAC control block. */

/*
 * Value constants for VAL_dtm_g_ms_class
 */
#define SUB_CLASS_1                    (0x0)      /* Sub-Class 1 supported          */
#define SUB_CLASS_5                    (0x1)      /* Sub-Class 5 supported          */
#define SUP_CLASS_9                    (0x2)      /* Sub-Class 9 supported          */
#define VAL_DTM_G_MS_CLASS___3         (0x3)      /* Reserved                       */

// VALTAB-FF: TI_PS_FF_REL99_AND_ABOVE 
// 
// Value constants for VAL_dtm_g_high_ms_class
// 
// #define VAL_DTM_G_HIGH_MS_CLASS___0    (0x0)   /* Reserved                       */
// #define SUB_CLASS_31_OR_36             (0x1)   /* Multislot class 31 or 36 supported */
// #define SUB_CLASS_32_OR_37             (0x2)   /* Multislot class 32 or 37 supported */
// #define SUB_CLASS_33_OR_38             (0x3)   /* Multislot class 33 or 38 supported */
// #define SUB_CLASS_41                   (0x4)   /* Multislot class 41 supported   */
// #define SUB_CLASS_42                   (0x5)   /* Multislot class 42 supported   */
// #define SUB_CLASS_43                   (0x6)   /* Multislot class 43 supported   */
// #define SUB_CLASS_44                   (0x7)   /* Multislot class 44 supported   */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_dtm_support
// 
// #define DTM_NOT_SUPPORTED              (0x0)   /* The cell does not support DTM procedures. */
// #define DTM_SUPPORTED                  (0x1)   /* The cell supports DTM procedures. */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_egprs_packet_channel_request
// 
// #define EGPRS_PACKET_CHANNEL_REQUEST_MSG_SENT (0x0)
// #define PACKET_CHANNEL_REQUEST_MSG_SENT (0x1)  

/*
 * Value constants for VAL_bands
 */
#define BAND_AUTO                      (0x0)      /* 0b00000000: All bands shall be scanned */
#define BAND_GSM_900                   (0x1)      /* 0b00000001: GSM 900 is supported, shall be scanned */
#define BAND_DCS_1800                  (0x2)      /* 0b00000010: DCS 1800 is supported, shall be scanned */
#define BAND_PCS_1900                  (0x4)      /* 0b00000100: PCS 1900 is supported, shall be scanned */
#define BAND_E_GSM                     (0x8)      /* 0b00001000: Extended GSM is supported, shall be scanned */
#define BAND_GSM_850                   (0x10)     /* 0b00010000: GSM 850 is supported, shall be scanned */
#define BAND_GSM_450                   (0x20)     /* 0b00100000: GSM 450 is supported, shall be scanned */
#define BAND_GSM_480                   (0x40)     /* 0b01000000: GSM 480 is supported, shall be scanned */
#define BAND_R_GSM                     (0x80)     /* 0b10000000: R-GSM is supported, shall be scanned */
#define BAND_DUAL                      (0x3)      /* 0b00000011: GSM 900 and DCS 1800 is supported, shall be scanned */
#define BAND_DUAL_EXT                  (0xb)      /* 0b00001011: GSM 900, E-GSM and DCS 1800 is supported, shall be scanned */
#define BAND_DUAL_US                   (0x14)     /* 0b00010100: GSM 850 and PCS 1900 is supported, shall be scanned */

/*
 * Value constants for VAL_egsm
 */
#define EGSM_NOT_SUPPORTED             (0x0)      /* The mobile station does not support the extension band. */
#define EGSM_SUPPORTED                 (0x1)      /* The mobile station does support the extension band (E-GSM or R-GSM). */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_freq_scroll
// 
// #define SCROL_NO                       (0x0)   /* Frequency scrolling is not used */
// #define SCROL_YES                      (0x1)   /* Frequency scrolling is used    */

/*
 * Value constants for VAL_gsm400_supp
 */
#define VAL_GSM400_SUPP___0            (0x0)      /* reserved (if neither GSM 480 nor GSM 450 is supported the whole gsm400_struct is omitted) */
#define GSM480                         (0x1)      /* GSM 480 supported but GSM 450 not supported */
#define GSM450                         (0x2)      /* GSM 450 supported but GSM 480 not supported */
#define GSM450_480                     (0x3)      /* GSM 450 supported and GSM 480 supported */

/*
 * Value constants for VAL_pow_8psk_cap
 */
#define VAL_POW_8PSK_CAP___0           (0x0)      /* Reserved                       */
#define POWER_CLASS_E1                 (0x1)      
#define POWER_CLASS_E2                 (0x2)      
#define POWER_CLASS_E3                 (0x3)      

/*
 * Value constants for VAL_mod_cap
 */
#define DL_ONLY_8PSK                   (0x0)      /* 8-PSK supported for downlink reception only */
#define FULL_8PSK                      (0x1)      /* 8-PSK supported for uplink transmission and downlink reception */

/*
 * Value constants for VAL_mb_value
 */
#define VAL_MB_VALUE___DEF             (0x0)      /* Reserved                       */
#define MB_NO_EUROPEAN_BAND            (0x0)      /* 0b000: neither GSM 900, E-GSM or DCS 1800 supported */
#define MB_GSM900                      (0x1)      /* 0b001: GSM 900 is supported    */
#define MB_EGSM                        (0x2)      /* 0b010: E-GSM is supported      */
#define MB_DCS1800                     (0x4)      /* 0b100: DCS 1800 is supported   */
#define MB_DUAL                        (0x5)      /* 0b101: GSM 900 and DCS 1800 is supported */
#define MB_DUAL_EXT                    (0x6)      /* 0b110: E-GSM and DCS 1800 is supported */

/*
 * Value constants for VAL_ms_class
 */
#define MSLOT_CLASS_1                  (0x1)      /* Multi Slot Class 1             */
#define MSLOT_CLASS_2                  (0x2)      /* Multi Slot Class 2             */
#define MSLOT_CLASS_3                  (0x3)      /* Multi Slot Class 3             */
#define MSLOT_CLASS_4                  (0x4)      /* Multi Slot Class 4             */
#define MSLOT_CLASS_5                  (0x5)      /* Multi Slot Class 5             */
#define MSLOT_CLASS_6                  (0x6)      /* Multi Slot Class 6             */
#define MSLOT_CLASS_7                  (0x7)      /* Multi Slot Class 7             */
#define MSLOT_CLASS_8                  (0x8)      /* Multi Slot Class 8             */
#define MSLOT_CLASS_9                  (0x9)      /* Multi Slot Class 9             */
#define MSLOT_CLASS_10                 (0xa)      /* Multi Slot Class 10            */
#define MSLOT_CLASS_11                 (0xb)      /* Multi Slot Class 11            */
#define MSLOT_CLASS_12                 (0xc)      /* Multi Slot Class 12            */
#define MSLOT_CLASS_13                 (0xd)      /* Multi Slot Class 13            */
#define MSLOT_CLASS_14                 (0xe)      /* Multi Slot Class 14            */
#define MSLOT_CLASS_15                 (0xf)      /* Multi Slot Class 15            */
#define MSLOT_CLASS_16                 (0x10)     /* Multi Slot Class 16            */
#define MSLOT_CLASS_17                 (0x11)     /* Multi Slot Class 17            */
#define MSLOT_CLASS_18                 (0x12)     /* Multi Slot Class 18            */
#define MSLOT_CLASS_19                 (0x13)     /* Multi Slot Class 19            */
#define MSLOT_CLASS_20                 (0x14)     /* Multi Slot Class 20 (not for HSCSD) */
#define MSLOT_CLASS_21                 (0x15)     /* Multi Slot Class 21 (not for HSCSD) */
#define MSLOT_CLASS_22                 (0x16)     /* Multi Slot Class 22 (not for HSCSD) */
#define MSLOT_CLASS_23                 (0x17)     /* Multi Slot Class 23 (not for HSCSD) */
#define MSLOT_CLASS_24                 (0x18)     /* Multi Slot Class 24 (not for HSCSD) */
#define MSLOT_CLASS_25                 (0x19)     /* Multi Slot Class 25 (not for HSCSD) */
#define MSLOT_CLASS_26                 (0x1a)     /* Multi Slot Class 26 (not for HSCSD) */
#define MSLOT_CLASS_27                 (0x1b)     /* Multi Slot Class 27 (not for HSCSD) */
#define MSLOT_CLASS_28                 (0x1c)     /* Multi Slot Class 28 (not for HSCSD) */
#define MSLOT_CLASS_29                 (0x1d)     /* Multi Slot Class 29 (not for HSCSD) */

/*
 * Value constants for VAL_nmo
 */
#define VAL_NMO___0                    (0x0)      /* Network Mode 1                 */
#define VAL_NMO___1                    (0x1)      /* Network Mode 2                 */
#define VAL_NMO___2                    (0x2)      /* Network Mode 3                 */
#define VAL_NMO___3                    (0x3)      /* reserved                       */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_pfc_feature_mode
// 
// #define PFC_NOT_SUPPORTED              (0x0)   /* The network does not support packet flow context procedures. */
// #define PFC_SUPPORTED                  (0x1)   /* The network supports packet flow context procedures. */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_rep_priority
// 
// #define NORMAL_PRIO                    (0x0)   /* Normal reporting priority      */
// #define HIGH_PRIO                      (0x1)   /* High reporting priority        */

/*
 * Value constants for VAL_rf_pow_cap
 */
#define RF_CLASS_1                     (0x0)      /* class 1 for GSM 850, 900P+E, DCS 1800 and PCS 1900 */
#define RF_CLASS_2                     (0x1)      /* class 2 for GSM 850, 900P+E, DCS 1800 and PCS 1900 */
#define RF_CLASS_3                     (0x2)      /* class 3 for GSM 850, 900P+E, DCS 1800 and PCS 1900 */
#define RF_CLASS_4                     (0x3)      /* class 4 for GSM 850, 900P+E (reserved for DCS 1800 and PCS 1900) */
#define RF_CLASS_5                     (0x4)      /* class 5 for GSM 850, 900P+E (reserved for DCS 1800 and PCS 1900) */
#define VAL_RF_POW_CAP___5             (0x5)      /* reserved                       */
#define VAL_RF_POW_CAP___6             (0x6)      /* reserved                       */
#define RF_CLASS_IRRELEVANT            (0x7)      /* irrelevant for this IE (multiband GSM MS) */

/*
 * Value constants for VAL_rev_lev
 */
#define VAL_REV_LEV___DEF              (0x0)      /* Reserved by future use         */
#define REV_LEV_PHASE_1                (0x0)      /* Reserved for GSM phase 1       */
#define REV_LEV_PHASE_2                (0x1)      /* Used by GSM phase 2 mobile stations */
#define REV_LEV_R99_SUPPORT            (0x2)      /* Used by mobile stations supporting R99 or later versions */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_rev99
// 
// #define PHASE_1                        (0x0)   /* Release ?98 or older           */
// #define RELEASE99                      (0x1)   /* Release ?99 onwards            */

/*
 * Value constants for VAL_single_band
 */
#define VAL_SINGLE_BAND___DEF          (0x0)      /* Reserved                       */
#define SINGLE_EGSM                    (0x0)      /* Extended GSM is supported      */
#define SINGLE_GSM900                  (0x1)      /* GSM 900 is supported           */
#define SINGLE_DCS1800                 (0x2)      /* DCS 1800 is supported          */
#define SINGLE_GSM450                  (0x3)      /* GSM 450 is supported           */
#define SINGLE_GSM480                  (0x4)      /* GSM 480 is supported           */
#define SINGLE_GSM850                  (0x5)      /* GSM 850 is supported           */
#define SINGLE_PCS1900                 (0x6)      /* PCS 1900 is supported          */

/*
 * Value constants for VAL_sms_val
 */
#define SM_1                           (0x0)      /* 1/4  timeslot (~144 micro sec) */
#define SM_2                           (0x1)      /* 2/4 timeslot (~288 micro sec)  */
#define SM_3                           (0x2)      /* 3/4 timeslot (~433 micro sec)  */
#define SM_4                           (0x3)      /* 4/4 timeslot                   */
#define SM_5                           (0x4)      /* 5/4 timeslot                   */
#define SM_6                           (0x5)      /* 6/4 timeslot                   */
#define SM_7                           (0x6)      /* 7/4 timeslot                   */
#define SM_8                           (0x7)      /* 8/4 timeslot                   */
#define SM_9                           (0x8)      /* 9/4 timeslot                   */
#define SM_10                          (0x9)      /* 10/4 timeslot                  */
#define SM_11                          (0xa)      /* 11/4 timeslot                  */
#define SM_12                          (0xb)      /* 12/4 timeslot                  */
#define SM_13                          (0xc)      /* 13/4 timeslot                  */
#define SM_14                          (0xd)      /* 14/4 timeslot                  */
#define SM_15                          (0xe)      /* 15/4 timeslot                  */
#define SM_16                          (0xf)      /* 16/4 timeslot (~2307 micro sec) */

/*
 * Value constants for VAL_ss_screen
 */
#define VAL_SS_SCREEN___DEF            (0x0)      /* for future use (The network shall interpret these values the same as ?1?) */
#define SS_SCREEN_DEFAULT              (0x0)      /* default value of phase 1       */
#define SS_SCREEN_PHASE_2              (0x1)      /* capability of handling of ellipsis notation and phase 2 error handling */

/*
 * Value constants for VAL_ucs2_treat
 */
#define DEFAULT_PREF                   (0x0)      /* the ME has a preference for the default alphabet (defined in GSM 03.38) over UCS2. */
#define NO_PREF                        (0x1)      /* the ME has no preference between the use of the default alphabet and the use of UCS2. */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_rep_offset_900
// 
// #define ZERO_DB                        (0x0)   /* Apply an offset of 0 dB to the reported value */
// #define SIX_DB                         (0x1)   /* Apply an offset of 6 dB to the reported value */
// #define TWELVE_DB                      (0x2)   /* Apply an offset of 12 dB to the reported value */
// #define EIGHTEEN_DB                    (0x3)   /* Apply an offset of 18 dB to the reported value */
// #define TWENTYFOUR_DB                  (0x4)   /* Apply an offset of 24 dB to the reported value */
// #define THIRTY_DB                      (0x5)   /* Apply an offset of 30 dB to the reported value */
// #define THIRTYSIX_DB                   (0x6)   /* Apply an offset of 36 dB to the reported value */
// #define FORTYTWO_DB                    (0x7)   /* Apply an offset of 42 dB to the reported value */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_th_rep_900
// 
// #define ZERO                           (0x0)   /* Apply priority reporting if the reported value is above 0 dB */
// #define SIX                            (0x1)   /* Apply priority reporting if the reported value is above 6 dB */
// #define TWELVE                         (0x2)   /* Apply priority reporting if the reported value is above 12 dB */
// #define EIGHTEEN                       (0x3)   /* Apply priority reporting if the reported value is above 18 dB */
// #define TWENTYFOUR                     (0x4)   /* Apply priority reporting if the reported value is above 24 dB */
// #define THIRTY                         (0x5)   /* Apply priority reporting if the reported value is above 30 dB */
// #define THIRTYSIX                      (0x6)   /* Apply priority reporting if the reported value is above 36 dB */
// #define INDEFINITELY                   (0x7)   /* Never apply priority reporting */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_ccn_active
// 
// #define VAL_CCN_ACTIVE___0             (0x0)   /* The Cell has not enabled CCN procedure.(but if received on PMO/ PCCO then follow the one received on broadcast) */
// #define VAL_CCN_ACTIVE___1             (0x1)   /* The Cell has enabled CCN procedure. */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_nw_ext_ul_tbf
// 
// #define EXT_UL_TBF_NOT_SUPPORTED       (0x0)   /* The network does not support Extended UL TBF procedures. */
// #define EXT_UL_TBF_SUPPORTED           (0x1)   /* The network does support Extended UL TBF procedures. */

// VALTAB-FF: REL99 
// 
// Value constants for VAL_ccn_supported
// 
// #define CCN_SUPPORTED                  (0x0)   /* CCN is enabled towards the corresponding cell */
// #define CCN_NOT_SUPPORTED              (0x1)   /* CCN is disabled towards the corresponding cell */

// VALTAB-FF: TI_PS_FF_REL99_AND_ABOVE 
// 
// Value constants for VAL_ms_pwr_profile
// 
// #define MS_PWR_PROF0                   (0x0)   /* MULTISLOT_POWER_PROFILE 0      */
// #define MS_PWR_PROF1                   (0x1)   /* MULTISLOT_POWER_PROFILE 1      */
// #define MS_PWR_PROF2                   (0x2)   /* MULTISLOT_POWER_PROFILE 2      */
// #define MS_PWR_PROF3                   (0x3)   /* MULTISLOT_POWER_PROFILE 3      */

// VALTAB-FF: TI_PS_FF_REL99_AND_ABOVE 
// 
// Value constants for VAL_rep_acch_cap
// 
// #define REP_DL_FACCH                   (0x0)   /* MS supports Repeated Downlink FACCH */
// #define REP_SACCH_DL_FACCH             (0x1)   /* MS supports Repeated SACCH and Repeated Downlink FACCH */

// VALTAB-FF: TI_PS_FF_REL99_AND_ABOVE 
// 
// Value constants for VAL_dl_adv_rx_per
// 
// #define DL_ADVANC_RX_PERF_NOT_SUPPORT  (0x0)   /* Downlink Advanced Receiver Performance not supported */
// #define DL_ADVANC_RX_PERF_PHASE1_SUPPORT (0x1) /* Downlink Advanced Receiver Performance – phase I supported */
// #define DL_ADVANC_RX_PERF_RESERVE_VALUE1 (0x2) /* If value is received by the network, they shall be interpreted as ‘01’. */
// #define DL_ADVANC_RX_PERF_RESERVE_VALUE2 (0x3) /* If value is received by the network, they shall be interpreted as ‘01’. */

/*
 * user defined constants
 */
#define MAX_ADD_RA_CAP                 (0x4)      
#define MAX_NUM_ACC_TYPE               (0x10)     
#define MAX_BSIC                       (0x12)     
#define MAX_NNC                        (0x60)     
#define MAXRTDS6                       (0x14)     
#define MAXRTDS12                      (0xa)      
#define MAXRTD6                        (0x8)      
#define MAXRTD12                       (0x6)      
#define BIT7_MAX                       (0x80)     
#define MAX_TDD_CELLS                  (0x15)     
#define MAX_FDD_CELLS                  (0x11)     
#define MAX_FDD                        (0x83)     
#define MAX_TDD                        (0x83)     
#define MAX_CDMA2K_NEIGH_CELLS         (0x40)     

#include "CDG_LEAVE.h"


#endif
