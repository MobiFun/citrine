/*
+--------------------------------------------------------------------------+
| PROJECT : PROTOCOL STACK                                                 |
| FILE    : p_bat.val                                                      |
| SOURCE  : "sap\bat.pdf"                                                  |
| LastModified : "2005-02-03"                                              |
| IdAndVersion : "..8445.100.00.999."                                      |
| SrcFileTime  : "Tue Dec 18 08:39:54 2007"                                |
| Generated by CCDGEN_2.5.5A on Thu Sep 25 09:52:55 2014                   |
|           !!DO NOT MODIFY!!DO NOT MODIFY!!DO NOT MODIFY!!                |
+--------------------------------------------------------------------------+
*/

/* PRAGMAS
 * PREFIX                 : BAT
 * COMPATIBILITY_DEFINES  : NO
 * ALWAYS_ENUM_IN_VAL_FILE: NO
 * ENABLE_GROUP: NO
 * CAPITALIZE_TYPENAME: NO
 */


#ifndef P_BAT_VAL
#define P_BAT_VAL


#define CDG_ENTER__P_BAT_VAL

#define CDG_ENTER__FILENAME _P_BAT_VAL
#define CDG_ENTER__P_BAT_VAL__FILE_TYPE CDGINC
#define CDG_ENTER__P_BAT_VAL__LAST_MODIFIED _2005_02_03
#define CDG_ENTER__P_BAT_VAL__ID_AND_VERSION __8445_100_00_999

#define CDG_ENTER__P_BAT_VAL__SRC_FILE_TIME _Tue_Dec_18_08_39_54_2007

#include "CDG_ENTER.h"

#undef CDG_ENTER__P_BAT_VAL

#undef CDG_ENTER__FILENAME


/*
 * Enum to value table VAL_bearer_class
 * CCDGEN:WriteEnum_Count==171
 */
#ifndef __T_BAT_VAL_bearer_class__
#define __T_BAT_VAL_bearer_class__
typedef enum
{
  BAT_CLASS_NOT_PRESENT          = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLASS_NONE                 = 0x0,           /* none                           */
  BAT_CLASS_VOICE                = 0x1,           /* voice                          */
  BAT_CLASS_DATA                 = 0x2,           /* data                           */
  BAT_CLASS_FAX                  = 0x4,           /* FAX                            */
  BAT_CLASS_SMS                  = 0x8,           /* SMS                            */
  BAT_CLASS_AUX_VOICE            = 0x100          /* auxiliary voice                */
}T_BAT_VAL_bearer_class;
#endif

/*
 * Enum to value table VAL_capability
 * CCDGEN:WriteEnum_Count==172
 */
#ifndef __T_BAT_VAL_capability__
#define __T_BAT_VAL_capability__
typedef enum
{
  BAT_CAP_CMD                    = 0x1,           /* AT command capability          */
  BAT_CAP_SER                    = 0x2,           /* Serial capability              */
  BAT_CAP_PKT                    = 0x4            /* Packet capability              */
}T_BAT_VAL_capability;
#endif

/*
 * Enum to value table VAL_cli
 * CCDGEN:WriteEnum_Count==173
 */
#ifndef __T_BAT_VAL_cli__
#define __T_BAT_VAL_cli__
typedef enum
{
  BAT_VALIDITY_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_VALIDITY_VALID             = 0x0,           /* CLI valid                      */
  BAT_VALIDITY_WITHHELD          = 0x1,           /* CLI has been withheld by the originator. */
  BAT_VALIDITY_UNAVAILABLE       = 0x2            /* CLI is not available due to interworking problems or limitations of originating network */
}T_BAT_VAL_cli;
#endif

/*
 * Enum to value table VAL_cring_type
 * CCDGEN:WriteEnum_Count==174
 */
#ifndef __T_BAT_VAL_cring_type__
#define __T_BAT_VAL_cring_type__
typedef enum
{
  BAT_CRING_TYPE_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_CRING_TYPE_ASYNC           = 0x0,           /* asynchronous transparent       */
  BAT_CRING_TYPE_SYNC            = 0x1,           /* synchronous transparent        */
  BAT_CRING_TYPE_REL_ASYNC       = 0x2,           /* asynchronous non transparent   */
  BAT_CRING_TYPE_REL_SYNC        = 0x3,           /* synchronous non transparent    */
  BAT_CRING_TYPE_FAX             = 0x4,           /* facsimile (TS 62)              */
  BAT_CRING_TYPE_VOICE           = 0x5,           /* normal voice (TS 11)           */
  BAT_CRING_TYPE_AUX_VOICE       = 0x6,           /* voice on second line           */
  BAT_CRING_TYPE_GPRS            = 0x7            /* GPRS &lt;PDP_type&gt;,&lt;PDP_addr&gt;[,&lt;L2P&gt;] (GPRS network request for PDP context activation) */
}T_BAT_VAL_cring_type;
#endif

/*
 * Enum to value table VAL_delay
 * CCDGEN:WriteEnum_Count==175
 */
#ifndef __T_BAT_VAL_delay__
#define __T_BAT_VAL_delay__
typedef enum
{
  BAT_DELAY_NOT_PRESENT          = -0x1,          /* This indicates that the value is omitted. */
  BAT_DELAY_CLASS_1              = 0x1,           /* (Predictive)      &lt; 0.5   &lt; 1.5   &lt; 2     &lt; 7 */
  BAT_DELAY_CLASS_2              = 0x2,           /* (Predictive)      &lt; 5     &lt; 25    &lt; 15    &lt; 75 */
  BAT_DELAY_CLASS_3              = 0x3,           /* (Predictive)      &lt; 50&lt; 250   &lt; 75    &lt; 375 */
  BAT_DELAY_CLASS_4              = 0x4            /* (Best Effort) Unspecified      */
}T_BAT_VAL_delay;
#endif

/*
 * Value constants for VAL_delete_status
 */
#define BAT_CMGD_DEL_INDEX             (0x0)      /* Delete the messages specified by the index. */
#define BAT_CMGD_DEL_READ              (0x1)      /* Ignore the index and delete all the read messages. */
#define BAT_CMGD_DEL_READ_SENT         (0x2)      /* Ignore the index and delete all the read and sent messages. */
#define BAT_CMGD_DEL_READ_SENT_UNSENT  (0x3)      /* Ignore the index and delete all the read, send and unsent messages. */
#define BAT_CMGD_DEL_ALL               (0x4)      /* Ignore the index and delete all the messages whatever be  the status. */

/*
 * Enum to value table VAL_dev_name
 * CCDGEN:WriteEnum_Count==176
 */
#ifndef __T_BAT_VAL_dev_name__
#define __T_BAT_VAL_dev_name__
typedef enum
{
  BAT_DEV_NAME_UART              = 0x0,           /* UART                           */
  BAT_DEV_NAME_RIV               = 0x1,           /* Riviera                        */
  BAT_DEV_NAME_PKTIO             = 0x2,           /* PKTIO                          */
  BAT_DEV_NAME_PSI               = 0x3            /* PSI                            */
}T_BAT_VAL_dev_name;
#endif

/*
 * Enum to value table VAL_dtmf
 * CCDGEN:WriteEnum_Count==177
 */
#ifndef __T_BAT_VAL_dtmf__
#define __T_BAT_VAL_dtmf__
typedef enum
{
  BAT_DTMF_HASH                  = 0x23,          /* DTMF '#'                       */
  BAT_DTMF_STAR                  = 0x2a,          /* DTMF '*'                       */
  BAT_DTMF_0                     = 0x30,          /* DTMF '0'                       */
  BAT_DTMF_1                     = 0x31,          /* DTMF '1'                       */
  BAT_DTMF_2                     = 0x32,          /* DTMF '2'                       */
  BAT_DTMF_3                     = 0x33,          /* DTMF '3'                       */
  BAT_DTMF_4                     = 0x34,          /* DTMF '4'                       */
  BAT_DTMF_5                     = 0x35,          /* DTMF '5'                       */
  BAT_DTMF_6                     = 0x36,          /* DTMF '6'                       */
  BAT_DTMF_7                     = 0x37,          /* DTMF '7'                       */
  BAT_DTMF_8                     = 0x38,          /* DTMF '8'                       */
  BAT_DTMF_9                     = 0x39,          /* DTMF '9'                       */
  BAT_DTMF_A                     = 0x41,          /* DTMF 'A'                       */
  BAT_DTMF_B                     = 0x42,          /* DTMF 'B'                       */
  BAT_DTMF_C                     = 0x43,          /* DTMF 'C'                       */
  BAT_DTMF_D                     = 0x44           /* DTMF 'D'                       */
}T_BAT_VAL_dtmf;
#endif

/*
 * Enum to value table VAL_fax_bf
 * CCDGEN:WriteEnum_Count==178
 */
#ifndef __T_BAT_VAL_fax_bf__
#define __T_BAT_VAL_fax_bf__
typedef enum
{
  BAT_BF_DISABLED                = 0x0,           /* File transfer modes disabled   */
  BAT_BF_BFT                     = 0x1,           /* BFT, Rec. T434                 */
  BAT_BF_DOC_TRANSFER            = 0x2,           /* Document transfer mode         */
  BAT_BF_EDIFACT                 = 0x4,           /* Edifact mode                   */
  BAT_BF_BASIC                   = 0x8,           /* Basic transfer mode            */
  BAT_BF_CHARACTER               = 0x10,          /* Character mode                 */
  BAT_BF_MIXED                   = 0x20,          /* Mixed mode                     */
  BAT_BF_PROCESSABLE             = 0x40           /* Processable mode               */
}T_BAT_VAL_fax_bf;
#endif

/*
 * Enum to value table VAL_fax_br
 * CCDGEN:WriteEnum_Count==179
 */
#ifndef __T_BAT_VAL_fax_br__
#define __T_BAT_VAL_fax_br__
typedef enum
{
  BAT_BR_2400                    = 0x0,           /* 2400bps                        */
  BAT_BR_4800                    = 0x1,           /* 4800bps                        */
  BAT_BR_7200                    = 0x2,           /* 7200bps                        */
  BAT_BR_9600                    = 0x3,           /* 9600bps                        */
  BAT_BR_12000                   = 0x4,           /* 12000bps                       */
  BAT_BR_14400                   = 0x5            /* 14400bps                       */
}T_BAT_VAL_fax_br;
#endif

/*
 * Enum to value table VAL_fax_cq
 * CCDGEN:WriteEnum_Count==180
 */
#ifndef __T_BAT_VAL_fax_cq__
#define __T_BAT_VAL_fax_cq__
typedef enum
{
  BAT_VALUE_CQCDISABLED          = 0x0,           /* CQCDisabled                    */
  BAT_VALUE_CQCENABLED           = 0x1,           /* CQCEnabled                     */
  BAT_VALUE_CQCANDCORRECTION     = 0x2            /* CQCandCorrection               */
}T_BAT_VAL_fax_cq;
#endif

/*
 * Enum to value table VAL_fax_df
 * CCDGEN:WriteEnum_Count==181
 */
#ifndef __T_BAT_VAL_fax_df__
#define __T_BAT_VAL_fax_df__
typedef enum
{
  BAT_DF_1D_MDF_HUFF             = 0x0,           /* 1-D Modified Huffman (Rec. T4) */
  BAT_DF_2D_MDF_READ_T4          = 0x1,           /* 2-D Modified read (Rec. T4)    */
  BAT_DF_2D_UNCOMPRESSED         = 0x2,           /* 2-D Uncompressed mode (Rec. T4) */
  BAT_DF_2D_MDF_READ_T6          = 0x3            /* 2-D Modified modified read (Rec. T6) */
}T_BAT_VAL_fax_df;
#endif

/*
 * Enum to value table VAL_fax_ec
 * CCDGEN:WriteEnum_Count==182
 */
#ifndef __T_BAT_VAL_fax_ec__
#define __T_BAT_VAL_fax_ec__
typedef enum
{
  BAT_EC_DISABLED                = 0x0,           /* ECM Disabled                   */
  BAT_EC_ENABLED                 = 0x1,           /* Annex A/T30, ECM               */
  BAT_EC_HALF_DUPLEX             = 0x2,           /* Annex C/T30, half duplex       */
  BAT_EC_FULL_DUPLEX             = 0x3            /* Annex C/T30, full duplex       */
}T_BAT_VAL_fax_ec;
#endif

/*
 * Enum to value table VAL_fax_jp
 * CCDGEN:WriteEnum_Count==183
 */
#ifndef __T_BAT_VAL_fax_jp__
#define __T_BAT_VAL_fax_jp__
typedef enum
{
  BAT_JP_DISABLED                = 0x0,           /* JPEG coding disabled           */
  BAT_JP_ENABLED                 = 0x1,           /* JPEG coding (Rec. T81) enabled */
  BAT_JP_FULL_COLOUR             = 0x2,           /* Full colour mode               */
  BAT_JP_PREF_HUFFMAN            = 0x4,           /* Preferred Huffman tables enabled */
  BAT_JP_12_BITS                 = 0x8,           /* 12bits/pel/component           */
  BAT_JP_CUSTOM_ILLUMINANT       = 0x20,          /* Custom illuminant              */
  BAT_JP_CUSTOM_GAMUT_RANGE      = 0x40           /* Custom gamut range             */
}T_BAT_VAL_fax_jp;
#endif

/*
 * Enum to value table VAL_fax_ln
 * CCDGEN:WriteEnum_Count==184
 */
#ifndef __T_BAT_VAL_fax_ln__
#define __T_BAT_VAL_fax_ln__
typedef enum
{
  BAT_LN_A4                      = 0x0,           /* A4, 297mm                      */
  BAT_LN_B4                      = 0x1,           /* B4, 364mm                      */
  BAT_LN_UNLIMITED               = 0x2            /* Unlimited length               */
}T_BAT_VAL_fax_ln;
#endif

/*
 * Enum to value table VAL_fax_st
 * CCDGEN:WriteEnum_Count==185
 */
#ifndef __T_BAT_VAL_fax_st__
#define __T_BAT_VAL_fax_st__
typedef enum
{
  BAT_ST_0_0                     = 0x0,           /* 0ms for VR=0, 0ms for VR&gt;0  */
  BAT_ST_5_5                     = 0x1,           /* 5ms for VR=0, 5ms for VR&gt;0  */
  BAT_ST_10_5                    = 0x2,           /* 10ms for VR=0, 5ms for VR&gt;0 */
  BAT_ST_10_10                   = 0x3,           /* 10ms for VR=0, 10ms for VR&gt;0 */
  BAT_ST_20_10                   = 0x4,           /* 20ms for VR=0, 10ms for VR&gt;0 */
  BAT_ST_20_20                   = 0x5,           /* 20ms for VR=0, 20ms for VR&gt;0 */
  BAT_ST_40_20                   = 0x6,           /* 40ms for VR=0, 20ms for VR&gt;0 */
  BAT_ST_40_40                   = 0x7            /* 40ms for VR=0, 40ms for VR&gt;0 */
}T_BAT_VAL_fax_st;
#endif

/*
 * Enum to value table VAL_fax_vl
 * CCDGEN:WriteEnum_Count==186
 */
#ifndef __T_BAT_VAL_fax_vl__
#define __T_BAT_VAL_fax_vl__
typedef enum
{
  BAT_VALUE_DISABLED             = 0x0,           /* Disabled                       */
  BAT_VALUE_ENABLED              = 0x1            /* Enabled                        */
}T_BAT_VAL_fax_vl;
#endif

/*
 * Enum to value table VAL_fax_vr
 * CCDGEN:WriteEnum_Count==187
 */
#ifndef __T_BAT_VAL_fax_vr__
#define __T_BAT_VAL_fax_vr__
typedef enum
{
  BAT_VR_R8X3_85                 = 0x0,           /* R8 x 3.85 l/mm, Normal         */
  BAT_VR_R8X7_7                  = 0x1,           /* R8 x 7.7 l/mm, Fine            */
  BAT_VR_R8X15_4                 = 0x2,           /* R8 x 15.4 l/mm                 */
  BAT_VR_R16X15_4                = 0x4,           /* R16 x 15.4 l/mm                */
  BAT_VR_200X100                 = 0x8,           /* 200 dpi x 100 l/25.4mm         */
  BAT_VR_200X200                 = 0x10,          /* 200 dpi x 200 l/25.4mm         */
  BAT_VR_200X400                 = 0x20,          /* 200 dpi x 400 l/25.4mm         */
  BAT_VR_300X300                 = 0x40           /* 300 dpi x 300 l/25.4mm         */
}T_BAT_VAL_fax_vr;
#endif

/*
 * Enum to value table VAL_fax_wd
 * CCDGEN:WriteEnum_Count==188
 */
#ifndef __T_BAT_VAL_fax_wd__
#define __T_BAT_VAL_fax_wd__
typedef enum
{
  BAT_WD_1728                    = 0x0,           /* 1728 for R8, 3456 for R16, 1728 for 200dpi, 2592 for 300dpi, 3456 for 400dpi */
  BAT_WD_2048                    = 0x1,           /* 2048 for R8, 4096 for R16, 2048 for 200dpi */
  BAT_WD_2432                    = 0x2,           /* 2432 for R8, 4864 for R16, 2432 for 200dpi */
  BAT_WD_1216                    = 0x3,           /* 1216 for R8, 2432 for R16      */
  BAT_WD_864                     = 0x4            /* 864 for R8, 1728 for R16       */
}T_BAT_VAL_fax_wd;
#endif

/*
 * Enum to value table VAL_framing_format
 * CCDGEN:WriteEnum_Count==189
 */
#ifndef __T_BAT_VAL_framing_format__
#define __T_BAT_VAL_framing_format__
typedef enum
{
  BAT_FORMAT_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_FORMAT_8N2                 = 0x1,           /* 8 data bits, no parity bit, 2 stop bits */
  BAT_FORMAT_8P1                 = 0x2,           /* 8 data bits, 1 parity bit, 1 stop bits */
  BAT_FORMAT_8N1                 = 0x3,           /* 8 data bits, no parity bit, 1 stop bits */
  BAT_FORMAT_7N2                 = 0x4,           /* 7 data bits, no parity bit, 2 stop bits */
  BAT_FORMAT_7P1                 = 0x5,           /* 7 data bits, 1 parity bit, 1 stop bits */
  BAT_FORMAT_7N1                 = 0x6            /* 7 data bits, no parity bit, 1 stop bits */
}T_BAT_VAL_framing_format;
#endif

/*
 * Enum to value table VAL_framing_parity
 * CCDGEN:WriteEnum_Count==190
 */
#ifndef __T_BAT_VAL_framing_parity__
#define __T_BAT_VAL_framing_parity__
typedef enum
{
  BAT_PARITY_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_PARITY_ODD                 = 0x0,           /* Odd parity                     */
  BAT_PARITY_EVEN                = 0x1,           /* Even parity                    */
  BAT_PARITY_MARK                = 0x2,           /* Mark parity                    */
  BAT_PARITY_SPACE               = 0x3            /* Space parity                   */
}T_BAT_VAL_framing_parity;
#endif

/*
 * Enum to value table VAL_mean
 * CCDGEN:WriteEnum_Count==191
 */
#ifndef __T_BAT_VAL_mean__
#define __T_BAT_VAL_mean__
typedef enum
{
  BAT_MEAN_NOT_PRESENT           = -0x1,          /* This indicates that the value is omitted. */
  BAT_MEAN_CLASS_1               = 0x1,           /* 100 (~0.22 bit/s)              */
  BAT_MEAN_CLASS_2               = 0x2,           /* 200 (~0.44 bit/s)              */
  BAT_MEAN_CLASS_3               = 0x3,           /* 500 (~1.11 bit/s)              */
  BAT_MEAN_CLASS_4               = 0x4,           /* 1 000 (~2.2 bit/s)             */
  BAT_MEAN_CLASS_5               = 0x5,           /* 2 000 (~4.4 bit/s)             */
  BAT_MEAN_CLASS_6               = 0x6,           /* 5 000 (~11.1 bit/s)            */
  BAT_MEAN_CLASS_7               = 0x7,           /* 10 000 (~22 bit/s)             */
  BAT_MEAN_CLASS_8               = 0x8,           /* 20 000 (~44 bit/s)             */
  BAT_MEAN_CLASS_9               = 0x9,           /* 50 000 (~111 bit/s)            */
  BAT_MEAN_CLASS_10              = 0xa,           /* 100 000 (~0.22 kbit/s)         */
  BAT_MEAN_CLASS_11              = 0xb,           /* 200 000 (~0.44 kbit/s)         */
  BAT_MEAN_CLASS_12              = 0xc,           /* 500 000 (~1.11 kbit/s)         */
  BAT_MEAN_CLASS_13              = 0xd,           /* 1 000 000 (~2.2 kbit/s)        */
  BAT_MEAN_CLASS_14              = 0xe,           /* 2 000 000 (~4.4 kbit/s)        */
  BAT_MEAN_CLASS_15              = 0xf,           /* 5 000 000 (~11.1 kbit/s)       */
  BAT_MEAN_CLASS_16              = 0x10,          /* 10 000 000 (~22 kbit/s)        */
  BAT_MEAN_CLASS_17              = 0x11,          /* 20 000 000 (~44 kbit/s)        */
  BAT_MEAN_CLASS_18              = 0x12,          /* 50 000 000 (~111 kbit/s)       */
  BAT_MEAN_CLASS_31              = 0x1f           /* Best effort                    */
}T_BAT_VAL_mean;
#endif

/*
 * Enum to value table VAL_mobile_class
 * CCDGEN:WriteEnum_Count==192
 */
#ifndef __T_BAT_VAL_mobile_class__
#define __T_BAT_VAL_mobile_class__
typedef enum
{
  BAT_MOBILE_CLASS_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_MOBILE_CLASS_A             = 0x0,           /* Mobile class A  (highest)      */
  BAT_MOBILE_CLASS_B             = 0x1,           /* Mobile class B  (if necessary consider NET III) */
  BAT_MOBILE_CLASS_CG            = 0x2,           /* Mobile class CG (GPRS only mode) */
  BAT_MOBILE_CLASS_CC            = 0x3            /* Mobile class CC (circuit switched only mode - lowest) */
}T_BAT_VAL_mobile_class;
#endif

/*
 * Enum to value table VAL_p_mobile_class
 * CCDGEN:WriteEnum_Count==193
 */
#ifndef __T_BAT_VAL_p_mobile_class__
#define __T_BAT_VAL_p_mobile_class__
typedef enum
{
  BAT_P_MOBILE_CLASS_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_MOBILE_CLASS_A           = 0x0,           /* Mobile class A  (highest)      */
  BAT_P_MOBILE_CLASS_B           = 0x1,           /* Mobile class B  (if necessary consider NET III) */
  BAT_P_MOBILE_CLASS_BG          = 0x2,           /* Mobile class BG                */
  BAT_P_MOBILE_CLASS_BC          = 0x3,           /* Mobile class BC                */
  BAT_P_MOBILE_CLASS_BX          = 0x4,           /* Mobile class BX (automatic swap betwenn PDP and CS for NET III) */
  BAT_P_MOBILE_CLASS_CG          = 0x5,           /* Mobile class CG (GPRS only mode) */
  BAT_P_MOBILE_CLASS_CC          = 0x6            /* Mobile class CC (circuit switched only mode - lowest) */
}T_BAT_VAL_p_mobile_class;
#endif

/*
 * Enum to value table VAL_pdp_cid
 * CCDGEN:WriteEnum_Count==194
 */
#ifndef __T_BAT_VAL_pdp_cid__
#define __T_BAT_VAL_pdp_cid__
typedef enum
{
  BAT_PDP_CID_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_PDP_CID_1                  = 0x1,           /* PDP context identifier         */
  BAT_PDP_CID_2                  = 0x2            /* PDP context identifier         */
}T_BAT_VAL_pdp_cid;
#endif

/*
 * Enum to value table VAL_pdp_type
 * CCDGEN:WriteEnum_Count==195
 */
#ifndef __T_BAT_VAL_pdp_type__
#define __T_BAT_VAL_pdp_type__
typedef enum
{
  BAT_PDP_TYPE_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_PDP_TYPE_IPV4              = 0x0,           /* PDP type IPv4                  */
  BAT_PDP_TYPE_IPV6              = 0x1            /* PDP type IPv6                  */
}T_BAT_VAL_pdp_type;
#endif

/*
 * Enum to value table VAL_peak
 * CCDGEN:WriteEnum_Count==196
 */
#ifndef __T_BAT_VAL_peak__
#define __T_BAT_VAL_peak__
typedef enum
{
  BAT_PEAK_NOT_PRESENT           = -0x1,          /* This indicates that the value is omitted. */
  BAT_PEAK_CLASS_1               = 0x1,           /* Up to 1 000 (8 kbit/s)         */
  BAT_PEAK_CLASS_2               = 0x2,           /* Up to 2 000 (16 kbit/s)        */
  BAT_PEAK_CLASS_3               = 0x3,           /* Up to 4 000 (32 kbit/s)        */
  BAT_PEAK_CLASS_4               = 0x4,           /* Up to 8 000 (64 kbit/s)        */
  BAT_PEAK_CLASS_5               = 0x5,           /* Up to 16 000 (128 kbit/s)      */
  BAT_PEAK_CLASS_6               = 0x6,           /* Up to 32 000 (256 kbit/s)      */
  BAT_PEAK_CLASS_7               = 0x7,           /* Up to 64 000 (512 kbit/s)      */
  BAT_PEAK_CLASS_8               = 0x8,           /* Up to 128 000 (1 024 kbit/s)   */
  BAT_PEAK_CLASS_9               = 0x9            /* Up to 256 000 (2 048 kbit/s)   */
}T_BAT_VAL_peak;
#endif

/*
 * Enum to value table VAL_precedence
 * CCDGEN:WriteEnum_Count==197
 */
#ifndef __T_BAT_VAL_precedence__
#define __T_BAT_VAL_precedence__
typedef enum
{
  BAT_PRECEDENCE_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_PRECEDENCE_HIGH            = 0x1,           /* Service commitments shall be maintained ahead of precedence classes 2 and 3. */
  BAT_PRECEDENCE_NORMAL          = 0x2,           /* Service commitments shall be maintained ahead of precedence class 3. */
  BAT_PRECEDENCE_LOW             = 0x3            /* Service commitments shall be maintained after precedence classes 1 and 2. */
}T_BAT_VAL_precedence;
#endif

/*
 * Enum to value table VAL_record_id
 * CCDGEN:WriteEnum_Count==198
 */
#ifndef __T_BAT_VAL_record_id__
#define __T_BAT_VAL_record_id__
typedef enum
{
  BAT_RECORD_ID_RID1             = 0x1,           /* record id 1 (corresponds to line id 1 Line 1) */
  BAT_RECORD_ID_RID2             = 0x2,           /* record id 2 (corresponds to line id 2 Data) */
  BAT_RECORD_ID_RID3             = 0x3,           /* record id 3 (corresponds to line id 4 Fax) */
  BAT_RECORD_ID_RID4             = 0x4            /* record id 4 (corresponds to line id 256 Line 2) */
}T_BAT_VAL_record_id;
#endif

/*
 * Enum to value table VAL_reliability
 * CCDGEN:WriteEnum_Count==199
 */
#ifndef __T_BAT_VAL_reliability__
#define __T_BAT_VAL_reliability__
typedef enum
{
  BAT_RELIABILITY_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_RELIABILITY_CLASS_1        = 0x1,           /* error-sensitive application that cannot cope with data loss. */
  BAT_RELIABILITY_CLASS_2        = 0x2,           /* error-sensitive application that can cope with infrequent data loss. */
  BAT_RELIABILITY_CLASS_3        = 0x3,           /* error-sensitive application that can cope with data loss, GMM/SM, and SMS. */
  BAT_RELIABILITY_CLASS_4        = 0x4,           /* error-sensitive application that can cope with data loss. */
  BAT_RELIABILITY_CLASS_5        = 0x5            /* error non-sensitive application that can cope with data loss. */
}T_BAT_VAL_reliability;
#endif

/*
 * Enum to value table VAL_sms_mem
 * CCDGEN:WriteEnum_Count==200
 */
#ifndef __T_BAT_VAL_sms_mem__
#define __T_BAT_VAL_sms_mem__
typedef enum
{
  BAT_MEM_ME                     = 0x0,           /* ME message storage             */
  BAT_MEM_SM                     = 0x1            /* SM message storage             */
}T_BAT_VAL_sms_mem;
#endif

/*
 * Enum to value table VAL_sms_stat
 * CCDGEN:WriteEnum_Count==201
 */
#ifndef __T_BAT_VAL_sms_stat__
#define __T_BAT_VAL_sms_stat__
typedef enum
{
  BAT_STAT_NOT_PRESENT           = -0x1,          /* This indicates that the value is omitted. */
  BAT_STAT_REC_UNREAD            = 0x0,           /* Received unread message (i.e. new message) */
  BAT_STAT_REC_READ              = 0x1,           /* Received read message          */
  BAT_STAT_STO_UNSENT            = 0x2,           /* Stored unsent message (only applicable to SMs) */
  BAT_STAT_STO_SENT              = 0x3            /* Stored sent message (only applicable to SMs) */
}T_BAT_VAL_sms_stat;
#endif

/*
 * Enum to value table VAL_storage
 * CCDGEN:WriteEnum_Count==202
 */
#ifndef __T_BAT_VAL_storage__
#define __T_BAT_VAL_storage__
typedef enum
{
  BAT_STORAGE_FD                 = 0x0,           /* SIM fixdialling phone book     */
  BAT_STORAGE_DC                 = 0x1,           /* SIM last-dialling phone book (LD) */
  BAT_STORAGE_EN                 = 0x2,           /* Emergency call numbers (ED)    */
  BAT_STORAGE_AD                 = 0x3,           /* Abbreviated dialling numbers   */
  BAT_STORAGE_BD                 = 0x4,           /* Barred dialling numbers        */
  BAT_STORAGE_RC                 = 0x5,           /* Last received numbers (LR)     */
  BAT_STORAGE_SD                 = 0x6,           /* Service dialling numbers       */
  BAT_STORAGE_MC                 = 0x7,           /* Last missed numbers (LM)       */
  BAT_STORAGE_AF                 = 0x8,           /* Combination of fixed and abbreviated dialling phonebook (AD + FD) */
  BAT_STORAGE_UD                 = 0x9            /* User person number             */
}T_BAT_VAL_storage;
#endif

/*
 * Enum to value table VAL_trx
 * CCDGEN:WriteEnum_Count==203
 */
#ifndef __T_BAT_VAL_trx__
#define __T_BAT_VAL_trx__
typedef enum
{
  BAT_TRX_NOT_PRESENT            = -0x1,          /* This indicates that the value is omitted. */
  BAT_TRX_NO_TTY                 = 0x0,           /* No TTY reception and transmission ongoing */
  BAT_TRX_VCO_ONGOING            = 0x1,           /* TTY reception ongoing          */
  BAT_TRX_HCO_ONGOING            = 0x2,           /* TTY transmission ongoing       */
  BAT_TRX_BIDIRECTIONAL          = 0x3            /* TTY transmission and reception ongoing */
}T_BAT_VAL_trx;
#endif

/*
 * Enum to value table VAL_percent_als_mode
 * CCDGEN:WriteEnum_Count==204
 */
#ifndef __T_BAT_VAL_percent_als_mode__
#define __T_BAT_VAL_percent_als_mode__
typedef enum
{
  BAT_P_ALS_MOD_SPEECH           = 0x0,           /* Speech Mode                    */
  BAT_P_ALS_MOD_AUX_SPEECH       = 0x1            /* Auxiliary Speech Mode          */
}T_BAT_VAL_percent_als_mode;
#endif

/*
 * Enum to value table VAL_percent_atr_phase
 * CCDGEN:WriteEnum_Count==205
 */
#ifndef __T_BAT_VAL_percent_atr_phase__
#define __T_BAT_VAL_percent_atr_phase__
typedef enum
{
  BAT_P_ATR_PHASE_PHASE_2_AS_1_SIM = 0x0,         /* phase 2 card configured as phase 1 card */
  BAT_P_ATR_PHASE_PHASE_1_SIM    = 0x1,           /* phase 1 card                   */
  BAT_P_ATR_PHASE_PHASE_2_SIM    = 0x2,           /* phase 2 card                   */
  BAT_P_ATR_PHASE_PHASE_2PLUS_SIM = 0x3           /* phase 2+ card, TP download required */
}T_BAT_VAL_percent_atr_phase;
#endif

/*
 * Enum to value table VAL_percent_band_band
 * CCDGEN:WriteEnum_Count==206
 */
#ifndef __T_BAT_VAL_percent_band_band__
#define __T_BAT_VAL_percent_band_band__
typedef enum
{
  BAT_P_BAND_BAND_NOT_PRESENT    = 0x0,           /* This indicates that the value is not present. */
  BAT_P_BAND_BAND_900            = 0x1,           /* GSM 900                        */
  BAT_P_BAND_BAND_1800           = 0x2,           /* DCS 1800                       */
  BAT_P_BAND_BAND_1900           = 0x4,           /* PCS 1900                       */
  BAT_P_BAND_BAND_E_GSM          = 0x8,           /* E-GSM                          */
  BAT_P_BAND_BAND_850            = 0x10           /* GSM 850                        */
}T_BAT_VAL_percent_band_band;
#endif

/*
 * Enum to value table VAL_percent_band_mode
 * CCDGEN:WriteEnum_Count==207
 */
#ifndef __T_BAT_VAL_percent_band_mode__
#define __T_BAT_VAL_percent_band_mode__
typedef enum
{
  BAT_P_BAND_MOD_AUTO            = 0x0,           /* Automatic Switch Mode          */
  BAT_P_BAND_MOD_MANUAL          = 0x1            /* Manual Switch Mode             */
}T_BAT_VAL_percent_band_mode;
#endif

/*
 * Enum to value table VAL_andc_value
 * CCDGEN:WriteEnum_Count==208
 */
#ifndef __T_BAT_VAL_andc_value__
#define __T_BAT_VAL_andc_value__
typedef enum
{
  BAT_ANDC_VALUE_ALWAYS_ON       = 0x0,           /* DCD always on                  */
  BAT_ANDC_VALUE_DISABLE_AFTER_CALL = 0x1         /* DCD disable after call         */
}T_BAT_VAL_andc_value;
#endif

/*
 * Enum to value table VAL_plus_caoc_mode
 * CCDGEN:WriteEnum_Count==209
 */
#ifndef __T_BAT_VAL_plus_caoc_mode__
#define __T_BAT_VAL_plus_caoc_mode__
typedef enum
{
  BAT_CAOC_MODE_QUERY            = 0x0            /* query CCM value                */
}T_BAT_VAL_plus_caoc_mode;
#endif

/*
 * Enum to value table VAL_plus_cbc_bcl
 * CCDGEN:WriteEnum_Count==210
 */
#ifndef __T_BAT_VAL_plus_cbc_bcl__
#define __T_BAT_VAL_plus_cbc_bcl__
typedef enum
{
  BAT_CBC_BCL_EXCHAUSED          = 0x0,           /* battery is exhausted, or ME does not have a battery connected */
  BAT_CBC_BCL_MIN_LEVEL          = 0x1,           /* percent of capacity remaining  */
  BAT_CBC_BCL_MAX_LEVEL          = 0x64           /* percent of capacity remaining  */
}T_BAT_VAL_plus_cbc_bcl;
#endif

/*
 * Enum to value table VAL_plus_cbc_bsc
 * CCDGEN:WriteEnum_Count==211
 */
#ifndef __T_BAT_VAL_plus_cbc_bsc__
#define __T_BAT_VAL_plus_cbc_bsc__
typedef enum
{
  BAT_CBC_BSC_BATTERYPOWERED     = 0x0,           /* ME is powered by the battery   */
  BAT_CBC_BSC_BATTERY            = 0x1,           /* has a battery connected, but is not powered by it */
  BAT_CBC_BSC_NOBATTERY          = 0x2,           /* ME does not have a battery connected */
  BAT_CBC_BSC_POWERFAULT         = 0x3            /* Recognized power fault, calls inhibited */
}T_BAT_VAL_plus_cbc_bsc;
#endif

/*
 * Enum to value table VAL_percent_cbhz_mode
 * CCDGEN:WriteEnum_Count==212
 */
#ifndef __T_BAT_VAL_percent_cbhz_mode__
#define __T_BAT_VAL_percent_cbhz_mode__
typedef enum
{
  BAT_P_CBHZ_MOD_NOTACTIVE       = 0x0,           /* deactivation                   */
  BAT_P_CBHZ_MOD_ACTIVE          = 0x1            /* activation                     */
}T_BAT_VAL_percent_cbhz_mode;
#endif

/*
 * Enum to value table VAL_percent_cbhz_timeout
 * CCDGEN:WriteEnum_Count==213
 */
#ifndef __T_BAT_VAL_percent_cbhz_timeout__
#define __T_BAT_VAL_percent_cbhz_timeout__
typedef enum
{
  BAT_P_CBHZ_TIMOUT_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CBHZ_TIMOUT_CBHZ_MIN_TIMEOUT = 0x1e,      /* min timeout                    */
  BAT_P_CBHZ_TIMOUT_CBHZ_MAX_TIMEOUT = 0x78       /* max timeout                    */
}T_BAT_VAL_percent_cbhz_timeout;
#endif

/*
 * Enum to value table VAL_plus_cbst_ce
 * CCDGEN:WriteEnum_Count==214
 */
#ifndef __T_BAT_VAL_plus_cbst_ce__
#define __T_BAT_VAL_plus_cbst_ce__
typedef enum
{
  BAT_CBST_CE_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_CBST_CE_CBST_CE_TRANSPARENT = 0x0,          /* transparent                    */
  BAT_CBST_CE_CBST_CE_NONTRANSPARENT = 0x1,       /* non-transparent                */
  BAT_CBST_CE_CBST_CE_BOTHTRANSPREF = 0x2,        /* both, transparent preferred    */
  BAT_CBST_CE_CBST_CE_BOTHNONTRANSPREF = 0x3      /* both, non-transparent preferred */
}T_BAT_VAL_plus_cbst_ce;
#endif

/*
 * Enum to value table VAL_plus_cbst_name
 * CCDGEN:WriteEnum_Count==215
 */
#ifndef __T_BAT_VAL_plus_cbst_name__
#define __T_BAT_VAL_plus_cbst_name__
typedef enum
{
  BAT_CBST_NAM_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CBST_NAM_CBST_NAM_ASYNCH   = 0x0,           /* data circuit asynchronous      */
  BAT_CBST_NAM_CBST_NAM_SYNCH    = 0x1            /* data circuit synchronous       */
}T_BAT_VAL_plus_cbst_name;
#endif

/*
 * Enum to value table VAL_plus_cbst_speed
 * CCDGEN:WriteEnum_Count==216
 */
#ifndef __T_BAT_VAL_plus_cbst_speed__
#define __T_BAT_VAL_plus_cbst_speed__
typedef enum
{
  BAT_CBST_SPD_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CBST_SPD_AUTO              = 0x0,           /* autobaud                       */
  BAT_CBST_SPD_300_V21           = 0x1,           /* 300 bps (V.21)                 */
  BAT_CBST_SPD_1200_V22          = 0x2,           /* 1200 bps (V.22)                */
  BAT_CBST_SPD_1200_75_V23       = 0x3,           /* 1200/75 bps (V.23)             */
  BAT_CBST_SPD_2400_V22BIS       = 0x4,           /* 2400 bps (V.22bis)             */
  BAT_CBST_SPD_2400_V26TER       = 0x5,           /* 2400 bps (V.26ter)             */
  BAT_CBST_SPD_4800_V32          = 0x6,           /* 4800 bps (V.32)                */
  BAT_CBST_SPD_9600_V32          = 0x7,           /* 9600 bps (V.32)                */
  BAT_CBST_SPD_9600_V34          = 0xc,           /* 9600 bps (V.34)                */
  BAT_CBST_SPD_14400_V34         = 0xe,           /* 14400 bps (V.34)               */
  BAT_CBST_SPD_300_V110          = 0x41,          /* 300 bps (V.110)                */
  BAT_CBST_SPD_1200_V110         = 0x42,          /* 1200 bps (V.110)               */
  BAT_CBST_SPD_2400_V110         = 0x44,          /* 2400 bps (V.110)               */
  BAT_CBST_SPD_4800_V110         = 0x46,          /* 4800 bps (V.110)               */
  BAT_CBST_SPD_9600_V110         = 0x47,          /* 9600 bps (V.110)               */
  BAT_CBST_SPD_14400_V110        = 0x4b           /* 14400 bps (V.110)              */
}T_BAT_VAL_plus_cbst_speed;
#endif

/*
 * Enum to value table VAL_percent_ccbs_idx
 * CCDGEN:WriteEnum_Count==217
 */
#ifndef __T_BAT_VAL_percent_ccbs_idx__
#define __T_BAT_VAL_percent_ccbs_idx__
typedef enum
{
  BAT_P_CCBS_INDEX_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CCBS_INDEX_CLEAR         = 0x0,           /* clear all entries              */
  BAT_P_CCBS_INDEX_INDEX_1       = 0x1,           /* CCBS index 1                   */
  BAT_P_CCBS_INDEX_INDEX_2       = 0x2,           /* CCBS index 2                   */
  BAT_P_CCBS_INDEX_INDEX_3       = 0x3,           /* CCBS index 3                   */
  BAT_P_CCBS_INDEX_INDEX_4       = 0x4,           /* CCBS index 4                   */
  BAT_P_CCBS_INDEX_INDEX_5       = 0x5            /* CCBS index 5                   */
}T_BAT_VAL_percent_ccbs_idx;
#endif

/*
 * Enum to value table VAL_percent_ccbs_ind
 * CCDGEN:WriteEnum_Count==218
 */
#ifndef __T_BAT_VAL_percent_ccbs_ind__
#define __T_BAT_VAL_percent_ccbs_ind__
typedef enum
{
  BAT_P_CCBS_INDICATION_NOT_PRESENT = -0x1,       /* This indicates that the value is omitted. */
  BAT_P_CCBS_INDICATION_POSS_TIMED_OUT = 0x0,     /* possibility time out           */
  BAT_P_CCBS_INDICATION_POSSIBLE = 0x1,           /* possible                       */
  BAT_P_CCBS_INDICATION_REGISTERED = 0x2,         /* registered                     */
  BAT_P_CCBS_INDICATION_RECALL   = 0x3,           /* recall                         */
  BAT_P_CCBS_INDICATION_RECALL_TIMED_OUT = 0x4,   /* recall time out                */
  BAT_P_CCBS_INDICATION_IRGT_RESULT = 0x5         /* irgt result                    */
}T_BAT_VAL_percent_ccbs_ind;
#endif

/*
 * Enum to value table VAL_percent_ccbs_ptn
 * CCDGEN:WriteEnum_Count==219
 */
#ifndef __T_BAT_VAL_percent_ccbs_ptn__
#define __T_BAT_VAL_percent_ccbs_ptn__
typedef enum
{
  BAT_P_CCBS_PATTERN_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CCBS_PATTERN_LEVEL_0     = 0x0,           /* level 0                        */
  BAT_P_CCBS_PATTERN_LEVEL_1     = 0x1,           /* level 1                        */
  BAT_P_CCBS_PATTERN_LEVEL_2     = 0x2,           /* level 2                        */
  BAT_P_CCBS_PATTERN_CAT_1       = 0x4,           /* category 1                     */
  BAT_P_CCBS_PATTERN_CAT_2       = 0x5,           /* category 2                     */
  BAT_P_CCBS_PATTERN_CAT_3       = 0x6,           /* category 3                     */
  BAT_P_CCBS_PATTERN_CAT_4       = 0x7,           /* category 4                     */
  BAT_P_CCBS_PATTERN_CAT_5       = 0x8            /* category 5                     */
}T_BAT_VAL_percent_ccbs_ptn;
#endif

/*
 * Enum to value table VAL_percent_ccbs_stat
 * CCDGEN:WriteEnum_Count==220
 */
#ifndef __T_BAT_VAL_percent_ccbs_stat__
#define __T_BAT_VAL_percent_ccbs_stat__
typedef enum
{
  BAT_P_CCBS_STATUS_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CCBS_STATUS_NOT_PROVISIONED = 0x0,        /* not provisioned                */
  BAT_P_CCBS_STATUS_PROVISIONED  = 0x1,           /* provisioned                    */
  BAT_P_CCBS_STATUS_ACTIVE       = 0x2            /* active                         */
}T_BAT_VAL_percent_ccbs_stat;
#endif

/*
 * Enum to value table VAL_percent_cccn_direction
 * CCDGEN:WriteEnum_Count==221
 */
#ifndef __T_BAT_VAL_percent_cccn_direction__
#define __T_BAT_VAL_percent_cccn_direction__
typedef enum
{
  BAT_P_CCCN_DIRECTION_IN        = 0x0,           /* In                             */
  BAT_P_CCCN_DIRECTION_OUT       = 0x1,           /* Out                            */
  BAT_P_CCCN_DIRECTION_BOTH      = 0x2            /* Both                           */
}T_BAT_VAL_percent_cccn_direction;
#endif

/*
 * Enum to value table VAL_plus_ccfc_bearer_class
 * CCDGEN:WriteEnum_Count==222
 */
#ifndef __T_BAT_VAL_plus_ccfc_bearer_class__
#define __T_BAT_VAL_plus_ccfc_bearer_class__
typedef enum
{
  BAT_CCFC_CLASS_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCFC_CLASS_NONE            = 0x0,           /* None                           */
  BAT_CCFC_CLASS_VCE             = 0x1,           /* Voice                          */
  BAT_CCFC_CLASS_DAT             = 0x2,           /* Data                           */
  BAT_CCFC_CLASS_VCEDAT          = 0x3,           /* Voice Data                     */
  BAT_CCFC_CLASS_FAX             = 0x4,           /* Fax                            */
  BAT_CCFC_CLASS_VCEFAX          = 0x5,           /* Voice Fax                      */
  BAT_CCFC_CLASS_DATFAX          = 0x6,           /* Data Fax                       */
  BAT_CCFC_CLASS_VCEDATFAX       = 0x7,           /* Voice Data Fax                 */
  BAT_CCFC_CLASS_AUXVC           = 0x100          /* Auxiliary Voice                */
}T_BAT_VAL_plus_ccfc_bearer_class;
#endif

/*
 * Enum to value table VAL_plus_ccfc_mode
 * CCDGEN:WriteEnum_Count==223
 */
#ifndef __T_BAT_VAL_plus_ccfc_mode__
#define __T_BAT_VAL_plus_ccfc_mode__
typedef enum
{
  BAT_CCFC_MODE_DISABLE          = 0x0,           /* Disable                        */
  BAT_CCFC_MODE_ENABLE           = 0x1,           /* Enable                         */
  BAT_CCFC_MODE_QUERY            = 0x2,           /* Query                          */
  BAT_CCFC_MODE_REGISTER         = 0x3,           /* Register                       */
  BAT_CCFC_MODE_ERASURE          = 0x4            /* Erasure                        */
}T_BAT_VAL_plus_ccfc_mode;
#endif

/*
 * Enum to value table VAL_plus_ccfc_reason
 * CCDGEN:WriteEnum_Count==224
 */
#ifndef __T_BAT_VAL_plus_ccfc_reason__
#define __T_BAT_VAL_plus_ccfc_reason__
typedef enum
{
  BAT_CCFC_REASON_CFU            = 0x0,           /* Call Forwarding Unconditional  */
  BAT_CCFC_REASON_CFB            = 0x1,           /* Call Forwarding on mobile subscriber Busy */
  BAT_CCFC_REASON_CFNRY          = 0x2,           /* Call Forwarding on No Reply    */
  BAT_CCFC_REASON_CFNRE          = 0x3,           /* Call Forwarding on mobile subscriber Not Reachable */
  BAT_CCFC_REASON_ALLCF          = 0x4,           /* all call forwarding            */
  BAT_CCFC_REASON_ALLCONDCF      = 0x5            /* all conditional call forwarding */
}T_BAT_VAL_plus_ccfc_reason;
#endif

/*
 * Enum to value table VAL_plus_ccfc_status
 * CCDGEN:WriteEnum_Count==225
 */
#ifndef __T_BAT_VAL_plus_ccfc_status__
#define __T_BAT_VAL_plus_ccfc_status__
typedef enum
{
  BAT_CCFC_STATUS_NOT_ACTIVE     = 0x0,           /* not active                     */
  BAT_CCFC_STATUS_ACTIVE         = 0x1            /* active                         */
}T_BAT_VAL_plus_ccfc_status;
#endif

/*
 * Enum to value table VAL_plus_ccfc_time
 * CCDGEN:WriteEnum_Count==226
 */
#ifndef __T_BAT_VAL_plus_ccfc_time__
#define __T_BAT_VAL_plus_ccfc_time__
typedef enum
{
  BAT_CCFC_TIME_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCFC_TIME_MIN_TIME         = 0x1,           /* min time                       */
  BAT_CCFC_TIME_MAX_TIME         = 0x1e           /* max time                       */
}T_BAT_VAL_plus_ccfc_time;
#endif

/*
 * Enum to value table VAL_plus_ccug_index
 * CCDGEN:WriteEnum_Count==227
 */
#ifndef __T_BAT_VAL_plus_ccug_index__
#define __T_BAT_VAL_plus_ccug_index__
typedef enum
{
  BAT_CCUG_INDEX_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCUG_INDEX_IDX_0           = 0x0,           /* index 0                        */
  BAT_CCUG_INDEX_IDX_1           = 0x1,           /* index 1                        */
  BAT_CCUG_INDEX_IDX_2           = 0x2,           /* index 2                        */
  BAT_CCUG_INDEX_IDX_3           = 0x3,           /* index 3                        */
  BAT_CCUG_INDEX_IDX_4           = 0x4,           /* index 4                        */
  BAT_CCUG_INDEX_IDX_5           = 0x5,           /* index 5                        */
  BAT_CCUG_INDEX_IDX_6           = 0x6,           /* index 6                        */
  BAT_CCUG_INDEX_IDX_7           = 0x7,           /* index 7                        */
  BAT_CCUG_INDEX_IDX_8           = 0x8,           /* index 8                        */
  BAT_CCUG_INDEX_IDX_9           = 0x9,           /* index 9                        */
  BAT_CCUG_INDEX_NO_IDX          = 0xa            /* no index (preferred CUG taken from subscriber data) */
}T_BAT_VAL_plus_ccug_index;
#endif

/*
 * Enum to value table VAL_plus_ccug_info
 * CCDGEN:WriteEnum_Count==228
 */
#ifndef __T_BAT_VAL_plus_ccug_info__
#define __T_BAT_VAL_plus_ccug_info__
typedef enum
{
  BAT_CCUG_INFO_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCUG_INFO_NO               = 0x0,           /* no information                 */
  BAT_CCUG_INFO_SUPPOA           = 0x1,           /* suppress OA                    */
  BAT_CCUG_INFO_SUPPPREFCUG      = 0x2,           /* suppress preferential CUG      */
  BAT_CCUG_INFO_SUPPBOTH         = 0x3            /* suppress OA and preferential CUG */
}T_BAT_VAL_plus_ccug_info;
#endif

/*
 * Enum to value table VAL_plus_ccug_n
 * CCDGEN:WriteEnum_Count==229
 */
#ifndef __T_BAT_VAL_plus_ccug_n__
#define __T_BAT_VAL_plus_ccug_n__
typedef enum
{
  BAT_CCUG_N_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCUG_N_DISABLETMP          = 0x0,           /* disable temporary mode         */
  BAT_CCUG_N_ENABLETMP           = 0x1            /* enable  temporary mode         */
}T_BAT_VAL_plus_ccug_n;
#endif

/*
 * Enum to value table VAL_plus_ccwa_bearer_class
 * CCDGEN:WriteEnum_Count==230
 */
#ifndef __T_BAT_VAL_plus_ccwa_bearer_class__
#define __T_BAT_VAL_plus_ccwa_bearer_class__
typedef enum
{
  BAT_CCWA_CLASS_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCWA_CLASS_VOICE           = 0x1,           /* Voice                          */
  BAT_CCWA_CLASS_DATA            = 0x2,           /* Data                           */
  BAT_CCWA_CLASS_FAX             = 0x4,           /* Fax                            */
  BAT_CCWA_CLASS_AUXVC           = 0x100          /* Auxiliary Voice                */
}T_BAT_VAL_plus_ccwa_bearer_class;
#endif

/*
 * Enum to value table VAL_plus_ccwa_mode
 * CCDGEN:WriteEnum_Count==231
 */
#ifndef __T_BAT_VAL_plus_ccwa_mode__
#define __T_BAT_VAL_plus_ccwa_mode__
typedef enum
{
  BAT_CCWA_MODE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCWA_MODE_DISABLE          = 0x0,           /* disable                        */
  BAT_CCWA_MODE_ENABLE           = 0x1,           /* enable                         */
  BAT_CCWA_MODE_QUERY            = 0x2            /* query status                   */
}T_BAT_VAL_plus_ccwa_mode;
#endif

/*
 * Enum to value table VAL_plus_ccwa_status
 * CCDGEN:WriteEnum_Count==232
 */
#ifndef __T_BAT_VAL_plus_ccwa_status__
#define __T_BAT_VAL_plus_ccwa_status__
typedef enum
{
  BAT_CCWA_STATUS_NOTACTIVE      = 0x0,           /* any class not active           */
  BAT_CCWA_STATUS_ACTIVE         = 0x1            /* one or more classes active     */
}T_BAT_VAL_plus_ccwa_status;
#endif

/*
 * Enum to value table VAL_plus_ccwa_w_bearer_class
 * CCDGEN:WriteEnum_Count==233
 */
#ifndef __T_BAT_VAL_plus_ccwa_w_bearer_class__
#define __T_BAT_VAL_plus_ccwa_w_bearer_class__
typedef enum
{
  BAT_CCWA_W_CLASS_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCWA_W_CLASS_VOICE         = 0x1,           /* Voice                          */
  BAT_CCWA_W_CLASS_DATA          = 0x2,           /* Data                           */
  BAT_CCWA_W_CLASS_FAX           = 0x4,           /* Fax                            */
  BAT_CCWA_W_CLASS_AUXVC         = 0x100          /* Auxiliary Voice                */
}T_BAT_VAL_plus_ccwa_w_bearer_class;
#endif

/*
 * Enum to value table VAL_plus_ccwa_w_mode
 * CCDGEN:WriteEnum_Count==234
 */
#ifndef __T_BAT_VAL_plus_ccwa_w_mode__
#define __T_BAT_VAL_plus_ccwa_w_mode__
typedef enum
{
  BAT_CCWA_W_MODE_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CCWA_W_MODE_DISABLE        = 0x0,           /* disable                        */
  BAT_CCWA_W_MODE_ENABLE         = 0x1,           /* enable                         */
  BAT_CCWA_W_MODE_QUERY          = 0x2            /* query status                   */
}T_BAT_VAL_plus_ccwa_w_mode;
#endif

/*
 * Enum to value table VAL_plus_ccwa_w_status
 * CCDGEN:WriteEnum_Count==235
 */
#ifndef __T_BAT_VAL_plus_ccwa_w_status__
#define __T_BAT_VAL_plus_ccwa_w_status__
typedef enum
{
  BAT_CCWA_W_STATUS_NOTACTIVE    = 0x0,           /* any class not active           */
  BAT_CCWA_W_STATUS_ACTIVE       = 0x1            /* one or more classes active     */
}T_BAT_VAL_plus_ccwa_w_status;
#endif

/*
 * Enum to value table VAL_plus_cdip_m
 * CCDGEN:WriteEnum_Count==236
 */
#ifndef __T_BAT_VAL_plus_cdip_m__
#define __T_BAT_VAL_plus_cdip_m__
typedef enum
{
  BAT_CDIP_M_NO_CDIP             = 0x0,           /* CDIP not provisioned           */
  BAT_CDIP_M_CDIP                = 0x1,           /* CDIP provisioned               */
  BAT_CDIP_M_UNKNOWN             = 0x2            /* unknown (e.g. no network, etc.) */
}T_BAT_VAL_plus_cdip_m;
#endif

/*
 * Enum to value table VAL_plus_ceer_definedby
 * CCDGEN:WriteEnum_Count==237
 */
#ifndef __T_BAT_VAL_plus_ceer_definedby__
#define __T_BAT_VAL_plus_ceer_definedby__
typedef enum
{
  BAT_CEER_DEFINEDBY_STANDARD    = 0x0,           /* CauseValue is defined by a standardisation body (usually 3GPP) */
  BAT_CEER_DEFINEDBY_INTERNAL    = 0x1            /* CauseValue is defined by Condat, i.e. internally */
}T_BAT_VAL_plus_ceer_definedby;
#endif

/*
 * Enum to value table VAL_plus_ceer_originatingentity
 * CCDGEN:WriteEnum_Count==238
 */
#ifndef __T_BAT_VAL_plus_ceer_originatingentity__
#define __T_BAT_VAL_plus_ceer_originatingentity__
typedef enum
{
  BAT_CEER_ORIGINATINGENTITY_SIM = 0x0,           /* SIM is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_ACI = 0x1,           /* ACI is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_RLP = 0x2,           /* RLP is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_RR  = 0x3,           /* RR is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_MM  = 0x4,           /* MM is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_CC  = 0x5,           /* CC is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SS  = 0x6,           /* SS is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SMS_CP = 0x7,        /* SMS-CP is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SMS_RP = 0x8,        /* SMS-RP is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SMS_TL = 0x9,        /* SMS-TL is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_GMM = 0xa,           /* GMM is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SM  = 0xb,           /* SM is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_FAD = 0xc,           /* FAD is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_T30 = 0xd,           /* T30 is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_GRR = 0xe,           /* GRR is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_PPP = 0xf,           /* PPP is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_LLC = 0x10,          /* LLC is the entity originating the cause */
  BAT_CEER_ORIGINATINGENTITY_SNDCP = 0x11         /* SNDCP is the entity originating the cause */
}T_BAT_VAL_plus_ceer_originatingentity;
#endif

/*
 * Enum to value table VAL_plus_ceer_originatingside
 * CCDGEN:WriteEnum_Count==239
 */
#ifndef __T_BAT_VAL_plus_ceer_originatingside__
#define __T_BAT_VAL_plus_ceer_originatingside__
typedef enum
{
  BAT_CEER_ORIGINATINGSIDE_NW    = 0x0,           /* the network is the originating side */
  BAT_CEER_ORIGINATINGSIDE_MS    = 0x1            /* the mobile station is the originating side */
}T_BAT_VAL_plus_ceer_originatingside;
#endif

/*
 * Enum to value table VAL_plus_cfun_fun
 * CCDGEN:WriteEnum_Count==240
 */
#ifndef __T_BAT_VAL_plus_cfun_fun__
#define __T_BAT_VAL_plus_cfun_fun__
typedef enum
{
  BAT_CFUN_FUN_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CFUN_FUN_MIN               = 0x0,           /* Minimum                        */
  BAT_CFUN_FUN_FULL              = 0x1,           /* Full                           */
  BAT_CFUN_FUN_FLIGHT_MODE       = 0x4            /* Flight mode                    */
}T_BAT_VAL_plus_cfun_fun;
#endif

/*
 * Enum to value table VAL_plus_cfun_rst
 * CCDGEN:WriteEnum_Count==241
 */
#ifndef __T_BAT_VAL_plus_cfun_rst__
#define __T_BAT_VAL_plus_cfun_rst__
typedef enum
{
  BAT_CFUN_RST_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CFUN_RST_NO_RESET          = 0x0,           /* Do not reset the MT before changing functionality level */
  BAT_CFUN_RST_RESET             = 0x1            /* Reset the MT before changing functionality level */
}T_BAT_VAL_plus_cfun_rst;
#endif

/*
 * Enum to value table VAL_percent_cgaatt_att_m
 * CCDGEN:WriteEnum_Count==242
 */
#ifndef __T_BAT_VAL_percent_cgaatt_att_m__
#define __T_BAT_VAL_percent_cgaatt_att_m__
typedef enum
{
  BAT_P_CGAATT_ATT_M_AUTOMATIC   = 0x0,           /* automatic attach               */
  BAT_P_CGAATT_ATT_M_MANUAL      = 0x1            /* manual attach                  */
}T_BAT_VAL_percent_cgaatt_att_m;
#endif

/*
 * Enum to value table VAL_percent_cgaatt_det_m
 * CCDGEN:WriteEnum_Count==243
 */
#ifndef __T_BAT_VAL_percent_cgaatt_det_m__
#define __T_BAT_VAL_percent_cgaatt_det_m__
typedef enum
{
  BAT_P_CGAATT_DET_M_AUTOMATIC   = 0x0,           /* automatic detach after last context deactivation */
  BAT_P_CGAATT_DET_M_MANUAL      = 0x1            /* manuel detach                  */
}T_BAT_VAL_percent_cgaatt_det_m;
#endif

/*
 * Enum to value table VAL_plus_cgact_state
 * CCDGEN:WriteEnum_Count==244
 */
#ifndef __T_BAT_VAL_plus_cgact_state__
#define __T_BAT_VAL_plus_cgact_state__
typedef enum
{
  BAT_CGACT_STATE_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGACT_STATE_DEACTIVATED    = 0x0,           /* PDP context deactivated        */
  BAT_CGACT_STATE_ACTIVATED      = 0x1            /* PDP context activated          */
}T_BAT_VAL_plus_cgact_state;
#endif

/*
 * Enum to value table VAL_plus_cgans_response
 * CCDGEN:WriteEnum_Count==245
 */
#ifndef __T_BAT_VAL_plus_cgans_response__
#define __T_BAT_VAL_plus_cgans_response__
typedef enum
{
  BAT_CGANS_RESPONSE_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGANS_RESPONSE_REJECT      = 0x0,           /* reject the request             */
  BAT_CGANS_RESPONSE_ACCEPT      = 0x1            /* accept and request that the PDP context be activated */
}T_BAT_VAL_plus_cgans_response;
#endif

/*
 * Enum to value table VAL_plus_cgatt_state
 * CCDGEN:WriteEnum_Count==246
 */
#ifndef __T_BAT_VAL_plus_cgatt_state__
#define __T_BAT_VAL_plus_cgatt_state__
typedef enum
{
  BAT_CGATT_STATE_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGATT_STATE_DETACHED       = 0x0,           /* detached                       */
  BAT_CGATT_STATE_ATTACHED       = 0x1            /* attached                       */
}T_BAT_VAL_plus_cgatt_state;
#endif

/*
 * Enum to value table VAL_plus_cgdcont_d_comp
 * CCDGEN:WriteEnum_Count==247
 */
#ifndef __T_BAT_VAL_plus_cgdcont_d_comp__
#define __T_BAT_VAL_plus_cgdcont_d_comp__
typedef enum
{
  BAT_CGDCONT_D_COMP_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGDCONT_D_COMP_OFF         = 0x0,           /* PDP data compression off (default) */
  BAT_CGDCONT_D_COMP_ON          = 0x1,           /* PDP data compression On        */
  BAT_CGDCONT_D_COMP_V_42_BIS    = 0x2            /* PDP data compression On        */
}T_BAT_VAL_plus_cgdcont_d_comp;
#endif

/*
 * Enum to value table VAL_plus_cgdcont_h_comp
 * CCDGEN:WriteEnum_Count==248
 */
#ifndef __T_BAT_VAL_plus_cgdcont_h_comp__
#define __T_BAT_VAL_plus_cgdcont_h_comp__
typedef enum
{
  BAT_CGDCONT_H_COMP_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGDCONT_H_COMP_OFF         = 0x0,           /* PDP header compression off (default) */
  BAT_CGDCONT_H_COMP_ON          = 0x1,           /* PDP header compression on      */
  BAT_CGDCONT_H_COMP_RFC1144     = 0x2            /* PDP header compression on      */
}T_BAT_VAL_plus_cgdcont_h_comp;
#endif

/*
 * Enum to value table VAL_percent_cgev_evt
 * CCDGEN:WriteEnum_Count==249
 */
#ifndef __T_BAT_VAL_percent_cgev_evt__
#define __T_BAT_VAL_percent_cgev_evt__
typedef enum
{
  BAT_P_CGEV_EVT_REJECT          = 0x0,           /* Network request context activation */
  BAT_P_CGEV_EVT_NW_REACT        = 0x1,           /* Network requested context reactivation */
  BAT_P_CGEV_EVT_NW_DEACT        = 0x2,           /* Network forced context deactivation */
  BAT_P_CGEV_EVT_ME_DEACT        = 0x3,           /* Mobile equipment forced context deactivation */
  BAT_P_CGEV_EVT_NW_DETACH       = 0x4,           /* Network forced detach          */
  BAT_P_CGEV_EVT_ME_DETACH       = 0x5,           /* Mobile equipment forced detach */
  BAT_P_CGEV_EVT_NW_CLASS        = 0x6,           /* Network forced class change    */
  BAT_P_CGEV_EVT_ME_CLASS        = 0x7,           /* Mobile equipment forced class change */
  BAT_P_CGEV_EVT_NW_ACT          = 0x8,           /* There has been a context activation following a network-originated request. */
  BAT_P_CGEV_EVT_ME_ACT          = 0x9            /* The mobile equipment has triggered a context activation. */
}T_BAT_VAL_percent_cgev_evt;
#endif

/*
 * Enum to value table VAL_plus_cgev_evt
 * CCDGEN:WriteEnum_Count==250
 */
#ifndef __T_BAT_VAL_plus_cgev_evt__
#define __T_BAT_VAL_plus_cgev_evt__
typedef enum
{
  BAT_CGEV_EVT_REJECT            = 0x0,           /* Network request context activation */
  BAT_CGEV_EVT_NW_REACT          = 0x1,           /* Network requested context reactivation */
  BAT_CGEV_EVT_NW_DEACT          = 0x2,           /* Network forced context deactivation */
  BAT_CGEV_EVT_ME_DEACT          = 0x3,           /* Mobile equipment forced context deactivation */
  BAT_CGEV_EVT_NW_DETACH         = 0x4,           /* Network forced detach          */
  BAT_CGEV_EVT_ME_DETACH         = 0x5,           /* Mobile equipment forced detach */
  BAT_CGEV_EVT_NW_CLASS          = 0x6,           /* Network forced class change    */
  BAT_CGEV_EVT_ME_CLASS          = 0x7            /* Mobile equipment forced class change */
}T_BAT_VAL_plus_cgev_evt;
#endif

/*
 * Enum to value table VAL_percent_cgmm_cipher_on
 * CCDGEN:WriteEnum_Count==251
 */
#ifndef __T_BAT_VAL_percent_cgmm_cipher_on__
#define __T_BAT_VAL_percent_cgmm_cipher_on__
typedef enum
{
  BAT_P_CGMM_CIPHER_ON_OFF       = 0x0,           /* cipher off                     */
  BAT_P_CGMM_CIPHER_ON_ON        = 0x1            /* cipher on                      */
}T_BAT_VAL_percent_cgmm_cipher_on;
#endif

/*
 * Enum to value table VAL_percent_cgmm_tlli_handling
 * CCDGEN:WriteEnum_Count==252
 */
#ifndef __T_BAT_VAL_percent_cgmm_tlli_handling__
#define __T_BAT_VAL_percent_cgmm_tlli_handling__
typedef enum
{
  BAT_P_CGMM_TLLI_HANDLING_STANDARD = 0x0,        /* TLLI_STANDARD                  */
  BAT_P_CGMM_TLLI_HANDLING_TWICE = 0x1            /* TLLI_TWICE                     */
}T_BAT_VAL_percent_cgmm_tlli_handling;
#endif

/*
 * Enum to value table VAL_percent_cgpco_format
 * CCDGEN:WriteEnum_Count==253
 */
#ifndef __T_BAT_VAL_percent_cgpco_format__
#define __T_BAT_VAL_percent_cgpco_format__
typedef enum
{
  BAT_P_CGPCO_FORMAT_HEX         = 0x0,           /* hex format (coding defined in GSM 04.08; only implemented for the 'set PCO' command) */
  BAT_P_CGPCO_FORMAT_ASCII       = 0x1            /* ASCII for auth. protocol (only PAP), (set) user, password, DNS1 DNS2 gateway */
}T_BAT_VAL_percent_cgpco_format;
#endif

/*
 * Enum to value table VAL_percent_cgpco_mode
 * CCDGEN:WriteEnum_Count==254
 */
#ifndef __T_BAT_VAL_percent_cgpco_mode__
#define __T_BAT_VAL_percent_cgpco_mode__
typedef enum
{
  BAT_P_CGPCO_MODE_SET_PCO       = 0x0,           /* set PCO                        */
  BAT_P_CGPCO_MODE_QUERY_PCO     = 0x1            /* query active PCO               */
}T_BAT_VAL_percent_cgpco_mode;
#endif

/*
 * Enum to value table VAL_percent_cgppp_protocol
 * CCDGEN:WriteEnum_Count==255
 */
#ifndef __T_BAT_VAL_percent_cgppp_protocol__
#define __T_BAT_VAL_percent_cgppp_protocol__
typedef enum
{
  BAT_P_CGPPP_PROTOCOL_NO_AUTH   = 0x0,           /* no authentication (ignore login + pwd) */
  BAT_P_CGPPP_PROTOCOL_PAP       = 0x1,           /* password authentication protocol */
  BAT_P_CGPPP_PROTOCOL_CHAP      = 0x2,           /* challenge handshake authentication protocol */
  BAT_P_CGPPP_PROTOCOL_AUTO_AUTH = 0x3            /* automatic authentication       */
}T_BAT_VAL_percent_cgppp_protocol;
#endif

/*
 * Enum to value table VAL_percent_cgreg_stat
 * CCDGEN:WriteEnum_Count==256
 */
#ifndef __T_BAT_VAL_percent_cgreg_stat__
#define __T_BAT_VAL_percent_cgreg_stat__
typedef enum
{
  BAT_P_CGREG_STAT_NOT_REG       = 0x0,           /* not registered, ME is not currently searching an operator to register to */
  BAT_P_CGREG_STAT_REG_HOME      = 0x1,           /* registered, home network       */
  BAT_P_CGREG_STAT_SEARCHING     = 0x2,           /* not registered, but ME is currently trying to attach or searching an operator to register to */
  BAT_P_CGREG_STAT_REG_DEN       = 0x3,           /* registration denied            */
  BAT_P_CGREG_STAT_UNKN          = 0x4,           /* unknown                        */
  BAT_P_CGREG_STAT_REG_ROAM      = 0x5,           /* registered, roaming            */
  BAT_P_CGREG_STAT_LIMITED       = 0x6,           /* limited service (cell might be overloaded) [GPRS suspended] */
  BAT_P_CGREG_STAT_GSM_CALL      = 0x7,           /* GSM call active [GPRS suspended] */
  BAT_P_CGREG_STAT_NO_CELL       = 0x8,           /* no cell available [GPRS suspended] */
  BAT_P_CGREG_STAT_TRY_TO_UPDATE = 0x9            /* next attempt to update MS [GPRS suspended] */
}T_BAT_VAL_percent_cgreg_stat;
#endif

/*
 * Enum to value table VAL_percent_cgreg_state
 * CCDGEN:WriteEnum_Count==257
 */
#ifndef __T_BAT_VAL_percent_cgreg_state__
#define __T_BAT_VAL_percent_cgreg_state__
typedef enum
{
  BAT_P_CGREG_STATE_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CGREG_STATE_STAT_0       = 0x0,           /* no PDP context activated       */
  BAT_P_CGREG_STATE_STAT_1       = 0x1            /* one or more PDP contexts activated */
}T_BAT_VAL_percent_cgreg_state;
#endif

/*
 * Enum to value table VAL_plus_cgreg_stat
 * CCDGEN:WriteEnum_Count==258
 */
#ifndef __T_BAT_VAL_plus_cgreg_stat__
#define __T_BAT_VAL_plus_cgreg_stat__
typedef enum
{
  BAT_CGREG_STAT_NOT_REG         = 0x0,           /* not registered, ME is not currently searching an operator to register to */
  BAT_CGREG_STAT_REG_HOME        = 0x1,           /* registered, home network       */
  BAT_CGREG_STAT_SEARCHING       = 0x2,           /* not registered, but ME is currently trying to attach or searching an operator to register to */
  BAT_CGREG_STAT_REG_DEN         = 0x3,           /* registration denied            */
  BAT_CGREG_STAT_UNKN            = 0x4,           /* unknown                        */
  BAT_CGREG_STAT_REG_ROAM        = 0x5            /* registered, roaming            */
}T_BAT_VAL_plus_cgreg_stat;
#endif

/*
 * Enum to value table VAL_plus_cgsms_service
 * CCDGEN:WriteEnum_Count==259
 */
#ifndef __T_BAT_VAL_plus_cgsms_service__
#define __T_BAT_VAL_plus_cgsms_service__
typedef enum
{
  BAT_CGSMS_SERVICE_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_CGSMS_SERVICE_GPRS         = 0x0,           /* GPRS                           */
  BAT_CGSMS_SERVICE_CS           = 0x1,           /* circuit switched               */
  BAT_CGSMS_SERVICE_GPRS_PREFERRED = 0x2,         /* GPRS preferred (use circuit switched if GPRS not available) */
  BAT_CGSMS_SERVICE_CS_PREFERRED = 0x3            /* circuit switched  preferred (use GPRS if circuit switched not available) */
}T_BAT_VAL_plus_cgsms_service;
#endif

/*
 * Enum to value table VAL_percent_chld_n
 * CCDGEN:WriteEnum_Count==260
 */
#ifndef __T_BAT_VAL_percent_chld_n__
#define __T_BAT_VAL_percent_chld_n__
typedef enum
{
  BAT_P_CHLD_N_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CHLD_N_RELHLDORUDUB      = 0x0,           /* Releases all held calls or sets User Determined User Busy (UDUB) for a waiting call. (X is not supported) */
  BAT_P_CHLD_N_RELACTANDACPT     = 0x1,           /* Releases all active calls (if any exist) and accepts the other (held or waiting) call OR releases a specific active call X. */
  BAT_P_CHLD_N_HLDACTANDACPT     = 0x2,           /* Places all active calls (if any exist) on hold and accepts the other (held or waiting) call OR Places all active calls on hold except call X with which communication shall be supported. */
  BAT_P_CHLD_N_ADDHLD            = 0x3,           /* Adds a held call to the conversation. (X not supported) */
  BAT_P_CHLD_N_ECT               = 0x4,           /* Connects the two calls and disconnects the subscriber from both calls (ECT). (X is not supported) */
  BAT_P_CHLD_N_CCBS              = 0x5,           /* Activates the Completion of Calls to Busy Subscriber Request. (X is not supported) */
  BAT_P_CHLD_N_SWAP              = 0x6,           /* Swaps a specified held call and hold the active call. If X is not present the first held call will be chosen. */
  BAT_P_CHLD_N_RELANYSPEC        = 0x7,           /* Releases a specified call regardless of the state. (X is requested) */
  BAT_P_CHLD_N_ONLYHOLD          = 0x63,          /* Puts active call on hold without accepting any other calls automatically (AT+CHLD=H, X is not supported). */
  BAT_P_CHLD_N_RELDIALCALL       = 0x64           /* Releases the dialling call, without dropping current call (AT+CHLD=I, X is not supported). */
}T_BAT_VAL_percent_chld_n;
#endif

/*
 * Enum to value table VAL_percent_chpl_oprfrmt
 * CCDGEN:WriteEnum_Count==261
 */
#ifndef __T_BAT_VAL_percent_chpl_oprfrmt__
#define __T_BAT_VAL_percent_chpl_oprfrmt__
typedef enum
{
  BAT_P_CHPL_OPRFRMT_LONG        = 0x0,           /* long alphanumeric format.      */
  BAT_P_CHPL_OPRFRMT_SHORT       = 0x1,           /* short alphanumeric format.     */
  BAT_P_CHPL_OPRFRMT_NUMERIC     = 0x2            /* numeric format.                */
}T_BAT_VAL_percent_chpl_oprfrmt;
#endif

/*
 * Enum to value table VAL_percent_chpl_type
 * CCDGEN:WriteEnum_Count==262
 */
#ifndef __T_BAT_VAL_percent_chpl_type__
#define __T_BAT_VAL_percent_chpl_type__
typedef enum
{
  BAT_P_CHPL_TYPE_FROM_IMS       = 0x0            /* from IMS                       */
}T_BAT_VAL_percent_chpl_type;
#endif

/*
 * Enum to value table VAL_percent_chpl_w_oprfrmt
 * CCDGEN:WriteEnum_Count==263
 */
#ifndef __T_BAT_VAL_percent_chpl_w_oprfrmt__
#define __T_BAT_VAL_percent_chpl_w_oprfrmt__
typedef enum
{
  BAT_P_CHPL_W_OPRFRMT_LONG      = 0x0,           /* long alphanumeric format.      */
  BAT_P_CHPL_W_OPRFRMT_SHORT     = 0x1,           /* short alphanumeric format.     */
  BAT_P_CHPL_W_OPRFRMT_NUMERIC   = 0x2            /* numeric format.                */
}T_BAT_VAL_percent_chpl_w_oprfrmt;
#endif

/*
 * Enum to value table VAL_percent_chpl_w_type
 * CCDGEN:WriteEnum_Count==264
 */
#ifndef __T_BAT_VAL_percent_chpl_w_type__
#define __T_BAT_VAL_percent_chpl_w_type__
typedef enum
{
  BAT_P_CHPL_W_TYPE_FROM_IMS     = 0x0            /* from IMS                       */
}T_BAT_VAL_percent_chpl_w_type;
#endif

/*
 * Enum to value table VAL_plus_cind_signal
 * CCDGEN:WriteEnum_Count==265
 */
#ifndef __T_BAT_VAL_plus_cind_signal__
#define __T_BAT_VAL_plus_cind_signal__
typedef enum
{
  BAT_CIND_SIGNAL_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CIND_SIGNAL_LVL0           = 0x0,           /* Level 0                        */
  BAT_CIND_SIGNAL_LVL1           = 0x1,           /* Level 1                        */
  BAT_CIND_SIGNAL_LVL2           = 0x2,           /* Level 2                        */
  BAT_CIND_SIGNAL_LVL3           = 0x3,           /* Level 3                        */
  BAT_CIND_SIGNAL_LVL4           = 0x4,           /* Level 4                        */
  BAT_CIND_SIGNAL_LVL5           = 0x5            /* Level 5                        */
}T_BAT_VAL_plus_cind_signal;
#endif

/*
 * Enum to value table VAL_plus_cind_signal_ctrl
 * CCDGEN:WriteEnum_Count==266
 */
#ifndef __T_BAT_VAL_plus_cind_signal_ctrl__
#define __T_BAT_VAL_plus_cind_signal_ctrl__
typedef enum
{
  BAT_CIND_SIGNAL_CTRL_NOT_PRESENT = -0x1,        /* This indicates that the value is omitted. */
  BAT_CIND_SIGNAL_CTRL_OFF       = 0x0,           /* Indication off                 */
  BAT_CIND_SIGNAL_CTRL_LVL1      = 0x1,           /* Level 1                        */
  BAT_CIND_SIGNAL_CTRL_LVL2      = 0x2,           /* Level 2                        */
  BAT_CIND_SIGNAL_CTRL_LVL3      = 0x3,           /* Level 3                        */
  BAT_CIND_SIGNAL_CTRL_LVL4      = 0x4,           /* Level 4                        */
  BAT_CIND_SIGNAL_CTRL_LVL5      = 0x5            /* Level 5                        */
}T_BAT_VAL_plus_cind_signal_ctrl;
#endif

/*
 * Enum to value table VAL_plus_cind_smsfull
 * CCDGEN:WriteEnum_Count==267
 */
#ifndef __T_BAT_VAL_plus_cind_smsfull__
#define __T_BAT_VAL_plus_cind_smsfull__
typedef enum
{
  BAT_CIND_SMSFULL_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_CIND_SMSFULL_MEM_AVAILABLE = 0x0,           /* MEM Available                  */
  BAT_CIND_SMSFULL_MEM_FULL      = 0x1            /* MEM Full                       */
}T_BAT_VAL_plus_cind_smsfull;
#endif

/*
 * Enum to value table VAL_plus_cind_smsfull_ctrl
 * CCDGEN:WriteEnum_Count==268
 */
#ifndef __T_BAT_VAL_plus_cind_smsfull_ctrl__
#define __T_BAT_VAL_plus_cind_smsfull_ctrl__
typedef enum
{
  BAT_CIND_SMSFULL_CTRL_NOT_PRESENT = -0x1,       /* This indicates that the value is omitted. */
  BAT_CIND_SMSFULL_CTRL_OFF      = 0x0,           /* off                            */
  BAT_CIND_SMSFULL_CTRL_ON       = 0x1            /* on                             */
}T_BAT_VAL_plus_cind_smsfull_ctrl;
#endif

/*
 * Enum to value table VAL_plus_clcc_dir
 * CCDGEN:WriteEnum_Count==269
 */
#ifndef __T_BAT_VAL_plus_clcc_dir__
#define __T_BAT_VAL_plus_clcc_dir__
typedef enum
{
  BAT_CLCC_DIR_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLCC_DIR_MO_CALL           = 0x0,           /* mobile originated call         */
  BAT_CLCC_DIR_MT_CALL           = 0x1            /* mobile terminated  call        */
}T_BAT_VAL_plus_clcc_dir;
#endif

/*
 * Enum to value table VAL_plus_clcc_mode
 * CCDGEN:WriteEnum_Count==270
 */
#ifndef __T_BAT_VAL_plus_clcc_mode__
#define __T_BAT_VAL_plus_clcc_mode__
typedef enum
{
  BAT_CLCC_MODE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLCC_MODE_VOICE            = 0x0,           /* voice                          */
  BAT_CLCC_MODE_DATA             = 0x1,           /* data                           */
  BAT_CLCC_MODE_FAX              = 0x2,           /* fax                            */
  BAT_CLCC_MODE_VFDVOICE         = 0x3,           /* voice followed by data, voice mode */
  BAT_CLCC_MODE_VADVOICE         = 0x4,           /* alternating voice/data, voice mode */
  BAT_CLCC_MODE_VAFVOICE         = 0x5,           /* alternating voice/fax, voice mode */
  BAT_CLCC_MODE_VFDDATA          = 0x6,           /* voice followed by data, data mode */
  BAT_CLCC_MODE_VADDATA          = 0x7,           /* alternating voice/data, data mode */
  BAT_CLCC_MODE_VAFFAX           = 0x8,           /* alternating voice/fax, fax mode */
  BAT_CLCC_MODE_UNKNOWN          = 0x9            /* unknown                        */
}T_BAT_VAL_plus_clcc_mode;
#endif

/*
 * Enum to value table VAL_plus_clcc_mpty
 * CCDGEN:WriteEnum_Count==271
 */
#ifndef __T_BAT_VAL_plus_clcc_mpty__
#define __T_BAT_VAL_plus_clcc_mpty__
typedef enum
{
  BAT_CLCC_MPTY_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLCC_MPTY_NOT_MULTIPARTY   = 0x0,           /* call is not one of multiparty (conference) call parties */
  BAT_CLCC_MPTY_MULTIPARTY       = 0x1            /* call is one of multiparty (conference) call parties */
}T_BAT_VAL_plus_clcc_mpty;
#endif

/*
 * Enum to value table VAL_plus_clcc_stat
 * CCDGEN:WriteEnum_Count==272
 */
#ifndef __T_BAT_VAL_plus_clcc_stat__
#define __T_BAT_VAL_plus_clcc_stat__
typedef enum
{
  BAT_CLCC_STAT_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLCC_STAT_ACTIVE           = 0x0,           /* active                         */
  BAT_CLCC_STAT_HELD             = 0x1,           /* held                           */
  BAT_CLCC_STAT_DIALING          = 0x2,           /* dialing (MO call)              */
  BAT_CLCC_STAT_ALERTING         = 0x3,           /* alerting (MO call)             */
  BAT_CLCC_STAT_INCOMING         = 0x4,           /* incoming (MT call)             */
  BAT_CLCC_STAT_WAITING          = 0x5            /* waiting (MT call)              */
}T_BAT_VAL_plus_clcc_stat;
#endif

/*
 * Enum to value table VAL_plus_clck_fac
 * CCDGEN:WriteEnum_Count==273
 */
#ifndef __T_BAT_VAL_plus_clck_fac__
#define __T_BAT_VAL_plus_clck_fac__
typedef enum
{
  BAT_CLCK_FAC_SC                = 0x0,           /* SIM PIN1                       */
  BAT_CLCK_FAC_AO                = 0x1,           /* BAOC (Bar All Outgoing Calls) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CLCK_FAC_OI                = 0x2,           /* BOIC (Bar Outgoing International Calls) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CLCK_FAC_OX                = 0x3,           /* BOIC exHC (Barr Outgoing International Calls except to Home Country) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CLCK_FAC_AI                = 0x4,           /* BAIC (Bar All Incoming Calls) (refer 3GPP TS 22.088 [6] clause 2) */
  BAT_CLCK_FAC_IR                = 0x5,           /* BIC-Roam (Bar Incoming Calls when Roaming outside the home country) (refer 3GPP TS 22.088 [6] clause 2) */
  BAT_CLCK_FAC_AB                = 0x6,           /* All Barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CLCK_FAC_AG                = 0x7,           /* All outgoing barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CLCK_FAC_AC                = 0x8,           /* All incoming barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CLCK_FAC_FD                = 0x9,           /* SIM card or active application in the UICC fixed dialling memory feature */
  BAT_CLCK_FAC_PN                = 0xa,           /* Network Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CLCK_FAC_PU                = 0xb,           /* Network subset Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CLCK_FAC_PP                = 0xc,           /* Service Provider Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CLCK_FAC_PC                = 0xd,           /* Corporate Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CLCK_FAC_PS                = 0xe,           /* PH-SIM (lock phone to SIM/UICC card) */
  BAT_CLCK_FAC_PF                = 0xf,           /* Lock Phone to the very First inserted SIM/UICC card */
  BAT_CLCK_FAC_AL                = 0x10,          /* ALS settings locked by CHV2    */
// VAL-FF: SIM_PERS  
//   BAT_CLCK_FAC_BL                = 0x11,          /* Blocked Network Personalisation */
// VAL-FF: SIM_PERS  
//   BAT_CLCK_FAC_FC                = 0x12,          /* Failure Counter Reset for SIMLOCK */
// VAL-FF: SIM_PERS  
//   BAT_CLCK_FAC_FCM               = 0x13,          /* Failure Counter Reset for SIMLOCK */
// VAL-FF: SIM_PERS  
//   BAT_CLCK_FAC_MU                = 0x14,          /* For Master Unlock thru bootup  */
// VAL-FF: SIM_PERS  
//   BAT_CLCK_FAC_MUM               = 0x15,          /* For Master Unlock thru Menu    */
// VAL-FF: FF_PHONE_LOCK  
//   BAT_CLCK_FAC_PL                = 0x16,          /* For Phone Lock                 */
// VAL-FF: FF_PHONE_LOCK  
//   BAT_CLCK_FAC_APL               = 0x17,          /* For Auto Phone Lock            */
  BAT_CLCK_FAC_P2                = 0x18           /* for PIN2                       */
}T_BAT_VAL_plus_clck_fac;
#endif

/*
 * Enum to value table VAL_plus_clck_mode
 * CCDGEN:WriteEnum_Count==274
 */
#ifndef __T_BAT_VAL_plus_clck_mode__
#define __T_BAT_VAL_plus_clck_mode__
typedef enum
{
  BAT_CLCK_MODE_UNLOCK           = 0x0,           /* Unlock                         */
  BAT_CLCK_MODE_LOCK             = 0x1,           /* Lock                           */
  BAT_CLCK_MODE_QUERY            = 0x2            /* QUERY                          */
}T_BAT_VAL_plus_clck_mode;
#endif

/*
 * Enum to value table VAL_plus_clck_status
 * CCDGEN:WriteEnum_Count==275
 */
#ifndef __T_BAT_VAL_plus_clck_status__
#define __T_BAT_VAL_plus_clck_status__
typedef enum
{
  BAT_CLCK_STATUS_NOT_ACTIVE     = 0x0,           /* not active                     */
  BAT_CLCK_STATUS_ACTIVE         = 0x1            /* active                         */
}T_BAT_VAL_plus_clck_status;
#endif

/*
 * Enum to value table VAL_plus_clip_m
 * CCDGEN:WriteEnum_Count==276
 */
#ifndef __T_BAT_VAL_plus_clip_m__
#define __T_BAT_VAL_plus_clip_m__
typedef enum
{
  BAT_CLIP_M_NO_CLIP             = 0x0,           /* CLIP not provisioned           */
  BAT_CLIP_M_CLIP                = 0x1,           /* CLIP provisioned               */
  BAT_CLIP_M_UNKNOWN             = 0x2            /* unknown (e.g. no network, etc.) */
}T_BAT_VAL_plus_clip_m;
#endif

/*
 * Enum to value table VAL_plus_clip_w_m
 * CCDGEN:WriteEnum_Count==277
 */
#ifndef __T_BAT_VAL_plus_clip_w_m__
#define __T_BAT_VAL_plus_clip_w_m__
typedef enum
{
  BAT_CLIP_W_M_NO_CLIP           = 0x0,           /* CLIP not provisioned           */
  BAT_CLIP_W_M_CLIP              = 0x1,           /* CLIP provisioned               */
  BAT_CLIP_W_M_UNKNOWN           = 0x2            /* unknown (e.g. no network, etc.) */
}T_BAT_VAL_plus_clip_w_m;
#endif

/*
 * Enum to value table VAL_plus_clir_m
 * CCDGEN:WriteEnum_Count==278
 */
#ifndef __T_BAT_VAL_plus_clir_m__
#define __T_BAT_VAL_plus_clir_m__
typedef enum
{
  BAT_CLIR_M_NOTPROV             = 0x0,           /* CLIR not provisioned           */
  BAT_CLIR_M_PERMANENT           = 0x1,           /* CLIR provisioned in permanent mode */
  BAT_CLIR_M_UNKNOWN             = 0x2,           /* unknown (e.g. no network, etc.) */
  BAT_CLIR_M_RESTRICTTEMP        = 0x3,           /* CLIR temporary mode presentation restricted */
  BAT_CLIR_M_ALLOWTEMP           = 0x4            /* CLIR temporary mode presentation allowed */
}T_BAT_VAL_plus_clir_m;
#endif

/*
 * Enum to value table VAL_plus_clir_n
 * CCDGEN:WriteEnum_Count==279
 */
#ifndef __T_BAT_VAL_plus_clir_n__
#define __T_BAT_VAL_plus_clir_n__
typedef enum
{
  BAT_CLIR_N_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_CLIR_N_SUBSCRIPTION        = 0x0,           /* presentation indicator is used according to the subscription of the CLIR service */
  BAT_CLIR_N_INVOCATION          = 0x1,           /* CLIR invocation                */
  BAT_CLIR_N_SUPPRESSION         = 0x2            /* CLIR suppression               */
}T_BAT_VAL_plus_clir_n;
#endif

/*
 * Enum to value table VAL_plus_cmer_ind_option
 * CCDGEN:WriteEnum_Count==280
 */
#ifndef __T_BAT_VAL_plus_cmer_ind_option__
#define __T_BAT_VAL_plus_cmer_ind_option__
typedef enum
{
  BAT_CMER_IND_OPTION_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_CMER_IND_OPTION_LOWER      = 0x1,           /* Display indications lower than the threshold */
  BAT_CMER_IND_OPTION_GREATER_EQUAL = 0x2         /* Display indications greater or equal than the threshold */
}T_BAT_VAL_plus_cmer_ind_option;
#endif

/*
 * Enum to value table VAL_plus_cme_error_error
 * CCDGEN:WriteEnum_Count==281
 */
#ifndef __T_BAT_VAL_plus_cme_error_error__
#define __T_BAT_VAL_plus_cme_error_error__
typedef enum
{
  BAT_CME_ERROR_PHONE_FAIL       = 0x0,           /* Phone failure                  */
  BAT_CME_ERROR_NO_CONNECT       = 0x1,           /* No connection to phone         */
  BAT_CME_ERROR_LINK_RESERVED    = 0x2,           /* Phone-adaptor link reserved    */
  BAT_CME_ERROR_OP_NOT_ALLOW     = 0x3,           /* Operation not allowed          */
  BAT_CME_ERROR_OP_NOT_SUPPORTED = 0x4,           /* Operation not supported        */
  BAT_CME_ERROR_PH_SIM_PIN_REQ   = 0x5,           /* PH-SIM PIN required (SIM personalisation) */
  BAT_CME_ERROR_PHF_SIM_PIN_REQ  = 0x6,           /* PH-FSIM PIN required (personalisation on first inserted SIM) */
  BAT_CME_ERROR_PHF_SIM_PUK_REQ  = 0x7,           /* PH-FSIM PUK required (personalisation on first inserted SIM) */
  BAT_CME_ERROR_SIM_NOT_INS      = 0xa,           /* SIM not inserted               */
  BAT_CME_ERROR_SIM_PIN_REQ      = 0xb,           /* SIM PIN required               */
  BAT_CME_ERROR_SIM_PUK_REQ      = 0xc,           /* SIM PUK required               */
  BAT_CME_ERROR_SIM_FAIL         = 0xd,           /* SIM failure                    */
  BAT_CME_ERROR_SIM_BUSY         = 0xe,           /* SIM busy                       */
  BAT_CME_ERROR_SIM_WRONG        = 0xf,           /* SIM wrong                      */
  BAT_CME_ERROR_WRONG_PASSWORD   = 0x10,          /* Wrong password                 */
  BAT_CME_ERROR_SIM_PIN2_REQ     = 0x11,          /* SIM PIN2 required              */
  BAT_CME_ERROR_SIM_PUK2_REQ     = 0x12,          /* SIM PUK2 required              */
  BAT_CME_ERROR_MEMORY_FULL      = 0x14,          /* Memory full                    */
  BAT_CME_ERROR_INVALID_INDEX    = 0x15,          /* Invalid index                  */
  BAT_CME_ERROR_NOT_FOUND        = 0x16,          /* Not found                      */
  BAT_CME_ERROR_MEMORY_FAIL      = 0x17,          /* Memory failure                 */
  BAT_CME_ERROR_TEXT_TOO_LONG    = 0x18,          /* Text string too long           */
  BAT_CME_ERROR_INV_TEXT_CHAR    = 0x19,          /* Invalid characters in text string */
  BAT_CME_ERROR_DIAL_TOO_LONG    = 0x1a,          /* Dial string too long           */
  BAT_CME_ERROR_INV_DIAL_CHAR    = 0x1b,          /* Invalid characters in dial string */
  BAT_CME_ERROR_NO_SERV          = 0x1e,          /* No network service             */
  BAT_CME_ERROR_TIMEOUT          = 0x1f,          /* Timeout                        */
  BAT_CME_ERROR_LIM_SERV         = 0x20,          /* Limited service                */
  BAT_CME_ERROR_NET_PERS_PIN_REQ = 0x28,          /* PIN to change network personalisation required */
  BAT_CME_ERROR_NET_PERS_PUK_REQ = 0x29,          /* Network personalisation PUK is required */
  BAT_CME_ERROR_NET_SUBSET_PERS_PIN_REQ = 0x2a,   /* Keycode to change network subset personalisation required */
  BAT_CME_ERROR_NET_SUBSET_PERS_PUK_REQ = 0x2b,   /* Network subset personalisation PUK is required */
  BAT_CME_ERROR_PROVIDER_PERS_PIN_REQ = 0x2c,     /* Keycode to change service provider personalisation required */
  BAT_CME_ERROR_PROVIDER_PERS_PUK_REQ = 0x2d,     /* Service provider personalisation PUK is required */
  BAT_CME_ERROR_CORPORATE_PERS_PIN_REQ = 0x2e,    /* Keycode to change corporate personalisation required */
  BAT_CME_ERROR_CORPORATE_PERS_PUK_REQ = 0x2f,    /* Corporate personalisation PUK is required */
  BAT_CME_ERROR_UNKNOWN          = 0x64,          /* Unknown                        */
  BAT_CME_ERROR_GPRS_BAD_MS      = 0x67,          /* GPRS_BAD_MS                    */
  BAT_CME_ERROR_GPRS_BAD_ME      = 0x6a,          /* GPRS_BAD_ME                    */
  BAT_CME_ERROR_GPRS_NO_SERVICE  = 0x6b,          /* GPRS_NO_SERVICE                */
  BAT_CME_ERROR_GPRS_BAD_PLMN    = 0x6f,          /* GPRS_BAD_PLMN                  */
  BAT_CME_ERROR_GPRS_BAD_LOC     = 0x70,          /* GPRS_BAD_LOC                   */
  BAT_CME_ERROR_GPRS_NO_ROAM     = 0x71,          /* GPRS_NO_ROAM                   */
  BAT_CME_ERROR_GPRS_SER_OPT_NSUP = 0x84,         /* GPRS_SER_OPT_NSUP              */
  BAT_CME_ERROR_GPRS_SER_OPT_NSUB = 0x85,         /* GPRS_SER_OPT_NSUB              */
  BAT_CME_ERROR_GPRS_SER_OPT_OOO = 0x86,          /* GPRS_SER_OPT_0000              */
  BAT_CME_ERROR_GPRS_UNSPEC      = 0x94,          /* GPRS_UNSPEC                    */
  BAT_CME_ERROR_GPRS_PDP_AUTH    = 0x95,          /* GPRS_PDP_AUTH                  */
  BAT_CME_ERROR_GPRS_BAD_MOD_CLASS = 0x96,        /* GPRS_BAD_MOD_CLASS             */
  BAT_CME_ERROR_FAILED_TO_ABORT  = 0x200,         /* Failed to abort                */
  BAT_CME_ERROR_ACM_RESET_NEEDED = 0x201,         /* ACM reset needed               */
  BAT_CME_ERROR_SIM_SAT_BUSY     = 0x202,         /* Sim is busy with SAT (sw1=0x93), further normal commands allowed */
  BAT_CME_ERROR_SIM_NO_EXT_AVAIL = 0x203,         /* sim extension memory full      */
  BAT_CME_ERROR_SIM_RESET_NEEDED = 0x204,         /* SIM reinserted, sim reset needed */
  BAT_CME_ERROR_ABORTEDBYNETWORK = 0x205          /* PLMN Search aborted by Network */
}T_BAT_VAL_plus_cme_error_error;
#endif

/*
 * Enum to value table VAL_percent_cmgl_alpha_cs
 * CCDGEN:WriteEnum_Count==282
 */
#ifndef __T_BAT_VAL_percent_cmgl_alpha_cs__
#define __T_BAT_VAL_percent_cmgl_alpha_cs__
typedef enum
{
  BAT_P_CMGL_ALPHA_CS_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_CMGL_ALPHA_CS_GSM_DEF    = 0x0,           /* 7 bit                          */
  BAT_P_CMGL_ALPHA_CS_GSM_INT    = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_P_CMGL_ALPHA_CS_HEX        = 0x2,           /* 8 bit transparent              */
  BAT_P_CMGL_ALPHA_CS_UCS2       = 0x3,           /* 16 bit unicode                 */
  BAT_P_CMGL_ALPHA_CS_SIM        = 0x4,           /* SIM card format                */
  BAT_P_CMGL_ALPHA_CS_ASCII      = 0x5            /* ASCII                          */
}T_BAT_VAL_percent_cmgl_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmgl_alpha_cs
 * CCDGEN:WriteEnum_Count==283
 */
#ifndef __T_BAT_VAL_plus_cmgl_alpha_cs__
#define __T_BAT_VAL_plus_cmgl_alpha_cs__
typedef enum
{
  BAT_CMGL_ALPHA_CS_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMGL_ALPHA_CS_GSM_DEF      = 0x0,           /* 7 bit                          */
  BAT_CMGL_ALPHA_CS_GSM_INT      = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMGL_ALPHA_CS_HEX          = 0x2,           /* 8 bit transparent              */
  BAT_CMGL_ALPHA_CS_UCS2         = 0x3,           /* 16 bit unicode                 */
  BAT_CMGL_ALPHA_CS_SIM          = 0x4,           /* SIM card format                */
  BAT_CMGL_ALPHA_CS_ASCII        = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmgl_alpha_cs;
#endif

/*
 * Enum to value table VAL_percent_cmgl_stat
 * CCDGEN:WriteEnum_Count==284
 */
#ifndef __T_BAT_VAL_percent_cmgl_stat__
#define __T_BAT_VAL_percent_cmgl_stat__
typedef enum
{
  BAT_P_CMGL_STAT_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CMGL_STAT_REC_UNREAD     = 0x0,           /* received unread message (i.e. new message) */
  BAT_P_CMGL_STAT_REC_READ       = 0x1,           /* received read message          */
  BAT_P_CMGL_STAT_STO_UNSENT     = 0x2,           /* stored unsent message (only applicable to SMs) */
  BAT_P_CMGL_STAT_STO_SEND       = 0x3,           /* stored sent message (only applicable to SMs) */
  BAT_P_CMGL_STAT_ALL            = 0x4            /* all messages (only applicable to %CMGL command) */
}T_BAT_VAL_percent_cmgl_stat;
#endif

/*
 * Enum to value table VAL_plus_cmgl_stat
 * CCDGEN:WriteEnum_Count==285
 */
#ifndef __T_BAT_VAL_plus_cmgl_stat__
#define __T_BAT_VAL_plus_cmgl_stat__
typedef enum
{
  BAT_CMGL_STAT_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMGL_STAT_REC_UNREAD       = 0x0,           /* received unread message (i.e. new message) */
  BAT_CMGL_STAT_REC_READ         = 0x1,           /* received read message          */
  BAT_CMGL_STAT_STO_UNSENT       = 0x2,           /* stored unsent message (only applicable to SMs) */
  BAT_CMGL_STAT_STO_SEND         = 0x3,           /* stored sent message (only applicable to SMs) */
  BAT_CMGL_STAT_ALL              = 0x4            /* all messages (only applicable to +CMGL command) */
}T_BAT_VAL_plus_cmgl_stat;
#endif

/*
 * Enum to value table VAL_plus_cmgl_w_alpha_cs
 * CCDGEN:WriteEnum_Count==286
 */
#ifndef __T_BAT_VAL_plus_cmgl_w_alpha_cs__
#define __T_BAT_VAL_plus_cmgl_w_alpha_cs__
typedef enum
{
  BAT_CMGL_W_ALPHA_CS_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_CMGL_W_ALPHA_CS_GSM_DEF    = 0x0,           /* 7 bit                          */
  BAT_CMGL_W_ALPHA_CS_GSM_INT    = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMGL_W_ALPHA_CS_HEX        = 0x2,           /* 8 bit transparent              */
  BAT_CMGL_W_ALPHA_CS_UCS2       = 0x3,           /* 16 bit unicode                 */
  BAT_CMGL_W_ALPHA_CS_SIM        = 0x4,           /* SIM card format                */
  BAT_CMGL_W_ALPHA_CS_ASCII      = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmgl_w_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmgl_w_stat
 * CCDGEN:WriteEnum_Count==287
 */
#ifndef __T_BAT_VAL_plus_cmgl_w_stat__
#define __T_BAT_VAL_plus_cmgl_w_stat__
typedef enum
{
  BAT_CMGL_W_STAT_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMGL_W_STAT_REC_UNREAD     = 0x0,           /* received unread message (i.e. new message) */
  BAT_CMGL_W_STAT_REC_READ       = 0x1,           /* received read message          */
  BAT_CMGL_W_STAT_STO_UNSENT     = 0x2,           /* stored unsent message (only applicable to SMs) */
  BAT_CMGL_W_STAT_STO_SEND       = 0x3,           /* stored sent message (only applicable to SMs) */
  BAT_CMGL_W_STAT_ALL            = 0x4            /* all messages (only applicable to +CMGL command) */
}T_BAT_VAL_plus_cmgl_w_stat;
#endif

/*
 * Enum to value table val_percent_cmgr_alpha_cs
 * CCDGEN:WriteEnum_Count==288
 */
#ifndef __T_BAT_val_percent_cmgr_alpha_cs__
#define __T_BAT_val_percent_cmgr_alpha_cs__
typedef enum
{
  BAT_P_CMGR_ALPHA_CS_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_CMGR_ALPHA_CS_GSM_DEF    = 0x0,           /* 7bit                           */
  BAT_P_CMGR_ALPHA_CS_GSM_INT    = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_P_CMGR_ALPHA_CS_HEX        = 0x2,           /* 8 bit transparent              */
  BAT_P_CMGR_ALPHA_CS_UCS2       = 0x3,           /* 16 bit unicode                 */
  BAT_P_CMGR_ALPHA_CS_SIM        = 0x4,           /* SIM card format                */
  BAT_P_CMGR_ALPHA_CS_ASCII      = 0x5            /* ASCII                          */
}T_BAT_val_percent_cmgr_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmgr_alpha_cs
 * CCDGEN:WriteEnum_Count==289
 */
#ifndef __T_BAT_VAL_plus_cmgr_alpha_cs__
#define __T_BAT_VAL_plus_cmgr_alpha_cs__
typedef enum
{
  BAT_CMGR_ALPHA_CS_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMGR_ALPHA_CS_GSM_DEF      = 0x0,           /* 7 bit                          */
  BAT_CMGR_ALPHA_CS_GSM_INT      = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMGR_ALPHA_CS_HEX          = 0x2,           /* 8 bit transparent              */
  BAT_CMGR_ALPHA_CS_UCS2         = 0x3,           /* 16 bit unicode                 */
  BAT_CMGR_ALPHA_CS_SIM          = 0x4,           /* SIM card format                */
  BAT_CMGR_ALPHA_CS_ASCII        = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmgr_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmgr_w_alpha_cs
 * CCDGEN:WriteEnum_Count==290
 */
#ifndef __T_BAT_VAL_plus_cmgr_w_alpha_cs__
#define __T_BAT_VAL_plus_cmgr_w_alpha_cs__
typedef enum
{
  BAT_CMGR_W_ALPHA_CS_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_CMGR_W_ALPHA_CS_GSM_DEF    = 0x0,           /* 7 bit                          */
  BAT_CMGR_W_ALPHA_CS_GSM_INT    = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMGR_W_ALPHA_CS_HEX        = 0x2,           /* 8 bit transparent              */
  BAT_CMGR_W_ALPHA_CS_UCS2       = 0x3,           /* 16 bit unicode                 */
  BAT_CMGR_W_ALPHA_CS_SIM        = 0x4,           /* SIM card format                */
  BAT_CMGR_W_ALPHA_CS_ASCII      = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmgr_w_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmod_mode
 * CCDGEN:WriteEnum_Count==291
 */
#ifndef __T_BAT_VAL_plus_cmod_mode__
#define __T_BAT_VAL_plus_cmod_mode__
typedef enum
{
  BAT_CMOD_MODE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMOD_MODE_SINGLE           = 0x0,           /* Single mode                    */
  BAT_CMOD_MODE_ALT_VOICE_FAX    = 0x1,           /* Alternating voice/fax (teleservice 61) */
  BAT_CMOD_MODE_ALT_VOICE_DATA   = 0x2,           /* Alternating voice/data (bearer service 61) */
  BAT_CMOD_MODE_DATA_FOLLOWS_VOICE = 0x3          /* Voice followed by data (bearer service 81) */
}T_BAT_VAL_plus_cmod_mode;
#endif

/*
 * Enum to value table VAL_plus_cms_error_err
 * CCDGEN:WriteEnum_Count==292
 */
#ifndef __T_BAT_VAL_plus_cms_error_err__
#define __T_BAT_VAL_plus_cms_error_err__
typedef enum
{
  BAT_CMS_ERROR_UNALLOC_NUM      = 0x1,           /* Unassigned (unallocated) number */
  BAT_CMS_ERROR_OP_DETERM_BARR   = 0x8,           /* Operator determined barring    */
  BAT_CMS_ERROR_CALL_BARR        = 0xa,           /* Call barred                    */
  BAT_CMS_ERROR_TRANS_REJECT     = 0x15,          /* Short message transfer rejected */
  BAT_CMS_ERROR_DEST_OUT_OF_SERV = 0x1b,          /* Destination out of service     */
  BAT_CMS_ERROR_UNIDENT_SUBSC    = 0x1c,          /* Unidentified subscriber        */
  BAT_CMS_ERROR_FAC_REJECT       = 0x1d,          /* Facility rejected              */
  BAT_CMS_ERROR_UNKNOWN_SUBSC    = 0x1e,          /* Unknown subscriber             */
  BAT_CMS_ERROR_NET_OUT_OF_ORDER = 0x26,          /* Network out of order           */
  BAT_CMS_ERROR_TEMP_FAIL        = 0x29,          /* Temporary failure              */
  BAT_CMS_ERROR_CONGESTION       = 0x2a,          /* Congestion - the short message service cannot be serviced because of high traffic */
  BAT_CMS_ERROR_RES_UNAVAIL      = 0x2f,          /* Resources unavailable, unspecified */
  BAT_CMS_ERROR_FAC_NOT_SUBSCR   = 0x32,          /* Requested facility not subscribed */
  BAT_CMS_ERROR_FAC_NOT_IMPL     = 0x45,          /* Requested facility not implemented */
  BAT_CMS_ERROR_TRANS_REF_INVAL  = 0x51,          /* Invalid short message transfer reference value */
  BAT_CMS_ERROR_INVAL_SM         = 0x5f,          /* Invalid message, unspecified   */
  BAT_CMS_ERROR_INVAL_MAN_INFO   = 0x60,          /* Invalid mandatory information  */
  BAT_CMS_ERROR_MSG_TYP_NOT_EXIST = 0x61,         /* Message type non-existent or not implemented */
  BAT_CMS_ERROR_MSG_NOT_COMPATIBLE = 0x62,        /* Message not compatible with short message protocol state */
  BAT_CMS_ERROR_INFO_ELEM_NOT_IMPL = 0x63,        /* Information element non-existent or not implemented */
  BAT_CMS_ERROR_PROT_ERR         = 0x6f,          /* Protocol error, unspecified    */
  BAT_CMS_ERROR_INTERWRK_UNSPEC  = 0x7f,          /* Interworking, unspecified      */
  BAT_CMS_ERROR_TLMTK_NOT_SUP    = 0x80,          /* Telematic interworking not supported */
  BAT_CMS_ERROR_SM0_NOT_SUP      = 0x81,          /* Short message Type 0 not supported */
  BAT_CMS_ERROR_CANT_REPLACE_SM  = 0x82,          /* Cannot replace short message   */
  BAT_CMS_ERROR_UNSPEC_PID       = 0x8f,          /* Unspecified TP-PID error       */
  BAT_CMS_ERROR_DCS_NOT_SUP      = 0x90,          /* Data coding scheme (alphabet) not supported */
  BAT_CMS_ERROR_MSG_CLASS_NOT_SUP = 0x91,         /* Message class not supported    */
  BAT_CMS_ERROR_UNSPEC_TP_DCS    = 0x9f,          /* Unspecified TP-DCS error       */
  BAT_CMS_ERROR_CMD_NOT_ACT      = 0xa0,          /* Command cannot be actioned     */
  BAT_CMS_ERROR_CMD_UN_SUP       = 0xa1,          /* Command unsupported            */
  BAT_CMS_ERROR_UNSPEC_TP_CMD    = 0xaf,          /* Unspecified TP-Command error   */
  BAT_CMS_ERROR_TPDU_UNSUP       = 0xb0,          /* TPDU not supported             */
  BAT_CMS_ERROR_SC_BUSY          = 0xc0,          /* SC busy                        */
  BAT_CMS_ERROR_NO_SC_SUBSC      = 0xc1,          /* No SC subscription             */
  BAT_CMS_ERROR_SC_SYS_FAIL      = 0xc2,          /* SC system failure              */
  BAT_CMS_ERROR_INVAL_SME        = 0xc3,          /* Invalid SME address            */
  BAT_CMS_ERROR_DEST_SME_BARR    = 0xc4,          /* Destination SME barred         */
  BAT_CMS_ERROR_SM_REJ_DUPL_SM   = 0xc5,          /* SM Rejected-Duplicate SM       */
  BAT_CMS_ERROR_SIM_SMS_STOR_FULL = 0xd0,         /* SIM SMS storage full           */
  BAT_CMS_ERROR_NO_STOR_IN_SIM   = 0xd1,          /* No SMS storage capability in SIM */
  BAT_CMS_ERROR_IN_MS            = 0xd2,          /* Error in MS                    */
  BAT_CMS_ERROR_MEM_CAP_EXCEED   = 0xd3,          /* Memory Capacity Exceeded       */
  BAT_CMS_ERROR_SATK_BUSY        = 0xd4,          /* SIM Application Toolkit Busy   */
  BAT_CMS_ERROR_UNSPECIFIED      = 0xff,          /* Unspecified error cause        */
  BAT_CMS_ERROR_ME_FAIL          = 0x12c,         /* ME failure                     */
  BAT_CMS_ERROR_SERV_RES         = 0x12d,         /* SMS service of ME reserved     */
  BAT_CMS_ERROR_OP_NOT_ALLOWED   = 0x12e,         /* Operation not allowed          */
  BAT_CMS_ERROR_OP_NOT_SUP       = 0x12f,         /* Operation not supported        */
  BAT_CMS_ERROR_INVAL_PDU_MOD    = 0x130,         /* Invalid PDU mode parameter     */
  BAT_CMS_ERROR_INVAL_TXT_MOD    = 0x131,         /* Invalid text mode parameter    */
  BAT_CMS_ERROR_SIM_NOT_INS      = 0x136,         /* SIM not inserted               */
  BAT_CMS_ERROR_SIM_PIN_REQ      = 0x137,         /* SIM PIN necessary              */
  BAT_CMS_ERROR_PH_SIM_PIN_REQ   = 0x138,         /* PH-SIM PIN necessary           */
  BAT_CMS_ERROR_SIM_FAIL         = 0x139,         /* SIM failure                    */
  BAT_CMS_ERROR_SIM_BUSY         = 0x13a,         /* SIM busy                       */
  BAT_CMS_ERROR_SIM_WRONG        = 0x13b,         /* SIM wrong                      */
  BAT_CMS_ERROR_SIM_PUK_REQ      = 0x13c,         /* SIM PUK necessary              */
  BAT_CMS_ERROR_SIM_PIN2_REQ     = 0x13d,         /* SIM PIN2 necessary             */
  BAT_CMS_ERROR_SIM_PUK2_REQ     = 0x13e,         /* SIM PUK2 necessary             */
  BAT_CMS_ERROR_MEM_FAIL         = 0x140,         /* Memory failure                 */
  BAT_CMS_ERROR_INVAL_MEM_IDX    = 0x141,         /* Invalid memory index           */
  BAT_CMS_ERROR_MEM_FULL         = 0x142,         /* Memory full                    */
  BAT_CMS_ERROR_SMSC_ADDR_UNKNOWN = 0x14a,        /* SMSC address unknown           */
  BAT_CMS_ERROR_NO_NET_SERV      = 0x14b,         /* No network service             */
  BAT_CMS_ERROR_NET_TIMEOUT      = 0x14c,         /* Network timeout                */
  BAT_CMS_ERROR_NO_CNMA_ACK_EXPECT = 0x154,       /* No CNMA ack expected           */
  BAT_CMS_ERROR_UNKNOWN          = 0x1f4,         /* Unknown error                  */
  BAT_CMS_ERROR_FAILED_TO_ABORT  = 0x200,         /* Failed to abort                */
  BAT_CMS_ERROR_ACM_RESET_NEEDED = 0x201          /* ACM reset needed               */
}T_BAT_VAL_plus_cms_error_err;
#endif

/*
 * Enum to value table VAL_plus_cmt_alpha_cs
 * CCDGEN:WriteEnum_Count==293
 */
#ifndef __T_BAT_VAL_plus_cmt_alpha_cs__
#define __T_BAT_VAL_plus_cmt_alpha_cs__
typedef enum
{
  BAT_CMT_ALPHA_CS_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMT_ALPHA_CS_GSM_DEF       = 0x0,           /* 7 bit                          */
  BAT_CMT_ALPHA_CS_GSM_INT       = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMT_ALPHA_CS_HEX           = 0x2,           /* 8 bit transparent              */
  BAT_CMT_ALPHA_CS_UCS2          = 0x3,           /* 16 bit unicode                 */
  BAT_CMT_ALPHA_CS_SIM           = 0x4,           /* SIM card format                */
  BAT_CMT_ALPHA_CS_ASCII         = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmt_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmt_w_alpha_cs
 * CCDGEN:WriteEnum_Count==294
 */
#ifndef __T_BAT_VAL_plus_cmt_w_alpha_cs__
#define __T_BAT_VAL_plus_cmt_w_alpha_cs__
typedef enum
{
  BAT_CMT_W_ALPHA_CS_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMT_W_ALPHA_CS_GSM_DEF     = 0x0,           /* 7 bit                          */
  BAT_CMT_W_ALPHA_CS_GSM_INT     = 0x1,           /* 7 bit (bit 8 set)              */
  BAT_CMT_W_ALPHA_CS_HEX         = 0x2,           /* 8 bit transparent              */
  BAT_CMT_W_ALPHA_CS_UCS2        = 0x3,           /* 16 bit unicode                 */
  BAT_CMT_W_ALPHA_CS_SIM         = 0x4,           /* SIM card format                */
  BAT_CMT_W_ALPHA_CS_ASCII       = 0x5            /* ASCII                          */
}T_BAT_VAL_plus_cmt_w_alpha_cs;
#endif

/*
 * Enum to value table VAL_plus_cmut_n
 * CCDGEN:WriteEnum_Count==295
 */
#ifndef __T_BAT_VAL_plus_cmut_n__
#define __T_BAT_VAL_plus_cmut_n__
typedef enum
{
  BAT_CMUT_N_OFF                 = 0x0,           /* mute off                       */
  BAT_CMUT_N_ON                  = 0x1            /* mute on                        */
}T_BAT_VAL_plus_cmut_n;
#endif

/*
 * Enum to value table VAL_plus_cmux_mode
 * CCDGEN:WriteEnum_Count==296
 */
#ifndef __T_BAT_VAL_plus_cmux_mode__
#define __T_BAT_VAL_plus_cmux_mode__
typedef enum
{
  BAT_CMUX_MODE_BASIC            = 0x0,           /* Basic operation                */
  BAT_CMUX_MODE_ADVANCED         = 0x1            /* Advanced operation             */
}T_BAT_VAL_plus_cmux_mode;
#endif

/*
 * Enum to value table VAL_plus_cmux_port_speed
 * CCDGEN:WriteEnum_Count==297
 */
#ifndef __T_BAT_VAL_plus_cmux_port_speed__
#define __T_BAT_VAL_plus_cmux_port_speed__
typedef enum
{
  BAT_CMUX_SPEED_9600            = 0x1,           /* 9600bps                        */
  BAT_CMUX_SPEED_19200           = 0x2,           /* 19200bps                       */
  BAT_CMUX_SPEED_38400           = 0x3,           /* 38400bps                       */
  BAT_CMUX_SPEED_57600           = 0x4,           /* 57600bps                       */
  BAT_CMUX_SPEED_115200          = 0x5,           /* 115200bps                      */
  BAT_CMUX_SPEED_230400          = 0x6            /* 230400bps                      */
}T_BAT_VAL_plus_cmux_port_speed;
#endif

/*
 * Enum to value table VAL_plus_cmux_subset
 * CCDGEN:WriteEnum_Count==298
 */
#ifndef __T_BAT_VAL_plus_cmux_subset__
#define __T_BAT_VAL_plus_cmux_subset__
typedef enum
{
  BAT_CMUX_SUBSET_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CMUX_SUBSET_UIH            = 0x0,           /* UIH frames used only           */
  BAT_CMUX_SUBSET_UI             = 0x1,           /* UI frames used only            */
  BAT_CMUX_SUBSET_I              = 0x2            /* I frames used only             */
}T_BAT_VAL_plus_cmux_subset;
#endif

/*
 * Enum to value table VAL_percent_cnap_pres_mode
 * CCDGEN:WriteEnum_Count==299
 */
#ifndef __T_BAT_VAL_percent_cnap_pres_mode__
#define __T_BAT_VAL_percent_cnap_pres_mode__
typedef enum
{
  BAT_P_CNAP_PRES_NAME           = 0x0,           /* Name presentation allowed      */
  BAT_P_CNAP_PRES_RESTRICTED     = 0x1,           /* Presentation restricted        */
  BAT_P_CNAP_PRES_NO_NAME        = 0x2,           /* Name unavailable               */
  BAT_P_CNAP_PRES_NAME_RESTRICTED = 0x3           /* Name presentation restricted   */
}T_BAT_VAL_percent_cnap_pres_mode;
#endif

/*
 * Enum to value table VAL_percent_cnap_status
 * CCDGEN:WriteEnum_Count==300
 */
#ifndef __T_BAT_VAL_percent_cnap_status__
#define __T_BAT_VAL_percent_cnap_status__
typedef enum
{
  BAT_P_CNAP_STATUS_OFF          = 0x0,           /* Service is not provisioned     */
  BAT_P_CNAP_STATUS_ON           = 0x1,           /* Service is provisioned         */
  BAT_P_CNAP_STATUS_UNKNOWN      = 0x2            /* Service status is unknown (no information available from network) */
}T_BAT_VAL_percent_cnap_status;
#endif

/*
 * Enum to value table VAL_plus_cnma_n
 * CCDGEN:WriteEnum_Count==301
 */
#ifndef __T_BAT_VAL_plus_cnma_n__
#define __T_BAT_VAL_plus_cnma_n__
typedef enum
{
  BAT_CNMA_N_RP_ACK              = 0x1,           /* send RP-ACK (or buffered result code received correctly) */
  BAT_CNMA_N_RP_ERROR            = 0x2            /* send RP-ERROR (if PDU is not given, ME/TA shall send SMS-DELIVER-REPORT with GSM 03.40 TP-FCS value set to 'FF' (unspecified error cause)) */
}T_BAT_VAL_plus_cnma_n;
#endif

/*
 * Enum to value table VAL_plus_cnmi_bm
 * CCDGEN:WriteEnum_Count==302
 */
#ifndef __T_BAT_VAL_plus_cnmi_bm__
#define __T_BAT_VAL_plus_cnmi_bm__
typedef enum
{
  BAT_CNMI_BM_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_CNMI_BM_NO_INDICATION      = 0x0,           /* Store message to BM, do not generate CBM indication */
  BAT_CNMI_BM_INDICATION         = 0x1,           /* Store message to BM, generate CBM indication */
  BAT_CNMI_BM_FORWARD            = 0x2,           /* Forward message to TE          */
  BAT_CNMI_BM_FORWARD_CLASS_3    = 0x3            /* Forward message to TE (except class 0,1,2) */
}T_BAT_VAL_plus_cnmi_bm;
#endif

/*
 * Enum to value table VAL_plus_cnmi_ds
 * CCDGEN:WriteEnum_Count==303
 */
#ifndef __T_BAT_VAL_plus_cnmi_ds__
#define __T_BAT_VAL_plus_cnmi_ds__
typedef enum
{
  BAT_CNMI_DS_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_CNMI_DS_DONT_FORWARD       = 0x0,           /* Do not forward SMS-STATUS-REPORT to TE */
  BAT_CNMI_DS_FORWARD            = 0x1            /* Forward SMS-STATUS-REPORT to TE */
}T_BAT_VAL_plus_cnmi_ds;
#endif

/*
 * Enum to value table VAL_plus_cnmi_mt
 * CCDGEN:WriteEnum_Count==304
 */
#ifndef __T_BAT_VAL_plus_cnmi_mt__
#define __T_BAT_VAL_plus_cnmi_mt__
typedef enum
{
  BAT_CNMI_MT_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_CNMI_MT_NO_INDICATION      = 0x0,           /* Store message according to its class, do not generate SMS-DELIVER indication */
  BAT_CNMI_MT_INDICATION         = 0x1,           /* Store message according to its class, generate SMS-DELIVER indication */
  BAT_CNMI_MT_FORWARD            = 0x2,           /* Forward message to TE (except class 2) */
  BAT_CNMI_MT_FORWARD_CLASS_3    = 0x3            /* Forward message to TE (except class 0,1,2) */
}T_BAT_VAL_plus_cnmi_mt;
#endif

/*
 * Enum to value table VAL_plus_colp_m
 * CCDGEN:WriteEnum_Count==305
 */
#ifndef __T_BAT_VAL_plus_colp_m__
#define __T_BAT_VAL_plus_colp_m__
typedef enum
{
  BAT_COLP_M_NOT_PROVISIONED     = 0x0,           /* COLP not provisioned           */
  BAT_COLP_M_PROVISIONED         = 0x1,           /* COLP provisioned               */
  BAT_COLP_M_UNKNOWN             = 0x2            /* unknown                        */
}T_BAT_VAL_plus_colp_m;
#endif

/*
 * Enum to value table VAL_plus_colp_w_m
 * CCDGEN:WriteEnum_Count==306
 */
#ifndef __T_BAT_VAL_plus_colp_w_m__
#define __T_BAT_VAL_plus_colp_w_m__
typedef enum
{
  BAT_COLP_W_M_NOT_PROVISIONED   = 0x0,           /* COLP not provisioned           */
  BAT_COLP_W_M_PROVISIONED       = 0x1,           /* COLP provisioned               */
  BAT_COLP_W_M_UNKNOWN           = 0x2            /* unknown                        */
}T_BAT_VAL_plus_colp_w_m;
#endif

/*
 * Enum to value table VAL_at_connect_data_rate
 * CCDGEN:WriteEnum_Count==307
 */
#ifndef __T_BAT_VAL_at_connect_data_rate__
#define __T_BAT_VAL_at_connect_data_rate__
typedef enum
{
  BAT_AT_CONNECT_RATE_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_AT_CONNECT_RATE_300        = 0x1,           /* 300bps                         */
  BAT_AT_CONNECT_RATE_1200       = 0x2,           /* 1200bps                        */
  BAT_AT_CONNECT_RATE_2400       = 0x3,           /* 2400bps                        */
  BAT_AT_CONNECT_RATE_4800       = 0x4,           /* 4800bps                        */
  BAT_AT_CONNECT_RATE_9600       = 0x5,           /* 9600bps                        */
  BAT_AT_CONNECT_RATE_14400      = 0x6,           /* 14400bps                       */
  BAT_AT_CONNECT_RATE_19200      = 0x7,           /* 19200bps                       */
  BAT_AT_CONNECT_RATE_38400      = 0x8            /* 38400bps                       */
}T_BAT_VAL_at_connect_data_rate;
#endif

/*
 * Enum to value table VAL_percent_cops_format
 * CCDGEN:WriteEnum_Count==308
 */
#ifndef __T_BAT_VAL_percent_cops_format__
#define __T_BAT_VAL_percent_cops_format__
typedef enum
{
  BAT_P_COPS_FORMAT_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_COPS_FORMAT_LONG         = 0x0,           /* Long format alphanumeric       */
  BAT_P_COPS_FORMAT_SHORT        = 0x1,           /* Short format alphanumeric      */
  BAT_P_COPS_FORMAT_NUMERIC      = 0x2            /* Numeric                        */
}T_BAT_VAL_percent_cops_format;
#endif

/*
 * Enum to value table VAL_percent_cops_mode
 * CCDGEN:WriteEnum_Count==309
 */
#ifndef __T_BAT_VAL_percent_cops_mode__
#define __T_BAT_VAL_percent_cops_mode__
typedef enum
{
  BAT_P_COPS_MODE_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_COPS_MODE_AUTO           = 0x0,           /* Automatic                      */
  BAT_P_COPS_MODE_MANUAL         = 0x1,           /* Manual                         */
  BAT_P_COPS_MODE_DEREGISTER     = 0x2,           /* Deregister from network        */
  BAT_P_COPS_MODE_SET_ONLY       = 0x3,           /* Set operator format only       */
  BAT_P_COPS_MODE_BOTH           = 0x4            /* Manual/automatic. If manual selection fails, automatic mode is entered */
}T_BAT_VAL_percent_cops_mode;
#endif

/*
 * Enum to value table VAL_percent_cops_service
 * CCDGEN:WriteEnum_Count==310
 */
#ifndef __T_BAT_VAL_percent_cops_service__
#define __T_BAT_VAL_percent_cops_service__
typedef enum
{
  BAT_P_COPS_SERVICE_NOT_PRESENT = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_COPS_SERVICE_FULL        = 0x0,           /* Full service                   */
  BAT_P_COPS_SERVICE_LIMITED     = 0x1,           /* Limited service                */
  BAT_P_COPS_SERVICE_NONE        = 0x2            /* No service                     */
}T_BAT_VAL_percent_cops_service;
#endif

/*
 * Enum to value table VAL_percent_cops_status
 * CCDGEN:WriteEnum_Count==311
 */
#ifndef __T_BAT_VAL_percent_cops_status__
#define __T_BAT_VAL_percent_cops_status__
typedef enum
{
  BAT_P_COPS_STATUS_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_COPS_STATUS_UNKNOWN      = 0x0,           /* Unknown                        */
  BAT_P_COPS_STATUS_AVAILABLE    = 0x1,           /* Available                      */
  BAT_P_COPS_STATUS_CURRENT      = 0x2,           /* This is the currently selected operator */
  BAT_P_COPS_STATUS_FORBIDDEN    = 0x3            /* This operator is in the forbidden list */
}T_BAT_VAL_percent_cops_status;
#endif

/*
 * Enum to value table VAL_plus_cops_format
 * CCDGEN:WriteEnum_Count==312
 */
#ifndef __T_BAT_VAL_plus_cops_format__
#define __T_BAT_VAL_plus_cops_format__
typedef enum
{
  BAT_COPS_FORMAT_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_COPS_FORMAT_LONG           = 0x0,           /* Long format alphanumeric       */
  BAT_COPS_FORMAT_SHORT          = 0x1,           /* Short format alphanumeric      */
  BAT_COPS_FORMAT_NUMERIC        = 0x2            /* Numeric                        */
}T_BAT_VAL_plus_cops_format;
#endif

/*
 * Enum to value table VAL_plus_cops_mode
 * CCDGEN:WriteEnum_Count==313
 */
#ifndef __T_BAT_VAL_plus_cops_mode__
#define __T_BAT_VAL_plus_cops_mode__
typedef enum
{
  BAT_COPS_MODE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_COPS_MODE_AUTO             = 0x0,           /* Automatic                      */
  BAT_COPS_MODE_MANUAL           = 0x1,           /* Manual                         */
  BAT_COPS_MODE_DEREGISTER       = 0x2,           /* Deregister from network        */
  BAT_COPS_MODE_SET_ONLY         = 0x3,           /* Set operator format only       */
  BAT_COPS_MODE_BOTH             = 0x4            /* Manual/automatic. If manual selection fails, automatic mode is entered */
}T_BAT_VAL_plus_cops_mode;
#endif

/*
 * Enum to value table VAL_plus_cops_status
 * CCDGEN:WriteEnum_Count==314
 */
#ifndef __T_BAT_VAL_plus_cops_status__
#define __T_BAT_VAL_plus_cops_status__
typedef enum
{
  BAT_COPS_STATUS_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_COPS_STATUS_UNKNOWN        = 0x0,           /* Unknown                        */
  BAT_COPS_STATUS_AVAILABLE      = 0x1,           /* Available                      */
  BAT_COPS_STATUS_CURRENT        = 0x2,           /* This is the currently selected operator */
  BAT_COPS_STATUS_FORBIDDEN      = 0x3            /* This operator is in the forbidden list */
}T_BAT_VAL_plus_cops_status;
#endif

/*
 * Enum to value table VAL_percent_cops_w_format
 * CCDGEN:WriteEnum_Count==315
 */
#ifndef __T_BAT_VAL_percent_cops_w_format__
#define __T_BAT_VAL_percent_cops_w_format__
typedef enum
{
  BAT_P_COPS_W_FORMAT_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_COPS_W_FORMAT_LONG       = 0x0,           /* Long format alphanumeric       */
  BAT_P_COPS_W_FORMAT_SHORT      = 0x1,           /* Short format alphanumeric      */
  BAT_P_COPS_W_FORMAT_NUMERIC    = 0x2            /* Numeric                        */
}T_BAT_VAL_percent_cops_w_format;
#endif

/*
 * Enum to value table VAL_percent_cops_w_mode
 * CCDGEN:WriteEnum_Count==316
 */
#ifndef __T_BAT_VAL_percent_cops_w_mode__
#define __T_BAT_VAL_percent_cops_w_mode__
typedef enum
{
  BAT_P_COPS_W_MODE_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_COPS_W_MODE_AUTO         = 0x0,           /* Automatic                      */
  BAT_P_COPS_W_MODE_MANUAL       = 0x1,           /* Manual                         */
  BAT_P_COPS_W_MODE_DEREGISTER   = 0x2,           /* Deregister from network        */
  BAT_P_COPS_W_MODE_SET_ONLY     = 0x3,           /* Set operator format only       */
  BAT_P_COPS_W_MODE_BOTH         = 0x4            /* Manual/automatic. If manual selection fails, automatic mode is entered */
}T_BAT_VAL_percent_cops_w_mode;
#endif

/*
 * Enum to value table VAL_percent_cops_w_service
 * CCDGEN:WriteEnum_Count==317
 */
#ifndef __T_BAT_VAL_percent_cops_w_service__
#define __T_BAT_VAL_percent_cops_w_service__
typedef enum
{
  BAT_P_COPS_W_SERVICE_NOT_PRESENT = -0x1,        /* This indicates that the value is omitted. */
  BAT_P_COPS_W_SERVICE_FULL      = 0x0,           /* Full service                   */
  BAT_P_COPS_W_SERVICE_LIMITED   = 0x1,           /* Limited service                */
  BAT_P_COPS_W_SERVICE_NONE      = 0x2            /* No service                     */
}T_BAT_VAL_percent_cops_w_service;
#endif

/*
 * Enum to value table VAL_percent_cops_w_status
 * CCDGEN:WriteEnum_Count==318
 */
#ifndef __T_BAT_VAL_percent_cops_w_status__
#define __T_BAT_VAL_percent_cops_w_status__
typedef enum
{
  BAT_P_COPS_W_STATUS_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_COPS_W_STATUS_UNKNOWN    = 0x0,           /* Unknown                        */
  BAT_P_COPS_W_STATUS_AVAILABLE  = 0x1,           /* Available                      */
  BAT_P_COPS_W_STATUS_CURRENT    = 0x2,           /* This is the currently selected operator */
  BAT_P_COPS_W_STATUS_FORBIDDEN  = 0x3            /* This operator is in the forbidden list */
}T_BAT_VAL_percent_cops_w_status;
#endif

/*
 * Enum to value table VAL_percent_cpals_lines
 * CCDGEN:WriteEnum_Count==319
 */
#ifndef __T_BAT_VAL_percent_cpals_lines__
#define __T_BAT_VAL_percent_cpals_lines__
typedef enum
{
  BAT_P_CPALS_LINES_LINE1        = 0x1,           /* Line 1                         */
  BAT_P_CPALS_LINES_DATA         = 0x2,           /* Data                           */
  BAT_P_CPALS_LINES_FAX          = 0x4,           /* Fax                            */
  BAT_P_CPALS_LINES_LINE2        = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpals_lines;
#endif

/*
 * Enum to value table VAL_percent_cpals_w_lines
 * CCDGEN:WriteEnum_Count==320
 */
#ifndef __T_BAT_VAL_percent_cpals_w_lines__
#define __T_BAT_VAL_percent_cpals_w_lines__
typedef enum
{
  BAT_P_CPALS_W_LINES_LINE1      = 0x1,           /* Line 1                         */
  BAT_P_CPALS_W_LINES_DATA       = 0x2,           /* Data                           */
  BAT_P_CPALS_W_LINES_FAX        = 0x4,           /* Fax                            */
  BAT_P_CPALS_W_LINES_LINE2      = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpals_w_lines;
#endif

/*
 * Enum to value table VAL_plus_cpas_pas
 * CCDGEN:WriteEnum_Count==321
 */
#ifndef __T_BAT_VAL_plus_cpas_pas__
#define __T_BAT_VAL_plus_cpas_pas__
typedef enum
{
  BAT_CPAS_PAS_READY             = 0x0,           /* ready (ME allows commands from TA/TE) */
  BAT_CPAS_PAS_UNAVAILABLE       = 0x1,           /* unavailable (ME does not allow commands from TA/TE) */
  BAT_CPAS_PAS_UNKNOWN           = 0x2,           /* unknown (ME is not guaranteed to respond to instructions) */
  BAT_CPAS_PAS_RINGING           = 0x3,           /* ringing (ME is ready for commands from TA/TE, but the ringer is active) */
  BAT_CPAS_PAS_CALLINPROGRESS    = 0x4,           /* call in progress (ME is ready for commands from TA/TE, but a call is in progress) */
  BAT_CPAS_PAS_ASLEEP            = 0x5            /* asleep (ME is unable to process commands from TA/TE because it is in a low functionality state) */
}T_BAT_VAL_plus_cpas_pas;
#endif

/*
 * Enum to value table VAL_percent_cpcfu_line
 * CCDGEN:WriteEnum_Count==322
 */
#ifndef __T_BAT_VAL_percent_cpcfu_line__
#define __T_BAT_VAL_percent_cpcfu_line__
typedef enum
{
  BAT_P_CPCFU_LINE_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CPCFU_LINE_LINE1         = 0x1,           /* Line 1                         */
  BAT_P_CPCFU_LINE_DATA          = 0x2,           /* Data                           */
  BAT_P_CPCFU_LINE_FAX           = 0x4,           /* Fax                            */
  BAT_P_CPCFU_LINE_LINE2         = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpcfu_line;
#endif

/*
 * Enum to value table VAL_percent_cpcfu_mode
 * CCDGEN:WriteEnum_Count==323
 */
#ifndef __T_BAT_VAL_percent_cpcfu_mode__
#define __T_BAT_VAL_percent_cpcfu_mode__
typedef enum
{
  BAT_P_CPCFU_MODE_CLEAR         = 0x0,           /* Clear Call Diverted flag       */
  BAT_P_CPCFU_MODE_SET           = 0x1,           /* Set Call Diverted flag         */
  BAT_P_CPCFU_MODE_QUERY         = 0x2            /* Query Call Diverted flag status */
}T_BAT_VAL_percent_cpcfu_mode;
#endif

/*
 * Enum to value table VAL_percent_cpcfu_status
 * CCDGEN:WriteEnum_Count==324
 */
#ifndef __T_BAT_VAL_percent_cpcfu_status__
#define __T_BAT_VAL_percent_cpcfu_status__
typedef enum
{
  BAT_P_CPCFU_STATUS_ACTIVATED   = 0x0,           /* Activated                      */
  BAT_P_CPCFU_STATUS_DEACTIVATE  = 0x1            /* Deactivated                    */
}T_BAT_VAL_percent_cpcfu_status;
#endif

/*
 * Enum to value table VAL_percent_cphs_init_mode
 * CCDGEN:WriteEnum_Count==325
 */
#ifndef __T_BAT_VAL_percent_cphs_init_mode__
#define __T_BAT_VAL_percent_cphs_init_mode__
typedef enum
{
  BAT_P_CPHS_MODE_CLOSE          = 0x0,           /* Close CPHS functionalities     */
  BAT_P_CPHS_MODE_INIT           = 0x1,           /* Initialise CPHS functionalities */
  BAT_P_CPHS_MODE_REFRESH        = 0x2,           /* Refresh CPHS data cached from SIM */
  BAT_P_CPHS_MODE_BUSY           = 0x3            /* (for query only) CPHS busy     */
}T_BAT_VAL_percent_cphs_init_mode;
#endif

/*
 * Enum to value table VAL_percent_cpi_ibt
 * CCDGEN:WriteEnum_Count==326
 */
#ifndef __T_BAT_VAL_percent_cpi_ibt__
#define __T_BAT_VAL_percent_cpi_ibt__
typedef enum
{
  BAT_P_CPI_IBT_FALSE            = 0x0,           /* No in-band tones               */
  BAT_P_CPI_IBT_TRUE             = 0x1            /* In-band tones                  */
}T_BAT_VAL_percent_cpi_ibt;
#endif

/*
 * Enum to value table VAL_percent_cpi_msgtype
 * CCDGEN:WriteEnum_Count==327
 */
#ifndef __T_BAT_VAL_percent_cpi_msgtype__
#define __T_BAT_VAL_percent_cpi_msgtype__
typedef enum
{
  BAT_P_CPI_TYPE_SETUP           = 0x0,           /* SETUP message                  */
  BAT_P_CPI_TYPE_DISC            = 0x1,           /* DISCONNECT message             */
  BAT_P_CPI_TYPE_ALERTING        = 0x2,           /* ALERTING message               */
  BAT_P_CPI_TYPE_PROC            = 0x3,           /* CALL PROCEEDING message        */
  BAT_P_CPI_TYPE_SYNC            = 0x4,           /* synchronisation message        */
  BAT_P_CPI_TYPE_PROGRESS        = 0x5,           /* PROGRESS message               */
  BAT_P_CPI_TYPE_CONNECT         = 0x6,           /* CONNECT message                */
  BAT_P_CPI_TYPE_RELEASE         = 0x7,           /* RELEASE message                */
  BAT_P_CPI_TYPE_REJECT          = 0x8,           /* reject message                 */
  BAT_P_CPI_TYPE_MO_Setup        = 0x9,           /* MO Setup message               */
  BAT_P_CPI_TYPE_HELD            = 0xa            /* Held message                   */
}T_BAT_VAL_percent_cpi_msgtype;
#endif

/*
 * Enum to value table VAL_percent_cpi_prog_desc
 * CCDGEN:WriteEnum_Count==328
 */
#ifndef __T_BAT_VAL_percent_cpi_prog_desc__
#define __T_BAT_VAL_percent_cpi_prog_desc__
typedef enum
{
  BAT_P_CPI_PROG_DESC_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_CPI_PROG_DESC_PROG_NO_END_TO_END_PLMN = 0x1, /* call is not end-to-end PLMN/ISDN, further call progress information may be available in-band */
  BAT_P_CPI_PROG_DESC_PROG_DEST_NON_PLMN = 0x2,   /* destination address in non-PLMN/ISDN */
  BAT_P_CPI_PROG_DESC_PROG_ORIGIN_NON_PLMN = 0x3, /* origination address in non-PLMN/ISDN */
  BAT_P_CPI_PROG_DESC_PROG_RETURN_TO_PLMN = 0x4,  /* call has returned to the PLMN/ISDN */
  BAT_P_CPI_PROG_DESC_PROG_INBAND_AVAIL = 0x8,    /* in-band information or appropriate pattern now available */
  BAT_P_CPI_PROG_DESC_PROG_END_TO_END_PLMN = 0x20, /* call is end-to-end PLMN/ISDN   */
  BAT_P_CPI_PROG_DESC_PROG_QUEUEING = 0x40,       /* queueing                       */
  BAT_P_CPI_PROG_DESC_PROG_UNSPECIFIC = 0xfe,     /* unspecific, used when coding standard is not equal to GSM; note that the value chosen here must not collide with any defined value of  the progress description IE of the air interface */
  BAT_P_CPI_PROG_DESC_PROG_NOT_PRES = 0xff        /* not present                    */
}T_BAT_VAL_percent_cpi_prog_desc;
#endif

/*
 * Enum to value table VAL_percent_cpi_tch
 * CCDGEN:WriteEnum_Count==329
 */
#ifndef __T_BAT_VAL_percent_cpi_tch__
#define __T_BAT_VAL_percent_cpi_tch__
typedef enum
{
  BAT_P_CPI_TCH_FALSE            = 0x0,           /* TCH not assigned               */
  BAT_P_CPI_TCH_TRUE             = 0x1            /* TCH assigned                   */
}T_BAT_VAL_percent_cpi_tch;
#endif

/*
 * Enum to value table VAL_plus_cpin_code
 * CCDGEN:WriteEnum_Count==330
 */
#ifndef __T_BAT_VAL_plus_cpin_code__
#define __T_BAT_VAL_plus_cpin_code__
typedef enum
{
  BAT_CPIN_CODE_READY            = 0x0,           /* Not waiting for a password     */
  BAT_CPIN_CODE_SIM_PIN          = 0x1,           /* Waiting for PIN to be given    */
  BAT_CPIN_CODE_SIM_PUK          = 0x2,           /* Waiting for PUK to be given    */
  BAT_CPIN_CODE_PH_SIM_PIN       = 0x3,           /* Waiting for phone-to-SIM card password to be given */
  BAT_CPIN_CODE_SIM_PIN2         = 0x4,           /* Waiting for PIN2 to be given   */
  BAT_CPIN_CODE_SIM_PUK2         = 0x5            /* Waiting for PUK2 to be given   */
}T_BAT_VAL_plus_cpin_code;
#endif

/*
 * Enum to value table VAL_percent_cpinf_phase
 * CCDGEN:WriteEnum_Count==331
 */
#ifndef __T_BAT_VAL_percent_cpinf_phase__
#define __T_BAT_VAL_percent_cpinf_phase__
typedef enum
{
  BAT_P_CPINF_PHASE_1            = 0x1,           /* Phase 1                        */
  BAT_P_CPINF_PHASE_2            = 0x2            /* Phase 2 etc. Values other than mentioned in this enum will be delivered in U8 format */
}T_BAT_VAL_percent_cpinf_phase;
#endif

/*
 * Enum to value table VAL_percent_cpi_w_ibt
 * CCDGEN:WriteEnum_Count==332
 */
#ifndef __T_BAT_VAL_percent_cpi_w_ibt__
#define __T_BAT_VAL_percent_cpi_w_ibt__
typedef enum
{
  BAT_P_CPI_W_IBT_FALSE          = 0x0,           /* No in-band tones               */
  BAT_P_CPI_W_IBT_TRUE           = 0x1            /* In-band tones                  */
}T_BAT_VAL_percent_cpi_w_ibt;
#endif

/*
 * Enum to value table VAL_percent_cpi_w_msgtype
 * CCDGEN:WriteEnum_Count==333
 */
#ifndef __T_BAT_VAL_percent_cpi_w_msgtype__
#define __T_BAT_VAL_percent_cpi_w_msgtype__
typedef enum
{
  BAT_P_CPI_W_TYPE_SETUP         = 0x0,           /* SETUP message                  */
  BAT_P_CPI_W_TYPE_DISC          = 0x1,           /* DISCONNECT message             */
  BAT_P_CPI_W_TYPE_ALERTING      = 0x2,           /* ALERTING message               */
  BAT_P_CPI_W_TYPE_PROC          = 0x3,           /* CALL PROCEEDING message        */
  BAT_P_CPI_W_TYPE_SYNC          = 0x4,           /* synchronisation message        */
  BAT_P_CPI_W_TYPE_PROGRESS      = 0x5,           /* PROGRESS message               */
  BAT_P_CPI_W_TYPE_CONNECT       = 0x6,           /* CONNECT message                */
  BAT_P_CPI_W_TYPE_RELEASE       = 0x7,           /* RELEASE message                */
  BAT_P_CPI_W_TYPE_REJECT        = 0x8,           /* reject message                 */
  BAT_P_CPI_W_TYPE_MO_Setup      = 0x9,           /* MO Setup message               */
  BAT_P_CPI_W_TYPE_HELD          = 0xa            /* Held message                   */
}T_BAT_VAL_percent_cpi_w_msgtype;
#endif

/*
 * Enum to value table VAL_percent_cpi_w_prog_desc
 * CCDGEN:WriteEnum_Count==334
 */
#ifndef __T_BAT_VAL_percent_cpi_w_prog_desc__
#define __T_BAT_VAL_percent_cpi_w_prog_desc__
typedef enum
{
  BAT_P_CPI_W_PROG_DESC_NOT_PRESENT = -0x1,       /* This indicates that the value is omitted. */
  BAT_P_CPI_W_PROG_DESC_PROG_NO_END_TO_END_PLMN = 0x1, /* call is not end-to-end PLMN/ISDN, further call progress information may be available in-band */
  BAT_P_CPI_W_PROG_DESC_PROG_DEST_NON_PLMN = 0x2, /* destination address in non-PLMN/ISDN */
  BAT_P_CPI_W_PROG_DESC_PROG_ORIGIN_NON_PLMN = 0x3, /* origination address in non-PLMN/ISDN */
  BAT_P_CPI_W_PROG_DESC_PROG_RETURN_TO_PLMN = 0x4, /* call has returned to the PLMN/ISDN */
  BAT_P_CPI_W_PROG_DESC_PROG_INBAND_AVAIL = 0x8,  /* in-band information or appropriate pattern now available */
  BAT_P_CPI_W_PROG_DESC_PROG_END_TO_END_PLMN = 0x20, /* call is end-to-end PLMN/ISDN   */
  BAT_P_CPI_W_PROG_DESC_PROG_QUEUEING = 0x40,     /* queueing                       */
  BAT_P_CPI_W_PROG_DESC_PROG_UNSPECIFIC = 0xfe,   /* unspecific, used when coding standard is not equal to GSM; note that the value chosen here must not collide with any defined value of  the progress description IE of the air interface */
  BAT_P_CPI_W_PROG_DESC_PROG_NOT_PRES = 0xff      /* not present                    */
}T_BAT_VAL_percent_cpi_w_prog_desc;
#endif

/*
 * Enum to value table VAL_percent_cpi_w_tch
 * CCDGEN:WriteEnum_Count==335
 */
#ifndef __T_BAT_VAL_percent_cpi_w_tch__
#define __T_BAT_VAL_percent_cpi_w_tch__
typedef enum
{
  BAT_P_CPI_W_TCH_FALSE          = 0x0,           /* TCH not assigned               */
  BAT_P_CPI_W_TCH_TRUE           = 0x1            /* TCH assigned                   */
}T_BAT_VAL_percent_cpi_w_tch;
#endif

/*
 * Enum to value table VAL_percent_cpmb_line
 * CCDGEN:WriteEnum_Count==336
 */
#ifndef __T_BAT_VAL_percent_cpmb_line__
#define __T_BAT_VAL_percent_cpmb_line__
typedef enum
{
  BAT_P_CPMB_LINE_LINE1          = 0x1,           /* Line 1                         */
  BAT_P_CPMB_LINE_DATA           = 0x2,           /* Data                           */
  BAT_P_CPMB_LINE_FAX            = 0x4,           /* Fax                            */
  BAT_P_CPMB_LINE_LINE2          = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpmb_line;
#endif

/*
 * Enum to value table VAL_percent_cpmb_w_line
 * CCDGEN:WriteEnum_Count==337
 */
#ifndef __T_BAT_VAL_percent_cpmb_w_line__
#define __T_BAT_VAL_percent_cpmb_w_line__
typedef enum
{
  BAT_P_CPMB_W_LINE_LINE1        = 0x1,           /* Line 1                         */
  BAT_P_CPMB_W_LINE_DATA         = 0x2,           /* Data                           */
  BAT_P_CPMB_W_LINE_FAX          = 0x4,           /* Fax                            */
  BAT_P_CPMB_W_LINE_LINE2        = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpmb_w_line;
#endif

/*
 * Enum to value table VAL_plus_cpms_mem1
 * CCDGEN:WriteEnum_Count==338
 */
#ifndef __T_BAT_VAL_plus_cpms_mem1__
#define __T_BAT_VAL_plus_cpms_mem1__
typedef enum
{
  BAT_CPMS_MEM1_ME               = 0x0,           /* ME message storage             */
  BAT_CPMS_MEM1_SM               = 0x1            /* SM message storage             */
}T_BAT_VAL_plus_cpms_mem1;
#endif

/*
 * Enum to value table VAL_plus_cpms_mem2
 * CCDGEN:WriteEnum_Count==339
 */
#ifndef __T_BAT_VAL_plus_cpms_mem2__
#define __T_BAT_VAL_plus_cpms_mem2__
typedef enum
{
  BAT_CPMS_MEM2_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CPMS_MEM2_ME               = 0x0,           /* ME message storage             */
  BAT_CPMS_MEM2_SM               = 0x1            /* SM message storage             */
}T_BAT_VAL_plus_cpms_mem2;
#endif

/*
 * Enum to value table VAL_plus_cpms_mem3
 * CCDGEN:WriteEnum_Count==340
 */
#ifndef __T_BAT_VAL_plus_cpms_mem3__
#define __T_BAT_VAL_plus_cpms_mem3__
typedef enum
{
  BAT_CPMS_MEM3_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CPMS_MEM3_ME               = 0x0,           /* ME message storage             */
  BAT_CPMS_MEM3_SM               = 0x1            /* SM message storage             */
}T_BAT_VAL_plus_cpms_mem3;
#endif

/*
 * Enum to value table VAL_percent_cpnums_mode
 * CCDGEN:WriteEnum_Count==341
 */
#ifndef __T_BAT_VAL_percent_cpnums_mode__
#define __T_BAT_VAL_percent_cpnums_mode__
typedef enum
{
  BAT_P_CPNUMS_MODE_EXPLORE      = 0x1,           /* Exploring element only if element is a folder returns elements belonging to folder */
  BAT_P_CPNUMS_MODE_QUERY        = 0x2            /* Querying element returns information related to element */
}T_BAT_VAL_percent_cpnums_mode;
#endif

/*
 * Enum to value table VAL_percent_cpnums_network_flag
 * CCDGEN:WriteEnum_Count==342
 */
#ifndef __T_BAT_VAL_percent_cpnums_network_flag__
#define __T_BAT_VAL_percent_cpnums_network_flag__
typedef enum
{
  BAT_P_CPNUMS_NETWORK_NOT_SET   = 0x0,           /* Network flag is not set for element */
  BAT_P_CPNUMS_NETWORK_SET       = 0x1            /* Network flag is set for element */
}T_BAT_VAL_percent_cpnums_network_flag;
#endif

/*
 * Enum to value table VAL_percent_cpnums_premium_flag
 * CCDGEN:WriteEnum_Count==343
 */
#ifndef __T_BAT_VAL_percent_cpnums_premium_flag__
#define __T_BAT_VAL_percent_cpnums_premium_flag__
typedef enum
{
  BAT_P_CPNUMS_PREMIUM_FLAG_NOT_SET = 0x0,        /* Premium flag is not set for element. */
  BAT_P_CPNUMS_PREMIUM_FLAG_SET  = 0x1            /* Premium flag is set for element */
}T_BAT_VAL_percent_cpnums_premium_flag;
#endif

/*
 * Enum to value table VAL_percent_cpnums_w_mode
 * CCDGEN:WriteEnum_Count==344
 */
#ifndef __T_BAT_VAL_percent_cpnums_w_mode__
#define __T_BAT_VAL_percent_cpnums_w_mode__
typedef enum
{
  BAT_P_CPNUMS_W_MODE_EXPLORE    = 0x1,           /* Exploring element only if element is a folder returns elements belonging to folder */
  BAT_P_CPNUMS_W_MODE_QUERY      = 0x2            /* Querying element               */
}T_BAT_VAL_percent_cpnums_w_mode;
#endif

/*
 * Enum to value table VAL_percent_cpnums_w_network_flag
 * CCDGEN:WriteEnum_Count==345
 */
#ifndef __T_BAT_VAL_percent_cpnums_w_network_flag__
#define __T_BAT_VAL_percent_cpnums_w_network_flag__
typedef enum
{
  BAT_P_CPNUMS_W_NETWORK_NOT_SET = 0x0,           /* Network flag is not set for element */
  BAT_P_CPNUMS_W_NETWORK_SET     = 0x1            /* Network flag is set for element */
}T_BAT_VAL_percent_cpnums_w_network_flag;
#endif

/*
 * Enum to value table VAL_percent_cpnums_w_premium_flag
 * CCDGEN:WriteEnum_Count==346
 */
#ifndef __T_BAT_VAL_percent_cpnums_w_premium_flag__
#define __T_BAT_VAL_percent_cpnums_w_premium_flag__
typedef enum
{
  BAT_P_CPNUMS_W_PREMIUM_FLAG_NOT_SET = 0x0,      /* Premium flag is not set for element. */
  BAT_P_CPNUMS_W_PREMIUM_FLAG_SET = 0x1           /* Premium flag is set for element */
}T_BAT_VAL_percent_cpnums_w_premium_flag;
#endif

/*
 * Enum to value table VAL_plus_cpol_format
 * CCDGEN:WriteEnum_Count==347
 */
#ifndef __T_BAT_VAL_plus_cpol_format__
#define __T_BAT_VAL_plus_cpol_format__
typedef enum
{
  BAT_CPOL_FORMAT_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CPOL_FORMAT_LONG           = 0x0,           /* Long format alphanumeric       */
  BAT_CPOL_FORMAT_SHORT          = 0x1,           /* Short format alphanumeric      */
  BAT_CPOL_FORMAT_NUMERIC        = 0x2            /* Numeric                        */
}T_BAT_VAL_plus_cpol_format;
#endif

/*
 * Enum to value table VAL_plus_cpol_w_format
 * CCDGEN:WriteEnum_Count==348
 */
#ifndef __T_BAT_VAL_plus_cpol_w_format__
#define __T_BAT_VAL_plus_cpol_w_format__
typedef enum
{
  BAT_CPOL_W_FORMAT_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_CPOL_W_FORMAT_LONG         = 0x0,           /* Long format alphanumeric       */
  BAT_CPOL_W_FORMAT_SHORT        = 0x1,           /* Short format alphanumeric      */
  BAT_CPOL_W_FORMAT_NUMERIC      = 0x2            /* Numeric                        */
}T_BAT_VAL_plus_cpol_w_format;
#endif

/*
 * Enum to value table VAL_percent_cpri_gprs_ciph
 * CCDGEN:WriteEnum_Count==349
 */
#ifndef __T_BAT_VAL_percent_cpri_gprs_ciph__
#define __T_BAT_VAL_percent_cpri_gprs_ciph__
typedef enum
{
  BAT_P_CPRI_GPRS_CIPH_NOT_PRESENT = -0x1,        /* This indicates that the value is omitted. */
  BAT_P_CPRI_GPRS_CIPH_DISABLED  = 0x0,           /* ciphering has changed to disabled */
  BAT_P_CPRI_GPRS_CIPH_ENABLED   = 0x1,           /* ciphering has changed to disabled */
  BAT_P_CPRI_GPRS_CIPH_UNCHANGED = 0x2            /* ciphering still unchanged      */
}T_BAT_VAL_percent_cpri_gprs_ciph;
#endif

/*
 * Enum to value table VAL_percent_cpri_gsm_ciph
 * CCDGEN:WriteEnum_Count==350
 */
#ifndef __T_BAT_VAL_percent_cpri_gsm_ciph__
#define __T_BAT_VAL_percent_cpri_gsm_ciph__
typedef enum
{
  BAT_P_CPRI_GSM_CIPH_NOT_PRESENT = -0x1,         /* This indicates that the value is omitted. */
  BAT_P_CPRI_GSM_CIPH_DISABLED   = 0x0,           /* ciphering has changed to disabled */
  BAT_P_CPRI_GSM_CIPH_ENABLED    = 0x1,           /* ciphering has changed to disabled */
  BAT_P_CPRI_GSM_CIPH_UNCHANGED  = 0x2            /* ciphering still unchanged      */
}T_BAT_VAL_percent_cpri_gsm_ciph;
#endif

/*
 * Enum to value table VAL_percent_cproam_roam_status
 * CCDGEN:WriteEnum_Count==351
 */
#ifndef __T_BAT_VAL_percent_cproam_roam_status__
#define __T_BAT_VAL_percent_cproam_roam_status__
typedef enum
{
  BAT_P_CPROAM_STATUS_NOT_ROAMING = 0x0,          /* Mobile is not in Roaming state. */
  BAT_P_CPROAM_STATUS_ROAMING    = 0x1            /* Mobile is in Roaming state (mobile is registered to an other than the home network). */
}T_BAT_VAL_percent_cproam_roam_status;
#endif

/*
 * Enum to value table VAL_percent_cprsm_mode
 * CCDGEN:WriteEnum_Count==352
 */
#ifndef __T_BAT_VAL_percent_cprsm_mode__
#define __T_BAT_VAL_percent_cprsm_mode__
typedef enum
{
  BAT_P_CPRSM_MODE_RESUME        = 0x0,           /* Resume reception of short messages */
  BAT_P_CPRSM_MODE_PAUSE         = 0x1            /* Pause (ie block) reception of short messages */
}T_BAT_VAL_percent_cprsm_mode;
#endif

/*
 * Enum to value table VAL_percent_cpvwi_lines
 * CCDGEN:WriteEnum_Count==353
 */
#ifndef __T_BAT_VAL_percent_cpvwi_lines__
#define __T_BAT_VAL_percent_cpvwi_lines__
typedef enum
{
  BAT_P_CPVWI_LINES_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_CPVWI_LINES_LINE1        = 0x1,           /* Line 1                         */
  BAT_P_CPVWI_LINES_DATA         = 0x2,           /* Data                           */
  BAT_P_CPVWI_LINES_FAX          = 0x4,           /* Fax                            */
  BAT_P_CPVWI_LINES_LINE2        = 0x100          /* Line 2                         */
}T_BAT_VAL_percent_cpvwi_lines;
#endif

/*
 * Enum to value table VAL_percent_cpvwi_mode
 * CCDGEN:WriteEnum_Count==354
 */
#ifndef __T_BAT_VAL_percent_cpvwi_mode__
#define __T_BAT_VAL_percent_cpvwi_mode__
typedef enum
{
  BAT_P_CPVWI_MODE_CLEAR         = 0x0,           /* Clear Voice Message Waiting flag */
  BAT_P_CPVWI_MODE_SET           = 0x1,           /* Set Voice Message Waiting flag */
  BAT_P_CPVWI_MODE_QUERY         = 0x2            /* Query Set Voice Message Waiting flag status */
}T_BAT_VAL_percent_cpvwi_mode;
#endif

/*
 * Enum to value table VAL_percent_cpvwi_status
 * CCDGEN:WriteEnum_Count==355
 */
#ifndef __T_BAT_VAL_percent_cpvwi_status__
#define __T_BAT_VAL_percent_cpvwi_status__
typedef enum
{
  BAT_P_CPVWI_FLAG_DEACTIVATED   = 0x0,           /* Flag deactivated               */
  BAT_P_CPVWI_FLAG_ACTIVATED     = 0x1,           /* Flag activated                 */
  BAT_P_CPVWI_FLAG_NOT_PRESENT   = 0x2            /* Flag not present               */
}T_BAT_VAL_percent_cpvwi_status;
#endif

/*
 * Enum to value table VAL_plus_cpwd_fac
 * CCDGEN:WriteEnum_Count==356
 */
#ifndef __T_BAT_VAL_plus_cpwd_fac__
#define __T_BAT_VAL_plus_cpwd_fac__
typedef enum
{
  BAT_CPWD_FAC_SC                = 0x0,           /* SIM PIN1                       */
  BAT_CPWD_FAC_AO                = 0x1,           /* BAOC (Bar All Outgoing Calls) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CPWD_FAC_OI                = 0x2,           /* BOIC (Bar Outgoing International Calls) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CPWD_FAC_OX                = 0x3,           /* BOIC exHC (Barr Outgoing International Calls except to Home Country) (refer 3GPP TS 22.088 [6] clause 1) */
  BAT_CPWD_FAC_AI                = 0x4,           /* BAIC (Bar All Incoming Calls) (refer 3GPP TS 22.088 [6] clause 2) */
  BAT_CPWD_FAC_IR                = 0x5,           /* BIC-Roam (Bar Incoming Calls when Roaming outside the home country) (refer 3GPP TS 22.088 [6] clause 2) */
  BAT_CPWD_FAC_AB                = 0x6,           /* All Barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CPWD_FAC_AG                = 0x7,           /* All outgoing barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CPWD_FAC_AC                = 0x8,           /* All incoming barring services (refer 3GPP TS 22.030 [19]) */
  BAT_CPWD_FAC_FD                = 0x9,           /* SIM card or active application in the UICC fixed dialling memory feature */
  BAT_CPWD_FAC_PN                = 0xa,           /* Network Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CPWD_FAC_PU                = 0xb,           /* Network subset Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CPWD_FAC_PP                = 0xc,           /* Service Provider Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CPWD_FAC_PC                = 0xd,           /* Corporate Personalisation (refer 3GPP TS 22.022 [33]) */
  BAT_CPWD_FAC_PS                = 0xe,           /* PH-SIM (lock phone to SIM/UICC card) */
  BAT_CPWD_FAC_PF                = 0xf,           /* Lock Phone to the very First inserted SIM/UICC card */
  BAT_CPWD_FAC_AL                = 0x10,          /* ALS settings locked by CHV2    */
// VAL-FF: SIM_PERS  
//   BAT_CPWD_FAC_BL                = 0x11,          /* For Blocked Network            */
// VAL-FF: SIM_PERS  
//   BAT_CPWD_FAC_FC                = 0x12,          /* Failure counter reset          */
// VAL-FF: SIM_PERS  
//   BAT_CPWD_FAC_FCM               = 0x13,          /* Failure counter reset thru menu */
// VAL-FF: SIM_PERS  
//   BAT_CPWD_FAC_MU                = 0x14,          /* For Master Unlock thru bootup  */
// VAL-FF: SIM_PERS  
//   BAT_CPWD_FAC_MUM               = 0x15,          /* For Master Unlock thru Menu    */
// VAL-FF: FF_PHONE_LOCK  
//   BAT_CPWD_FAC_PL                = 0x16,          /* For Phone lock category        */
// VAL-FF: FF_PHONE_LOCK  
//   BAT_CPWD_FAC_APL               = 0x17,          /* For Auto phone Lock            */
  BAT_CPWD_FAC_P2                = 0x18           /* SIM PIN2                       */
}T_BAT_VAL_plus_cpwd_fac;
#endif

/*
 * Enum to value table VAL_percent_creg_gprs_ind
 * CCDGEN:WriteEnum_Count==357
 */
#ifndef __T_BAT_VAL_percent_creg_gprs_ind__
#define __T_BAT_VAL_percent_creg_gprs_ind__
typedef enum
{
  BAT_P_CREG_GPRS_IND_NOT_SUPPORTED = 0x0,        /* GPRS not supported within the cell */
  BAT_P_CREG_GPRS_IND_LIMITED    = 0x1,           /* GPRS supported but with limited service */
  BAT_P_CREG_GPRS_IND_SUPPORTED  = 0x2,           /* GPRS is supported within the cell */
  BAT_P_CREG_GPRS_IND_UNKNOWN    = 0x3            /* It is unknown whether GPRS is supported within the cell */
}T_BAT_VAL_percent_creg_gprs_ind;
#endif

/*
 * Enum to value table VAL_percent_creg_stat
 * CCDGEN:WriteEnum_Count==358
 */
#ifndef __T_BAT_VAL_percent_creg_stat__
#define __T_BAT_VAL_percent_creg_stat__
typedef enum
{
  BAT_P_CREG_STATUS_NO_SEARCH    = 0x0,           /* Not registered and not currently searching for a new operator */
  BAT_P_CREG_STATUS_REG          = 0x1,           /* Registered, home network       */
  BAT_P_CREG_STATUS_SEARCH       = 0x2,           /* Not registered and currently searching for a new operator */
  BAT_P_CREG_STATUS_DENIED       = 0x3,           /* Registration denied            */
  BAT_P_CREG_STATUS_UNKNOWN      = 0x4,           /* Unknown                        */
  BAT_P_CREG_STATUS_ROAM         = 0x5            /* Registered, roaming            */
}T_BAT_VAL_percent_creg_stat;
#endif

/*
 * Enum to value table VAL_plus_cring_alt
 * CCDGEN:WriteEnum_Count==359
 */
#ifndef __T_BAT_VAL_plus_cring_alt__
#define __T_BAT_VAL_plus_cring_alt__
typedef enum
{
  BAT_CRING_ALT_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CRING_ALT_VFD              = 0x0,           /* Voice Followed by Data         */
  BAT_CRING_ALT_ALTERNATING      = 0x1            /* Alternating Voice/XXX          */
}T_BAT_VAL_plus_cring_alt;
#endif

/*
 * Enum to value table VAL_plus_cring_type2
 * CCDGEN:WriteEnum_Count==360
 */
#ifndef __T_BAT_VAL_plus_cring_type2__
#define __T_BAT_VAL_plus_cring_type2__
typedef enum
{
  BAT_CRING_TYPE2_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_CRING_TYPE2_ASYNC          = 0x0,           /* asynchronous transparent       */
  BAT_CRING_TYPE2_SYNC           = 0x1,           /* synchronous transparent        */
  BAT_CRING_TYPE2_REL_ASYNC      = 0x2,           /* asynchronous non transparent   */
  BAT_CRING_TYPE2_REL_SYNC       = 0x3,           /* synchronous non transparent    */
  BAT_CRING_TYPE2_FAX            = 0x4,           /* facsimile (TS 62)              */
  BAT_CRING_TYPE2_VOICE          = 0x5,           /* normal voice (TS 11)           */
  BAT_CRING_TYPE2_AUX_VOICE      = 0x6,           /* voice on second line           */
  BAT_CRING_TYPE2_GPRS           = 0x7            /* GPRS &lt;PDP_type&gt;,&lt;PDP_addr&gt;[,&lt;L2P&gt;] (GPRS network request for PDP context activation) */
}T_BAT_VAL_plus_cring_type2;
#endif

/*
 * Enum to value table VAL_plus_crsm_command
 * CCDGEN:WriteEnum_Count==361
 */
#ifndef __T_BAT_VAL_plus_crsm_command__
#define __T_BAT_VAL_plus_crsm_command__
typedef enum
{
  BAT_CRSM_CMD_READ_BIN          = 0xb0,          /* Read binary                    */
  BAT_CRSM_CMD_READ_REC          = 0xb2,          /* Read record                    */
  BAT_CRSM_CMD_GET_RESP          = 0xc0,          /* Get response                   */
  BAT_CRSM_CMD_UPD_BIN           = 0xd6,          /* Update binary                  */
  BAT_CRSM_CMD_UPD_REC           = 0xdc,          /* Update record                  */
  BAT_CRSM_CMD_STATUS            = 0xf2           /* SIM status                     */
}T_BAT_VAL_plus_crsm_command;
#endif

/*
 * Enum to value table VAL_plus_cscb_mode
 * CCDGEN:WriteEnum_Count==362
 */
#ifndef __T_BAT_VAL_plus_cscb_mode__
#define __T_BAT_VAL_plus_cscb_mode__
typedef enum
{
  BAT_CSCB_MODE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_CSCB_MODE_ACCEPT           = 0x0,           /* Accept the specified message types */
  BAT_CSCB_MODE_NOT_ACCEPT       = 0x1            /* Dont accept the specified message types */
}T_BAT_VAL_plus_cscb_mode;
#endif

/*
 * Enum to value table VAL_plus_cscs_cs
 * CCDGEN:WriteEnum_Count==363
 */
#ifndef __T_BAT_VAL_plus_cscs_cs__
#define __T_BAT_VAL_plus_cscs_cs__
typedef enum
{
  BAT_CSCS_CS_IRA                = 0x0,           /* International Reference Alphabet */
  BAT_CSCS_CS_PCDN               = 0x1,           /* PC Danish/Norwegian            */
  BAT_CSCS_CS_8859_1             = 0x2,           /* ISO 8859 Latin 1               */
  BAT_CSCS_CS_PCCP_437           = 0x3,           /* PC code page 437               */
  BAT_CSCS_CS_GSM                = 0x4,           /* GSM 7 bit default alphabet     */
  BAT_CSCS_CS_HEX                = 0x5,           /* Hexadecimal                    */
  BAT_CSCS_CS_UCS2               = 0x6            /* 16 bit UCS2                    */
}T_BAT_VAL_plus_cscs_cs;
#endif

/*
 * Enum to value table VAL_plus_csms_bm
 * CCDGEN:WriteEnum_Count==364
 */
#ifndef __T_BAT_VAL_plus_csms_bm__
#define __T_BAT_VAL_plus_csms_bm__
typedef enum
{
  BAT_CSMS_BM_DISABLE            = 0x0,           /* Not supported                  */
  BAT_CSMS_BM_ENABLE             = 0x1            /* Supported                      */
}T_BAT_VAL_plus_csms_bm;
#endif

/*
 * Enum to value table VAL_plus_csms_mo
 * CCDGEN:WriteEnum_Count==365
 */
#ifndef __T_BAT_VAL_plus_csms_mo__
#define __T_BAT_VAL_plus_csms_mo__
typedef enum
{
  BAT_CSMS_MO_DISABLE            = 0x0,           /* Not supported                  */
  BAT_CSMS_MO_ENABLE             = 0x1            /* Supported                      */
}T_BAT_VAL_plus_csms_mo;
#endif

/*
 * Enum to value table VAL_plus_csms_mt
 * CCDGEN:WriteEnum_Count==366
 */
#ifndef __T_BAT_VAL_plus_csms_mt__
#define __T_BAT_VAL_plus_csms_mt__
typedef enum
{
  BAT_CSMS_MT_DISABLE            = 0x0,           /* Not supported                  */
  BAT_CSMS_MT_ENABLE             = 0x1            /* Supported                      */
}T_BAT_VAL_plus_csms_mt;
#endif

/*
 * Enum to value table VAL_plus_csms_service
 * CCDGEN:WriteEnum_Count==367
 */
#ifndef __T_BAT_VAL_plus_csms_service__
#define __T_BAT_VAL_plus_csms_service__
typedef enum
{
  BAT_CSMS_SERVICE_GSM_PH2       = 0x0,           /* Syntax compatible with GSM 07.05 Phase 2 version 4.7.0 */
  BAT_CSMS_SERVICE_GSM_PH2_PLUS  = 0x1            /* Syntax compatible with GSM 07.05 Phase 2+ */
}T_BAT_VAL_plus_csms_service;
#endif

/*
 * Enum to value table VAL_plus_csns_mode
 * CCDGEN:WriteEnum_Count==368
 */
#ifndef __T_BAT_VAL_plus_csns_mode__
#define __T_BAT_VAL_plus_csns_mode__
typedef enum
{
  BAT_CSNS_MODE_VOICE            = 0x0,           /* Voice                          */
  BAT_CSNS_MODE_VAF_VOICE        = 0x1,           /* Alternating voice/fax, voice first */
  BAT_CSNS_MODE_FAX              = 0x2,           /* Fax                            */
  BAT_CSNS_MODE_VAD_VOICE        = 0x3,           /* Alternating voice/data, voice first */
  BAT_CSNS_MODE_DATA             = 0x4,           /* Data                           */
  BAT_CSNS_MODE_VAF_FAX          = 0x5,           /* Alternating voice/fax, fax first */
  BAT_CSNS_MODE_VAD_DATA         = 0x6,           /* Alternating voice/data, data first */
  BAT_CSNS_MODE_VFD              = 0x7            /* Voice followed by data         */
}T_BAT_VAL_plus_csns_mode;
#endif

/*
 * Enum to value table VAL_plus_cssi_code1
 * CCDGEN:WriteEnum_Count==369
 */
#ifndef __T_BAT_VAL_plus_cssi_code1__
#define __T_BAT_VAL_plus_cssi_code1__
typedef enum
{
  BAT_CSSI_CODE1_CFUACTIVE       = 0x0,           /* CFUActive                      */
  BAT_CSSI_CODE1_SOMECCFAC       = 0x1,           /* SomeCCFActive                  */
  BAT_CSSI_CODE1_FORWARDED       = 0x2,           /* ForwardedCall                  */
  BAT_CSSI_CODE1_CALLWAITING     = 0x3,           /* CallWaiting                    */
  BAT_CSSI_CODE1_CUGCALL         = 0x4,           /* CUGCall                        */
  BAT_CSSI_CODE1_OUTCALLSBARRED  = 0x5,           /* OutCallsBarred                 */
  BAT_CSSI_CODE1_INCCALLSBARRED  = 0x6,           /* IncCallsBarred                 */
  BAT_CSSI_CODE1_CLIRSUPREJ      = 0x7,           /* CLIRSupRej                     */
  BAT_CSSI_CODE1_DEFLECTEDCALL   = 0x8            /* DeflectedCall                  */
}T_BAT_VAL_plus_cssi_code1;
#endif

/*
 * Enum to value table VAL_percent_cssn_direction
 * CCDGEN:WriteEnum_Count==370
 */
#ifndef __T_BAT_VAL_percent_cssn_direction__
#define __T_BAT_VAL_percent_cssn_direction__
typedef enum
{
  BAT_P_CSSN_DIRECTION_IN        = 0x0,           /* In                             */
  BAT_P_CSSN_DIRECTION_OUT       = 0x1,           /* Out                            */
  BAT_P_CSSN_DIRECTION_BOTH      = 0x2            /* Both                           */
}T_BAT_VAL_percent_cssn_direction;
#endif

/*
 * Enum to value table VAL_percent_cssn_trans_type
 * CCDGEN:WriteEnum_Count==371
 */
#ifndef __T_BAT_VAL_percent_cssn_trans_type__
#define __T_BAT_VAL_percent_cssn_trans_type__
typedef enum
{
  BAT_P_CSSN_TRANS_TYPE_BEGIN    = 0x0,           /* Beginning                      */
  BAT_P_CSSN_TRANS_TYPE_FAC      = 0x1,           /* Neither beginning or end       */
  BAT_P_CSSN_TRANS_TYPE_END      = 0x2            /* End                            */
}T_BAT_VAL_percent_cssn_trans_type;
#endif

/*
 * Enum to value table VAL_plus_cssu_code2
 * CCDGEN:WriteEnum_Count==372
 */
#ifndef __T_BAT_VAL_plus_cssu_code2__
#define __T_BAT_VAL_plus_cssu_code2__
typedef enum
{
  BAT_CSSU_CODE2_FORWARDEDCALL   = 0x0,           /* ForwardedCall                  */
  BAT_CSSU_CODE2_CUGCALL         = 0x1,           /* CUGCall                        */
  BAT_CSSU_CODE2_ONHOLD          = 0x2,           /* OnHold                         */
  BAT_CSSU_CODE2_RETRIEVED       = 0x3,           /* Retrieved                      */
  BAT_CSSU_CODE2_MULTIPARTY      = 0x4,           /* Multiparty                     */
  BAT_CSSU_CODE2_HELDCALLREL     = 0x5,           /* HeldCallRel                    */
  BAT_CSSU_CODE2_FWRDCHECKSS     = 0x6,           /* FwrdCheckSS                    */
  BAT_CSSU_CODE2_ECTALERT        = 0x7,           /* ECTAlert                       */
  BAT_CSSU_CODE2_ECTCONNECT      = 0x8,           /* ECTConnect                     */
  BAT_CSSU_CODE2_DEFLECTEDCAL    = 0x9,           /* DeflectedCal                   */
  BAT_CSSU_CODE2_INCCALLFORWARDED = 0xa           /* IncCallForwarded               */
}T_BAT_VAL_plus_cssu_code2;
#endif

/*
 * Enum to value table VAL_percent_cstat_entity_id
 * CCDGEN:WriteEnum_Count==373
 */
#ifndef __T_BAT_VAL_percent_cstat_entity_id__
#define __T_BAT_VAL_percent_cstat_entity_id__
typedef enum
{
  BAT_P_CSTAT_ENT_ID_PBOOK       = 0x0,           /* Phonebook                      */
  BAT_P_CSTAT_ENT_ID_SMS         = 0x1,           /* SMS                            */
  BAT_P_CSTAT_ENT_ID_RDY         = 0xff           /* Ready when both PHB and SMS have reported they are ready */
}T_BAT_VAL_percent_cstat_entity_id;
#endif

/*
 * Enum to value table VAL_percent_cstat_status
 * CCDGEN:WriteEnum_Count==374
 */
#ifndef __T_BAT_VAL_percent_cstat_status__
#define __T_BAT_VAL_percent_cstat_status__
typedef enum
{
  BAT_P_CSTAT_ENT_STATE_NOT_READY = 0x0,          /* Not ready                      */
  BAT_P_CSTAT_ENT_STATE_READY    = 0x1            /* Ready                          */
}T_BAT_VAL_percent_cstat_status;
#endif

/*
 * Enum to value table VAL_plus_csvm_mode
 * CCDGEN:WriteEnum_Count==375
 */
#ifndef __T_BAT_VAL_plus_csvm_mode__
#define __T_BAT_VAL_plus_csvm_mode__
typedef enum
{
  BAT_CSVM_MODE_DISABLE          = 0x0,           /* Disable                        */
  BAT_CSVM_MODE_ENABLE           = 0x1            /* Enable                         */
}T_BAT_VAL_plus_csvm_mode;
#endif

/*
 * Enum to value table VAL_percent_ctty_m
 * CCDGEN:WriteEnum_Count==376
 */
#ifndef __T_BAT_VAL_percent_ctty_m__
#define __T_BAT_VAL_percent_ctty_m__
typedef enum
{
  BAT_P_CTTY_M_DEACTIVATED       = 0x0,           /* DEACTIVATED                    */
  BAT_P_CTTY_M_ACTIVATED         = 0x1,           /* ACTIVATED                      */
  BAT_P_CTTY_M_UNKNOWN           = 0x2            /* UNKNOWN                        */
}T_BAT_VAL_percent_ctty_m;
#endif

/*
 * Enum to value table VAL_percent_ctty_req
 * CCDGEN:WriteEnum_Count==377
 */
#ifndef __T_BAT_VAL_percent_ctty_req__
#define __T_BAT_VAL_percent_ctty_req__
typedef enum
{
  BAT_P_CTTY_REQ_NO_TTY          = 0x0,           /* NO TTY                         */
  BAT_P_CTTY_REQ_BIDIRECTIONAL   = 0x1,           /* BIDIRECTIONAL                  */
  BAT_P_CTTY_REQ_STATIC_HCO      = 0x2,           /* STATIC_HCO                     */
  BAT_P_CTTY_REQ_STATIC_VCO      = 0x3            /* STATIC_VCO                     */
}T_BAT_VAL_percent_ctty_req;
#endif

/*
 * Enum to value table VAL_percent_ctyi_neg
 * CCDGEN:WriteEnum_Count==378
 */
#ifndef __T_BAT_VAL_percent_ctyi_neg__
#define __T_BAT_VAL_percent_ctyi_neg__
typedef enum
{
  BAT_P_CTYI_NEG_OFF             = 0x0,           /* TTY service not requested      */
  BAT_P_CTYI_NEG_REQ             = 0x1,           /* TTY service requested          */
  BAT_P_CTYI_NEG_REJECT          = 0x2,           /* TTY service not granted        */
  BAT_P_CTYI_NEG_GRANT           = 0x3            /* TTY service granted            */
}T_BAT_VAL_percent_ctyi_neg;
#endif

/*
 * Enum to value table VAL_plus_ctzu_onoff
 * CCDGEN:WriteEnum_Count==379
 */
#ifndef __T_BAT_VAL_plus_ctzu_onoff__
#define __T_BAT_VAL_plus_ctzu_onoff__
typedef enum
{
  BAT_CTZU_ONOFF_OFF             = 0x0,           /* Disable automatic time zone update via NITZ (default). */
  BAT_CTZU_ONOFF_ON              = 0x1            /* Enable automatic time zone update via NITZ. */
}T_BAT_VAL_plus_ctzu_onoff;
#endif

/*
 * Enum to value table VAL_plus_cusd_m
 * CCDGEN:WriteEnum_Count==380
 */
#ifndef __T_BAT_VAL_plus_cusd_m__
#define __T_BAT_VAL_plus_cusd_m__
typedef enum
{
  BAT_CUSD_M_END                 = 0x0,           /* no further user action required */
  BAT_CUSD_M_REQUEST             = 0x1,           /* further user action required   */
  BAT_CUSD_M_TERMINATED          = 0x2,           /* USSD terminated by network     */
  BAT_CUSD_M_RESPONSE            = 0x3,           /* other local client has responded */
  BAT_CUSD_M_NOT_SUPPORTED       = 0x4,           /* operation not supported        */
  BAT_CUSD_M_NETWORK_TIMEOUT     = 0x5            /* network time out               */
}T_BAT_VAL_plus_cusd_m;
#endif

/*
 * Enum to value table VAL_plus_cusd_n
 * CCDGEN:WriteEnum_Count==381
 */
#ifndef __T_BAT_VAL_plus_cusd_n__
#define __T_BAT_VAL_plus_cusd_n__
typedef enum
{
  BAT_CUSD_N_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_CUSD_N_CANCEL              = 0x2            /* Cancel ongoing USSD session    */
}T_BAT_VAL_plus_cusd_n;
#endif

/*
 * Enum to value table VAL_plus_cusd_w_m
 * CCDGEN:WriteEnum_Count==382
 */
#ifndef __T_BAT_VAL_plus_cusd_w_m__
#define __T_BAT_VAL_plus_cusd_w_m__
typedef enum
{
  BAT_CUSD_W_M_END               = 0x0,           /* no further user action required */
  BAT_CUSD_W_M_REQUEST           = 0x1,           /* further user action required   */
  BAT_CUSD_W_M_TERMINATED        = 0x2,           /* USSD terminated by network     */
  BAT_CUSD_W_M_RESPONSE          = 0x3,           /* other local client has responded */
  BAT_CUSD_W_M_NOT_SUPPORTED     = 0x4,           /* operation not supported        */
  BAT_CUSD_W_M_NETWORK_TIMEOUT   = 0x5            /* network time out               */
}T_BAT_VAL_plus_cusd_w_m;
#endif

/*
 * Enum to value table VAL_plus_cusd_w_n
 * CCDGEN:WriteEnum_Count==383
 */
#ifndef __T_BAT_VAL_plus_cusd_w_n__
#define __T_BAT_VAL_plus_cusd_w_n__
typedef enum
{
  BAT_CUSD_W_N_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_CUSD_W_N_CANCEL            = 0x2            /* Cancel ongoing USSD session    */
}T_BAT_VAL_plus_cusd_w_n;
#endif

/*
 * Enum to value table VAL_percent_cust_mode
 * CCDGEN:WriteEnum_Count==384
 */
#ifndef __T_BAT_VAL_percent_cust_mode__
#define __T_BAT_VAL_percent_cust_mode__
typedef enum
{
  BAT_P_CUST_MODE_NORMAL         = 0x0,           /* Normal behaviour               */
  BAT_P_CUST_MODE_BEHAVIOUR_1    = 0x1            /* Behaviour 1                    */
}T_BAT_VAL_percent_cust_mode;
#endif

/*
 * Enum to value table VAL_percent_cwup_type
 * CCDGEN:WriteEnum_Count==385
 */
#ifndef __T_BAT_VAL_percent_cwup_type__
#define __T_BAT_VAL_percent_cwup_type__
typedef enum
{
  BAT_P_CWUP_TYPE_RR             = 0x1            /* Wake up RR                     */
}T_BAT_VAL_percent_cwup_type;
#endif

/*
 * Enum to value table VAL_percent_data_mode
 * CCDGEN:WriteEnum_Count==386
 */
#ifndef __T_BAT_VAL_percent_data_mode__
#define __T_BAT_VAL_percent_data_mode__
typedef enum
{
  BAT_P_DATA_MODE_DELETE         = 0x0,           /* Delete redirection             */
  BAT_P_DATA_MODE_ONCE           = 0x1,           /* Activate redirection (once)    */
  BAT_P_DATA_MODE_ALWAYS         = 0x2            /* Activate redirection (always)  */
}T_BAT_VAL_percent_data_mode;
#endif

/*
 * Enum to value table VAL_percent_dinf_mode
 * CCDGEN:WriteEnum_Count==387
 */
#ifndef __T_BAT_VAL_percent_dinf_mode__
#define __T_BAT_VAL_percent_dinf_mode__
typedef enum
{
  BAT_P_DINF_MODE_CURRENT        = 0x0,           /* Show only current channel information */
  BAT_P_DINF_MODE_ALL            = 0x1            /* Show all available channel information */
}T_BAT_VAL_percent_dinf_mode;
#endif

/*
 * Enum to value table VAL_plus_ds_dir
 * CCDGEN:WriteEnum_Count==388
 */
#ifndef __T_BAT_VAL_plus_ds_dir__
#define __T_BAT_VAL_plus_ds_dir__
typedef enum
{
  BAT_DS_DIRECTION_NOT_PRESENT   = -0x1,          /* This indicates that the value is omitted. */
  BAT_DS_DIRECTION_NEGOTIATED    = 0x0,           /* To be negotiated               */
  BAT_DS_DIRECTION_TX_ONLY       = 0x1,           /* Compression in the TX direction only */
  BAT_DS_DIRECTION_RX_ONLY       = 0x2,           /* Compression in the RX direction only */
  BAT_DS_DIRECTION_BOTH          = 0x3            /* Compression in both directions */
}T_BAT_VAL_plus_ds_dir;
#endif

/*
 * Enum to value table VAL_plus_ds_neg
 * CCDGEN:WriteEnum_Count==389
 */
#ifndef __T_BAT_VAL_plus_ds_neg__
#define __T_BAT_VAL_plus_ds_neg__
typedef enum
{
  BAT_DS_COMP_NOT_PRESENT        = -0x1,          /* This indicates that the value is omitted. */
  BAT_DS_COMP_NO_DISC            = 0x0,           /* No disconnect if compression negotiation fails */
  BAT_DS_COMP_DISC               = 0x1            /* Disconnect if compression negotiation fails */
}T_BAT_VAL_plus_ds_neg;
#endif

/*
 * Enum to value table VAL_percent_efrslt_result
 * CCDGEN:WriteEnum_Count==390
 */
#ifndef __T_BAT_VAL_percent_efrslt_result__
#define __T_BAT_VAL_percent_efrslt_result__
typedef enum
{
  BAT_P_EFRSLT_RES_FAIL          = 0x0,           /* Update failed                  */
  BAT_P_EFRSLT_RES_OK            = 0x1            /* Update was successful          */
}T_BAT_VAL_percent_efrslt_result;
#endif

/*
 * Enum to value table VAL_percent_simef_mode
 * CCDGEN:WriteEnum_Count==391
 */
#ifndef __T_BAT_VAL_percent_simef_mode__
#define __T_BAT_VAL_percent_simef_mode__
typedef enum
{
  BAT_P_SIMEF_MODE_OFF           = 0x0,           /* Disable Indication             */
  BAT_P_SIMEF_MODE_ON            = 0x1            /* Enable Indication              */
}T_BAT_VAL_percent_simef_mode;
#endif

/*
 * Enum to value table VAL_percent_em_mode
 * CCDGEN:WriteEnum_Count==392
 */
#ifndef __T_BAT_VAL_percent_em_mode__
#define __T_BAT_VAL_percent_em_mode__
typedef enum
{
  BAT_P_EM_MODE_DIS_AUTO_REP     = 0x0,           /* Disable automatic reporting    */
  BAT_P_EM_MODE_EN_AUTO_REP      = 0x1,           /* Enable automatic reporting     */
  BAT_P_EM_MODE_SIN              = 0x2,           /* Mobile station and infrastructure data */
  BAT_P_EM_MODE_PCO              = 0x3            /* Request EM data as trace output */
}T_BAT_VAL_percent_em_mode;
#endif

/*
 * Enum to value table VAL_percent_em_pco_type
 * CCDGEN:WriteEnum_Count==393
 */
#ifndef __T_BAT_VAL_percent_em_pco_type__
#define __T_BAT_VAL_percent_em_pco_type__
typedef enum
{
  BAT_P_EM_PCO_TYPE_NOT_PRESENT  = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_EM_PCO_TYPE_SC           = 0x1,           /* Serving cell                   */
  BAT_P_EM_PCO_TYPE_SC_GPRS      = 0x2,           /* Serving cell GPRS              */
  BAT_P_EM_PCO_TYPE_SC_NC        = 0x4,           /* Neighbouring cell              */
  BAT_P_EM_PCO_TYPE_LOC_PAG      = 0x8,           /* Location and paging parameter  */
  BAT_P_EM_PCO_TYPE_PLMN         = 0x10,          /* PLMN Parameters                */
  BAT_P_EM_PCO_TYPE_CIPH_HOP_DTX = 0x20,          /* Ciphering, hopping and dtx parameters */
  BAT_P_EM_PCO_TYPE_POWER        = 0x40,          /* Power parameters               */
  BAT_P_EM_PCO_TYPE_ID           = 0x80,          /* Identity parameters            */
  BAT_P_EM_PCO_TYPE_VER          = 0x100,         /* Version parameters             */
  BAT_P_EM_PCO_TYPE_GMM          = 0x200,         /* GMM information                */
  BAT_P_EM_PCO_TYPE_GRLC         = 0x400,         /* GRLC information               */
  BAT_P_EM_PCO_TYPE_AMR          = 0x800,         /* AMR information                */
  BAT_P_EM_PCO_TYPE_PDP          = 0x1000,        /* PDP information                */
  BAT_P_EM_PCO_TYPE_RR           = 0x2000         /* All Information from RR        */
}T_BAT_VAL_percent_em_pco_type;
#endif

/*
 * Enum to value table VAL_percent_em_sin_type
 * CCDGEN:WriteEnum_Count==394
 */
#ifndef __T_BAT_VAL_percent_em_sin_type__
#define __T_BAT_VAL_percent_em_sin_type__
typedef enum
{
  BAT_P_EM_TYPE_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_EM_TYPE_SC               = 0x1,           /* Serving cell                   */
  BAT_P_EM_TYPE_SC_GPRS          = 0x2,           /* Serving cell GPRS              */
  BAT_P_EM_TYPE_SC_NC            = 0x3,           /* Neighbouring cell              */
  BAT_P_EM_TYPE_LOC_PAG          = 0x4,           /* Location and paging parameter  */
  BAT_P_EM_TYPE_PLMN             = 0x5,           /* PLMN Parameters                */
  BAT_P_EM_TYPE_CIPH_HOP_DTX     = 0x6,           /* Ciphering, hopping and dtx parameters */
  BAT_P_EM_TYPE_POWER            = 0x7,           /* Power parameters               */
  BAT_P_EM_TYPE_ID               = 0x8,           /* Identity parameters            */
  BAT_P_EM_TYPE_VER              = 0x9,           /* Version parameters             */
  BAT_P_EM_TYPE_GMM              = 0xa,           /* GMM information                */
  BAT_P_EM_TYPE_GRLC             = 0xb,           /* GRLC information               */
  BAT_P_EM_TYPE_AMR              = 0xc,           /* AMR information                */
  BAT_P_EM_TYPE_PDP              = 0xd            /* PDP information                */
}T_BAT_VAL_percent_em_sin_type;
#endif

/*
 * Enum to value table VAL_plus_ext_error_err
 * CCDGEN:WriteEnum_Count==395
 */
#ifndef __T_BAT_VAL_plus_ext_error_err__
#define __T_BAT_VAL_plus_ext_error_err__
typedef enum
{
  BAT_EXT_ERROR_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_EXT_ERROR_EXT_ERR_PARAMETER = 0x0,          /* parameter not allowed          */
  BAT_EXT_ERROR_EXT_ERR_DATACORRUPT = 0x1,        /* data corrupted                 */
  BAT_EXT_ERROR_EXT_ERR_INTERNAL = 0x2,           /* internal error                 */
  BAT_EXT_ERROR_EXT_ERR_CALLTABFULL = 0x3,        /* call table full                */
  BAT_EXT_ERROR_EXT_ERR_SRVTABFULL = 0x4,         /* service table full             */
  BAT_EXT_ERROR_EXT_ERR_CALLNOTFOUND = 0x5,       /* call not found                 */
  BAT_EXT_ERROR_EXT_ERR_NODATACALLSUP = 0x6,      /* no data-call supported         */
  BAT_EXT_ERROR_EXT_ERR_ONECALLONHOLD = 0x7,      /* one call on hold               */
  BAT_EXT_ERROR_EXT_ERR_CALLTYPENOHOLD = 0x8,     /* hold call not supported for this type */
  BAT_EXT_ERROR_EXT_ERR_FDNCHECK = 0x9,           /* number not allowed by FDN      */
  BAT_EXT_ERROR_EXT_ERR_BDNCHECK = 0xa,           /* number not allowed by BDN      */
  BAT_EXT_ERROR_EXT_ERR_PARALLELUSSD = 0xb,       /* parallel USSD not supported    */
  BAT_EXT_ERROR_EXT_ERR_FAXMINSPEEDCOND = 0xc,    /* fax minimum speed condition    */
  BAT_EXT_ERROR_EXT_ERR_CMDDETAILSSAT = 0xd,      /* conflict with command details  */
  BAT_EXT_ERROR_EXT_ERR_ALSLOCK  = 0xe,           /* not allowed by ALS-Lock        */
  BAT_EXT_ERROR_EXT_ERR_IMEICHECK = 0xf,          /* IMEI illegal                   */
  BAT_EXT_ERROR_EXT_ERR_LCS_CMDNOTSUP = 0x10,     /* Command not supported          */
  BAT_EXT_ERROR_EXT_ERR_LCS_CMDNOTREC = 0x11,     /* Command not recognised/out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_CLPSCLIENTNOTREC = 0x12, /* LCS Client ID not recognised/out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_INTERVALNOTSUP = 0x13, /* Interval attribute out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_REPEATNOTSUP = 0x14,  /* Repeat attribute not supported/ out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_SENDREQTYNOTREC = 0x15, /* Send request type not recognised / out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_USCONFREQTYNOTREC = 0x16, /* User confirmation request type not recognised / out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_CLSRCLIENTIDNOTREC = 0x17, /* LCS Client ID not recognised/out of range */
  BAT_EXT_ERROR_EXT_ERR_LCS_CSCALLNUMNOTSUP = 0x18, /* Circuit switched call number out of range */
  BAT_EXT_ERROR_EXT_ERR_UNKNOWN  = 0x64           /* error unknown                  */
}T_BAT_VAL_plus_ext_error_err;
#endif

/*
 * Enum to value table VAL_plus_fap_pwd
 * CCDGEN:WriteEnum_Count==396
 */
#ifndef __T_BAT_VAL_plus_fap_pwd__
#define __T_BAT_VAL_plus_fap_pwd__
typedef enum
{
  BAT_FAP_PWD_DISABLE            = 0x0,           /* Disables PWD                   */
  BAT_FAP_PWD_ENABLE             = 0x1            /* Enables PWD                    */
}T_BAT_VAL_plus_fap_pwd;
#endif

/*
 * Enum to value table VAL_plus_fap_sep
 * CCDGEN:WriteEnum_Count==397
 */
#ifndef __T_BAT_VAL_plus_fap_sep__
#define __T_BAT_VAL_plus_fap_sep__
typedef enum
{
  BAT_FAP_SEP_DISABLE            = 0x0,           /* Disables SEP                   */
  BAT_FAP_SEP_ENABLE             = 0x1            /* Enables SEP                    */
}T_BAT_VAL_plus_fap_sep;
#endif

/*
 * Enum to value table VAL_plus_fap_sub
 * CCDGEN:WriteEnum_Count==398
 */
#ifndef __T_BAT_VAL_plus_fap_sub__
#define __T_BAT_VAL_plus_fap_sub__
typedef enum
{
  BAT_FAP_SUB_DISABLE            = 0x0,           /* Disables SUB                   */
  BAT_FAP_SUB_ENABLE             = 0x1            /* Enables SUB                    */
}T_BAT_VAL_plus_fap_sub;
#endif

/*
 * Enum to value table VAL_plus_fbo_value
 * CCDGEN:WriteEnum_Count==399
 */
#ifndef __T_BAT_VAL_plus_fbo_value__
#define __T_BAT_VAL_plus_fbo_value__
typedef enum
{
  BAT_FBO_VALUE_DIRCDIRBD        = 0x0,           /* Selects direct bit order for both Phase C and B/D data */
  BAT_FBO_VALUE_RVRCDIRBD        = 0x1,           /* Selects reversed bit order for Phase C and direct bit order for Phase B/D data */
  BAT_FBO_VALUE_DIRCRVRBD        = 0x2,           /* Selects direct bit order for Phase C and reversed bit order for Phase B/D data */
  BAT_FBO_VALUE_RVRCRVRBD        = 0x3            /* Selects reversed bit order for both Phase C and Phase B/D data */
}T_BAT_VAL_plus_fbo_value;
#endif

/*
 * Enum to value table VAL_plus_fbu_value
 * CCDGEN:WriteEnum_Count==400
 */
#ifndef __T_BAT_VAL_plus_fbu_value__
#define __T_BAT_VAL_plus_fbu_value__
typedef enum
{
  BAT_FBU_VALUE_DISABLE          = 0x0,           /* Disables HDLC frame reporting  */
  BAT_FBU_VALUE_ENABLE           = 0x1            /* Enables the DCE to report the contents of Phase B and Phase D HDLC frames to the DTE */
}T_BAT_VAL_plus_fbu_value;
#endif

/*
 * Enum to value table VAL_plus_fclass_n
 * CCDGEN:WriteEnum_Count==401
 */
#ifndef __T_BAT_VAL_plus_fclass_n__
#define __T_BAT_VAL_plus_fclass_n__
typedef enum
{
  BAT_FCLASS_MODE_DATA           = 0x0,           /* Data                           */
  BAT_FCLASS_MODE_FAX2           = 0x2,           /* Fax2                           */
  BAT_FCLASS_MODE_VOICE          = 0x8,           /* Voice                          */
  BAT_FCLASS_MODE_FAX20          = 0x14           /* Fax20                          */
}T_BAT_VAL_plus_fclass_n;
#endif

/*
 * Enum to value table VAL_plus_fcq_tq
 * CCDGEN:WriteEnum_Count==402
 */
#ifndef __T_BAT_VAL_plus_fcq_tq__
#define __T_BAT_VAL_plus_fcq_tq__
typedef enum
{
  BAT_FCQ_VALUE_CQCDISABLED      = 0x0,           /* CQCDisabled                    */
  BAT_FCQ_VALUE_CQCENABLED       = 0x1            /* CQCEnabled                     */
}T_BAT_VAL_plus_fcq_tq;
#endif

/*
 * Enum to value table VAL_plus_fcr_value
 * CCDGEN:WriteEnum_Count==403
 */
#ifndef __T_BAT_VAL_plus_fcr_value__
#define __T_BAT_VAL_plus_fcr_value__
typedef enum
{
  BAT_FCR_VALUE_NORCVCAP         = 0x0,           /* DCE will not receive message data */
  BAT_FCR_VALUE_RCVCAP           = 0x1            /* Indicates the DCE can receive message data */
}T_BAT_VAL_plus_fcr_value;
#endif

/*
 * Enum to value table VAL_plus_fea_value
 * CCDGEN:WriteEnum_Count==404
 */
#ifndef __T_BAT_VAL_plus_fea_value__
#define __T_BAT_VAL_plus_fea_value__
typedef enum
{
  BAT_FEA_VALUE_V0               = 0x0,           /* Determines that T.4 EOL patterns are bit aligned (as received). */
  BAT_FEA_VALUE_V1               = 0x1            /* Determines that the last received bits of T.4 EOL patterns are octet aligned by the DCE */
}T_BAT_VAL_plus_fea_value;
#endif

/*
 * Enum to value table VAL_plus_ffc_dfc
 * CCDGEN:WriteEnum_Count==405
 */
#ifndef __T_BAT_VAL_plus_ffc_dfc__
#define __T_BAT_VAL_plus_ffc_dfc__
typedef enum
{
  BAT_FFC_DFC_IGNORED            = 0x0,           /* Data format format codes ignored */
  BAT_FFC_DFC_ENABLED            = 0x1,           /* Data format checking enabled   */
  BAT_FFC_DFC_CONVERSION         = 0x2            /* Data format conversion enabled */
}T_BAT_VAL_plus_ffc_dfc;
#endif

/*
 * Enum to value table VAL_plus_ffc_lnc
 * CCDGEN:WriteEnum_Count==406
 */
#ifndef __T_BAT_VAL_plus_ffc_lnc__
#define __T_BAT_VAL_plus_ffc_lnc__
typedef enum
{
  BAT_FFC_LNC_IGNORED            = 0x0,           /* Page length format codes ignored */
  BAT_FFC_LNC_ENABLED            = 0x1,           /* Page length checking enabled   */
  BAT_FFC_LNC_CONVERSION1D       = 0x2,           /* Page length conversion enabled for 1-D data, */
  BAT_FFC_LNC_CONVERSION2D       = 0x3            /* Page length conversion enabled for 2-D data */
}T_BAT_VAL_plus_ffc_lnc;
#endif

/*
 * Enum to value table VAL_plus_ffc_vrc
 * CCDGEN:WriteEnum_Count==407
 */
#ifndef __T_BAT_VAL_plus_ffc_vrc__
#define __T_BAT_VAL_plus_ffc_vrc__
typedef enum
{
  BAT_FFC_VRC_IGNORED            = 0x0,           /* Vertical resolution format codes ignored */
  BAT_FFC_VRC_ENABLED            = 0x1,           /* Vertical resolution checking enabled */
  BAT_FFC_VRC_CONVERSION1D       = 0x2,           /* Vertical resolution conversion enabled for 1-D data */
  BAT_FFC_VRC_CONVERSION2D       = 0x3            /* Vertical resolution conversion enabled for 2-D data */
}T_BAT_VAL_plus_ffc_vrc;
#endif

/*
 * Enum to value table VAL_plus_ffc_wdc
 * CCDGEN:WriteEnum_Count==408
 */
#ifndef __T_BAT_VAL_plus_ffc_wdc__
#define __T_BAT_VAL_plus_ffc_wdc__
typedef enum
{
  BAT_FFC_WDC_IGNORED            = 0x0,           /* Page width format codes ignored */
  BAT_FFC_WDC_ENABLED            = 0x1,           /* Page width checking enabled    */
  BAT_FFC_WDC_CONVERSION         = 0x2            /* Page width conversion enabled  */
}T_BAT_VAL_plus_ffc_wdc;
#endif

/*
 * Enum to value table VAL_plus_fhs_status
 * CCDGEN:WriteEnum_Count==409
 */
#ifndef __T_BAT_VAL_plus_fhs_status__
#define __T_BAT_VAL_plus_fhs_status__
typedef enum
{
  BAT_FHS_STATUS_NORMEND         = 0x0,           /* NormEnd                        */
  BAT_FHS_STATUS_RINGDETECT      = 0x1,           /* RingDetect                     */
  BAT_FHS_STATUS_CALLABORT       = 0x2,           /* CallAbort                      */
  BAT_FHS_STATUS_NOLOOPCURR      = 0x3,           /* NoLoopCurr                     */
  BAT_FHS_STATUS_RINGBACKNOANS   = 0x4,           /* RingbackNoAns                  */
  BAT_FHS_STATUS_RINGBACKANS     = 0x5,           /* RingbackAns                    */
  BAT_FHS_STATUS_UNSPCPHAERR     = 0x10,          /* UnspcPhAErr                    */
  BAT_FHS_STATUS_NOANS           = 0x11,          /* NoAns                          */
  BAT_FHS_STATUS_UNSPCTXPHBERR   = 0x20,          /* UnspcTxPhBErr                  */
  BAT_FHS_STATUS_NOREMOTERXTX    = 0x21,          /* NoRemoteRxTx                   */
  BAT_FHS_STATUS_COMRECERRTX     = 0x22,          /* ComrecErrTx                    */
  BAT_FHS_STATUS_INVCOMRECCMD    = 0x23,          /* InvComrecCmd                   */
  BAT_FHS_STATUS_RSPRECERRTX     = 0x24,          /* RsprecErrTx                    */
  BAT_FHS_STATUS_DCSNORES        = 0x25,          /* DcsNoRes                       */
  BAT_FHS_STATUS_DISDTCRCVD      = 0x26,          /* DisDtcRcvd                     */
  BAT_FHS_STATUS_TRAINFAIL       = 0x27,          /* TrainFail                      */
  BAT_FHS_STATUS_INVRSPRECRES    = 0x28,          /* InvRsprecRes                   */
  BAT_FHS_STATUS_UNSPCTXPHCERR   = 0x40,          /* UnspcTxPhCErr                  */
  BAT_FHS_STATUS_UNSPCIMGFRMTERR = 0x41,          /* UnspcImgFrmtErr                */
  BAT_FHS_STATUS_IMGCNVERR       = 0x42,          /* ImgCnvErr                      */
  BAT_FHS_STATUS_DTEDCEDATAUNDRFLW = 0x43,        /* DteDceDataUndrflw              */
  BAT_FHS_STATUS_UNRECDATACMD    = 0x44,          /* UnrecDataCmd                   */
  BAT_FHS_STATUS_IMGERRLINELEN   = 0x45,          /* ImgErrLineLen                  */
  BAT_FHS_STATUS_IMGERRPAGELEN   = 0x46,          /* ImgErrPageLen                  */
  BAT_FHS_STATUS_IMGERRCMPRCODE  = 0x47,          /* ImgErrCmprCode                 */
  BAT_FHS_STATUS_UNSPCTXPHDERR   = 0x50,          /* UnspcTxPhDErr                  */
  BAT_FHS_STATUS_RSPRECERRD      = 0x51,          /* RsprecErrD                     */
  BAT_FHS_STATUS_NOMPSRES        = 0x52,          /* NoMpsRes                       */
  BAT_FHS_STATUS_INVMPSRES       = 0x53,          /* InvMpsRes                      */
  BAT_FHS_STATUS_NOEOPRES        = 0x54,          /* NoEopRes                       */
  BAT_FHS_STATUS_INVEOPRES       = 0x55,          /* InvEopRes                      */
  BAT_FHS_STATUS_NOEOMRES        = 0x56,          /* NoEomRes                       */
  BAT_FHS_STATUS_INVEOMRES       = 0x57,          /* InvEomRes                      */
  BAT_FHS_STATUS_50PINPIP        = 0x58,          /* 50PinPip                       */
  BAT_FHS_STATUS_UNSPCRXPHBERR   = 0x70,          /* UnspcRxPhBErr                  */
  BAT_FHS_STATUS_RSPRECERRRX     = 0x71,          /* RsprecErrRx                    */
  BAT_FHS_STATUS_COMRECERRRX     = 0x72,          /* ComrecErrRx                    */
  BAT_FHS_STATUS_T30T2TIMEOUT    = 0x73,          /* T30T2Timeout                   */
  BAT_FHS_STATUS_T30T1TIMEOUT    = 0x74,          /* T30T1Timeout                   */
  BAT_FHS_STATUS_UNSPCRXPHCERR   = 0x90,          /* UnspcRxPhCErr                  */
  BAT_FHS_STATUS_MISSEOL         = 0x91,          /* MissEol                        */
  BAT_FHS_STATUS_BADCRCFRM       = 0x92,          /* BadCRCFrm                      */
  BAT_FHS_STATUS_DCEDTEBUFOVRFLW = 0x93,          /* DceDteBufOvrflw                */
  BAT_FHS_STATUS_UNSPCRXPHDERR   = 0xa0,          /* UnspcRxPhDErr                  */
  BAT_FHS_STATUS_RSPRECINVRES    = 0xa1,          /* RsprecInvRes                   */
  BAT_FHS_STATUS_COMRECINVRES    = 0xa2,          /* ComrecInvRes                   */
  BAT_FHS_STATUS_A0PINPIP        = 0xa3,          /* A0PinPip                       */
  BAT_FHS_STATUS_PHBSNDRSRVD1    = 0xe0,          /* PhBSndRsrvd1                   */
  BAT_FHS_STATUS_PHBSNDRSRVD2    = 0xe1,          /* PhBSndRsrvd2                   */
  BAT_FHS_STATUS_PHBSNDRSRVD3    = 0xe2,          /* PhBSndRsrvd3                   */
  BAT_FHS_STATUS_PHCSNDRSRVD1    = 0xe3,          /* PhCSndRsrvd1                   */
  BAT_FHS_STATUS_PHCSNDRSRVD2    = 0xe4,          /* PhCSndRsrvd2                   */
  BAT_FHS_STATUS_PHDSNDRSRVD1    = 0xe5,          /* PhDSndRsrvd1                   */
  BAT_FHS_STATUS_PHDSNDRSRVD2    = 0xe6,          /* PhDSndRsrvd2                   */
  BAT_FHS_STATUS_PHDSNDRSRVD3    = 0xe7,          /* PhDSndRsrvd3                   */
  BAT_FHS_STATUS_PHBRCVNORESP    = 0xe8,          /* PhBRcvNoResp                   */
  BAT_FHS_STATUS_PHBRCVINVRESP   = 0xe9,          /* PhBRcvInvResp                  */
  BAT_FHS_STATUS_PHBRCVRSRVD3    = 0xea,          /* PhBRcvRsrvd3                   */
  BAT_FHS_STATUS_PHCRCVRSRVD1    = 0xeb,          /* PhCRcvRsrvd1                   */
  BAT_FHS_STATUS_PHCRCVRSRVD2    = 0xec,          /* PhCRcvRsrvd2                   */
  BAT_FHS_STATUS_PHDRCVNORESP    = 0xed,          /* PhDRcvNoResp                   */
  BAT_FHS_STATUS_PHDRCVINVRESP   = 0xee,          /* PhDRcvInvResp                  */
  BAT_FHS_STATUS_PHDRCVRSRVD3    = 0xef,          /* PhDRcvRsrvd3                   */
  BAT_FHS_STATUS_SGNNOTALLWD     = 0xf0,          /* SgnNotAllwd                    */
  BAT_FHS_STATUS_FADRMTSTNERR    = 0xf1,          /* FADRmtStnErr                   */
  BAT_FHS_STATUS_FADLCLSTNERR    = 0xf2,          /* FADLclStnErr                   */
  BAT_FHS_STATUS_FADOWNERR       = 0xf3,          /* FADOwnErr                      */
  BAT_FHS_STATUS_FADGNRLER       = 0xf4           /* FADGnrlErr                     */
}T_BAT_VAL_plus_fhs_status;
#endif

/*
 * Enum to value table VAL_plus_fie_value
 * CCDGEN:WriteEnum_Count==410
 */
#ifndef __T_BAT_VAL_plus_fie_value__
#define __T_BAT_VAL_plus_fie_value__
typedef enum
{
  BAT_FIE_VALUE_IGNOREPRI        = 0x0,           /* PRI-Q reports will be replaced by non-PRI equivalents */
  BAT_FIE_VALUE_ACCEPTPRI        = 0x1            /* Procedure Interrupt Requests from the remote station are accepted */
}T_BAT_VAL_plus_fie_value;
#endif

/*
 * Enum to value table VAL_plus_fit_action
 * CCDGEN:WriteEnum_Count==411
 */
#ifndef __T_BAT_VAL_plus_fit_action__
#define __T_BAT_VAL_plus_fit_action__
typedef enum
{
  BAT_FIT_ACTION_ON_HOOK_RESET   = 0x0,           /* Go on hook then reset to +FCLASS=0 */
  BAT_FIT_ACTION_ON_HOOK         = 0x1            /* Go on hook (and do not reset)  */
}T_BAT_VAL_plus_fit_action;
#endif

/*
 * Enum to value table VAL_plus_flo_flo_c
 * CCDGEN:WriteEnum_Count==412
 */
#ifndef __T_BAT_VAL_plus_flo_flo_c__
#define __T_BAT_VAL_plus_flo_flo_c__
typedef enum
{
  BAT_FLO_CMD_NONE               = 0x0,           /* Turn off flow control          */
  BAT_FLO_CMD_SW                 = 0x1,           /* Select DC1/DC3 flow control    */
  BAT_FLO_CMD_HW                 = 0x2            /* Select CTS/RTS flow control    */
}T_BAT_VAL_plus_flo_flo_c;
#endif

/*
 * Enum to value table VAL_plus_flo_flo_q
 * CCDGEN:WriteEnum_Count==413
 */
#ifndef __T_BAT_VAL_plus_flo_flo_q__
#define __T_BAT_VAL_plus_flo_flo_q__
typedef enum
{
  BAT_FLO_RSP_NONE               = 0x0,           /* NO flow control                */
  BAT_FLO_RSP_SW                 = 0x1,           /* DC1/DC3 flow control           */
  BAT_FLO_RSP_HW                 = 0x2,           /* CTS/RTS flow control           */
  BAT_FLO_RSP_INV                = 0xff           /* invalid setting                */
}T_BAT_VAL_plus_flo_flo_q;
#endif

/*
 * Enum to value table VAL_plus_flp_value
 * CCDGEN:WriteEnum_Count==414
 */
#ifndef __T_BAT_VAL_plus_flp_value__
#define __T_BAT_VAL_plus_flp_value__
typedef enum
{
  BAT_FLP_DOC_NONE               = 0x0,           /* No document to poll, DIS bit 9 will be cleared and any received DTC frames will result in disconnection */
  BAT_FLP_DOC_READY              = 0x1            /* Document ready for polling, DIS bit 9 will be set and any received DTC frames will be accepted */
}T_BAT_VAL_plus_flp_value;
#endif

/*
 * Enum to value table VAL_plus_fms_value
 * CCDGEN:WriteEnum_Count==415
 */
#ifndef __T_BAT_VAL_plus_fms_value__
#define __T_BAT_VAL_plus_fms_value__
typedef enum
{
  BAT_FMS_BPS_2400               = 0x0,           /* 2400bps                        */
  BAT_FMS_BPS_4800               = 0x1,           /* 4800bps                        */
  BAT_FMS_BPS_7200               = 0x2,           /* 7200bps                        */
  BAT_FMS_BPS_9600               = 0x3,           /* 9600bps                        */
  BAT_FMS_BPS_12000              = 0x4,           /* 12000bps                       */
  BAT_FMS_BPS_14400              = 0x5            /* 14400bps                       */
}T_BAT_VAL_plus_fms_value;
#endif

/*
 * Enum to value table VAL_plus_fps_ppr
 * CCDGEN:WriteEnum_Count==416
 */
#ifndef __T_BAT_VAL_plus_fps_ppr__
#define __T_BAT_VAL_plus_fps_ppr__
typedef enum
{
  BAT_FPS_PPR_MCF                = 0x0,           /* Page good                      */
  BAT_FPS_PPR_RTN                = 0x1,           /* Page bad, retrain requested    */
  BAT_FPS_PPR_RTP                = 0x2,           /* Page good, retrain requested   */
  BAT_FPS_PPR_PIN                = 0x3,           /* Page bad, interrupt requested  */
  BAT_FPS_PPR_PIP                = 0x4            /* Page good, interrupt requested */
}T_BAT_VAL_plus_fps_ppr;
#endif

/*
 * Enum to value table VAL_plus_fsp_poll
 * CCDGEN:WriteEnum_Count==417
 */
#ifndef __T_BAT_VAL_plus_fsp_poll__
#define __T_BAT_VAL_plus_fsp_poll__
typedef enum
{
  BAT_FSP_POLL_NOT_PRESENT       = -0x1,          /* This indicates that the value is omitted. */
  BAT_FSP_POLL_DISABLE           = 0x0,           /* Disable polling                */
  BAT_FSP_POLL_ENABLE            = 0x1            /* Enable polling                 */
}T_BAT_VAL_plus_fsp_poll;
#endif

/*
 * Enum to value table VAL_plus_ifc_by_ta
 * CCDGEN:WriteEnum_Count==418
 */
#ifndef __T_BAT_VAL_plus_ifc_by_ta__
#define __T_BAT_VAL_plus_ifc_by_ta__
typedef enum
{
  BAT_IFC_TX_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_IFC_TX_NONE                = 0x0,           /* No TX flow control             */
  BAT_IFC_TX_SW                  = 0x1,           /* Software flow control          */
  BAT_IFC_TX_HW                  = 0x2            /* Hardware flow control          */
}T_BAT_VAL_plus_ifc_by_ta;
#endif

/*
 * Enum to value table VAL_plus_ifc_by_te
 * CCDGEN:WriteEnum_Count==419
 */
#ifndef __T_BAT_VAL_plus_ifc_by_te__
#define __T_BAT_VAL_plus_ifc_by_te__
typedef enum
{
  BAT_IFC_RX_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_IFC_RX_NONE                = 0x0,           /* No RX flow control             */
  BAT_IFC_RX_SW                  = 0x1,           /* Software flow control          */
  BAT_IFC_RX_HW                  = 0x2            /* Hardware flow control          */
}T_BAT_VAL_plus_ifc_by_te;
#endif

/*
 * Enum to value table VAL_plus_ilrr_rate
 * CCDGEN:WriteEnum_Count==420
 */
#ifndef __T_BAT_VAL_plus_ilrr_rate__
#define __T_BAT_VAL_plus_ilrr_rate__
typedef enum
{
  BAT_ILRR_RATE_300              = 0x1,           /* 300bps                         */
  BAT_ILRR_RATE_1200             = 0x2,           /* 1200bps                        */
  BAT_ILRR_RATE_2400             = 0x3,           /* 2400bps                        */
  BAT_ILRR_RATE_4800             = 0x4,           /* 4800bps                        */
  BAT_ILRR_RATE_9600             = 0x5,           /* 9600bps                        */
  BAT_ILRR_RATE_14400            = 0x6,           /* 14400bps                       */
  BAT_ILRR_RATE_19200            = 0x7,           /* 19200bps                       */
  BAT_ILRR_RATE_38400            = 0x8,           /* 38400bps                       */
  BAT_ILRR_RATE_1                = 0xf            /* other rate                     */
}T_BAT_VAL_plus_ilrr_rate;
#endif

/*
 * Enum to value table VAL_plus_ipr_rate
 * CCDGEN:WriteEnum_Count==421
 */
#ifndef __T_BAT_VAL_plus_ipr_rate__
#define __T_BAT_VAL_plus_ipr_rate__
typedef enum
{
  BAT_IPR_RATE_AUTO              = 0x0,           /* Automatic rate detection       */
  BAT_IPR_RATE_75                = 0x1,           /* 75bps                          */
  BAT_IPR_RATE_150               = 0x2,           /* 150bps                         */
  BAT_IPR_RATE_300               = 0x3,           /* 300bps                         */
  BAT_IPR_RATE_600               = 0x4,           /* 600bps                         */
  BAT_IPR_RATE_1200              = 0x5,           /* 1200bps                        */
  BAT_IPR_RATE_2400              = 0x6,           /* 2400bps                        */
  BAT_IPR_RATE_4800              = 0x7,           /* 4800bps                        */
  BAT_IPR_RATE_7200              = 0x8,           /* 7200bps                        */
  BAT_IPR_RATE_9600              = 0x9,           /* 9600bps                        */
  BAT_IPR_RATE_14400             = 0xa,           /* 14400bps                       */
  BAT_IPR_RATE_19200             = 0xb,           /* 19200bps                       */
  BAT_IPR_RATE_28800             = 0xc,           /* 28800bps                       */
  BAT_IPR_RATE_33900             = 0xd,           /* 33900bps                       */
  BAT_IPR_RATE_38400             = 0xe,           /* 38400bps                       */
  BAT_IPR_RATE_57600             = 0xf,           /* 57600bps                       */
  BAT_IPR_RATE_115200            = 0x10,          /* 115200bps                      */
  BAT_IPR_RATE_203125            = 0x11,          /* 203125bps                      */
  BAT_IPR_RATE_406250            = 0x12,          /* 406250bps                      */
  BAT_IPR_RATE_812500            = 0x13           /* 812500bps                      */
}T_BAT_VAL_plus_ipr_rate;
#endif

/*
 * Enum to value table VAL_percent_pbcf_ldn
 * CCDGEN:WriteEnum_Count==422
 */
#ifndef __T_BAT_VAL_percent_pbcf_ldn__
#define __T_BAT_VAL_percent_pbcf_ldn__
typedef enum
{
  BAT_P_PBCF_LDN_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_PBCF_LDN_LDN_ENABLE      = 0x0,           /* Enable                         */
  BAT_P_PBCF_LDN_LDN_DISABLE     = 0x1            /* Disable                        */
}T_BAT_VAL_percent_pbcf_ldn;
#endif

/*
 * Enum to value table VAL_percent_pbcf_lmn
 * CCDGEN:WriteEnum_Count==423
 */
#ifndef __T_BAT_VAL_percent_pbcf_lmn__
#define __T_BAT_VAL_percent_pbcf_lmn__
typedef enum
{
  BAT_P_PBCF_LMN_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_PBCF_LMN_LMN_ENABLE      = 0x0,           /* Enable                         */
  BAT_P_PBCF_LMN_LMN_DISABLE     = 0x1            /* Disable                        */
}T_BAT_VAL_percent_pbcf_lmn;
#endif

/*
 * Enum to value table VAL_percent_pbcf_lrn
 * CCDGEN:WriteEnum_Count==424
 */
#ifndef __T_BAT_VAL_percent_pbcf_lrn__
#define __T_BAT_VAL_percent_pbcf_lrn__
typedef enum
{
  BAT_P_PBCF_LRN_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_PBCF_LRN_LRN_ENABLE      = 0x0,           /* Enable                         */
  BAT_P_PBCF_LRN_LRN_DISABLE     = 0x1            /* Disable                        */
}T_BAT_VAL_percent_pbcf_lrn;
#endif

/*
 * Enum to value table VAL_percent_ppp_authprot
 * CCDGEN:WriteEnum_Count==425
 */
#ifndef __T_BAT_VAL_percent_ppp_authprot__
#define __T_BAT_VAL_percent_ppp_authprot__
typedef enum
{
  BAT_P_PPP_PROT_NONE            = 0x0,           /* No authentication (ignore login and password) */
  BAT_P_PPP_PROT_PAP             = 0x1,           /* PAP                            */
  BAT_P_PPP_PROT_CHAP            = 0x2,           /* CHAP                           */
  BAT_P_PPP_PROT_AUTO            = 0x3            /* Automatic authentication       */
}T_BAT_VAL_percent_ppp_authprot;
#endif

/*
 * Enum to value table VAL_percent_ppp_conn_type
 * CCDGEN:WriteEnum_Count==426
 */
#ifndef __T_BAT_VAL_percent_ppp_conn_type__
#define __T_BAT_VAL_percent_ppp_conn_type__
typedef enum
{
  BAT_P_PPP_CONN_TYPE_NO_PPP     = 0x0,           /* Dont use PPP, application will connect directly to L2R */
  BAT_P_PPP_CONN_TYPE_PPP        = 0x1            /* Use PPP, application will be connected to PPP */
}T_BAT_VAL_percent_ppp_conn_type;
#endif

/*
 * Enum to value table VAL_percent_pvrf_ps1
 * CCDGEN:WriteEnum_Count==427
 */
#ifndef __T_BAT_VAL_percent_pvrf_ps1__
#define __T_BAT_VAL_percent_pvrf_ps1__
typedef enum
{
  BAT_P_PVRF_PS1_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_PVRF_PS1_NOT_REQUIRED    = 0x0,           /* PIN1 Not Required              */
  BAT_P_PVRF_PS1_REQUIRED        = 0x1            /* PIN1 Required                  */
}T_BAT_VAL_percent_pvrf_ps1;
#endif

/*
 * Enum to value table VAL_percent_pvrf_ps2
 * CCDGEN:WriteEnum_Count==428
 */
#ifndef __T_BAT_VAL_percent_pvrf_ps2__
#define __T_BAT_VAL_percent_pvrf_ps2__
typedef enum
{
  BAT_P_PVRF_PS2_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_PVRF_PS2_NOT_REQUIRED    = 0x0,           /* PIN2 Not Required              */
  BAT_P_PVRF_PS2_REQUIRED        = 0x1            /* PIN2 Required                  */
}T_BAT_VAL_percent_pvrf_ps2;
#endif

/*
 * Enum to value table VAL_percent_pvrf_type
 * CCDGEN:WriteEnum_Count==429
 */
#ifndef __T_BAT_VAL_percent_pvrf_type__
#define __T_BAT_VAL_percent_pvrf_type__
typedef enum
{
  BAT_P_PVRF_TYPE_PIN1           = 0x0,           /* PIN1                           */
  BAT_P_PVRF_TYPE_PIN2           = 0x1,           /* PIN2                           */
  BAT_P_PVRF_TYPE_PUK1           = 0x2,           /* PUK1                           */
  BAT_P_PVRF_TYPE_PUK2           = 0x3            /* PUK2                           */
}T_BAT_VAL_percent_pvrf_type;
#endif

/*
 * Enum to value table VAL_percent_rdl_mode
 * CCDGEN:WriteEnum_Count==430
 */
#ifndef __T_BAT_VAL_percent_rdl_mode__
#define __T_BAT_VAL_percent_rdl_mode__
typedef enum
{
  BAT_P_RDL_MODE_NOT_PRESENT     = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_RDL_MODE_OFF             = 0x0,           /* Automatic calling repeat is switched off. */
  BAT_P_RDL_MODE_ON              = 0x1            /* Automatic calling repeat is switched on. */
}T_BAT_VAL_percent_rdl_mode;
#endif

/*
 * Enum to value table VAL_percent_rdl_state
 * CCDGEN:WriteEnum_Count==431
 */
#ifndef __T_BAT_VAL_percent_rdl_state__
#define __T_BAT_VAL_percent_rdl_state__
typedef enum
{
  BAT_P_RDL_STATE_TIMER_STARTED  = 0x2,           /* Automatic calling repeat timer is started */
  BAT_P_RDL_STATE_AUTO_CALL      = 0x3,           /* Automatic call is started      */
  BAT_P_RDL_STATE_CALL_FAIL      = 0x4,           /* Call attempt fails             */
  BAT_P_RDL_STATE_CALL_SUCC      = 0x5,           /* Call attempt successful        */
  BAT_P_RDL_STATE_REDIAL_STOPPED = 0x6            /* Automatic calling repeat is stopped */
}T_BAT_VAL_percent_rdl_state;
#endif

/*
 * Enum to value table VAL_percent_rdlb_mode
 * CCDGEN:WriteEnum_Count==432
 */
#ifndef __T_BAT_VAL_percent_rdlb_mode__
#define __T_BAT_VAL_percent_rdlb_mode__
typedef enum
{
  BAT_P_RDLB_MODE_NOT_PRESENT    = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_RDLB_MODE_DELETE         = 0x1            /* Deletes the Blacklist          */
}T_BAT_VAL_percent_rdlb_mode;
#endif

/*
 * Enum to value table VAL_percent_rdlb_state
 * CCDGEN:WriteEnum_Count==433
 */
#ifndef __T_BAT_VAL_percent_rdlb_state__
#define __T_BAT_VAL_percent_rdlb_state__
typedef enum
{
  BAT_P_RDLB_STATE_FULL          = 0x2,           /* Blacklist is full              */
  BAT_P_RDLB_STATE_ENTRY_BLACKLISTED = 0x3,       /* Phone number added to blacklist */
  BAT_P_RDLB_STATE_ENTRY_IN_BLACKLIST = 0x4       /* Phone number is blacklisted    */
}T_BAT_VAL_percent_rdlb_state;
#endif

/*
 * Enum to value table VAL_percent_satcc_mode
 * CCDGEN:WriteEnum_Count==434
 */
#ifndef __T_BAT_VAL_percent_satcc_mode__
#define __T_BAT_VAL_percent_satcc_mode__
typedef enum
{
  BAT_P_SATCC_MODE_INACTIVE      = 0x0,           /* Control by SIM inactive        */
  BAT_P_SATCC_MODE_ACTIVE        = 0x1            /* Control by SIM active          */
}T_BAT_VAL_percent_satcc_mode;
#endif

/*
 * Enum to value table VAL_percent_satt_cs
 * CCDGEN:WriteEnum_Count==435
 */
#ifndef __T_BAT_VAL_percent_satt_cs__
#define __T_BAT_VAL_percent_satt_cs__
typedef enum
{
  BAT_P_SATT_CS_NOT_PRESENT      = -0x1,          /* This indicates that the value is omitted. */
  BAT_P_SATT_CS_USER_REDIAL_STOP = 0x0,           /* User redial stop               */
  BAT_P_SATT_CS_END_REDIAL       = 0x1,           /* End redial                     */
  BAT_P_SATT_CS_END_SESSION      = 0x2            /* End session                    */
}T_BAT_VAL_percent_satt_cs;
#endif

/*
 * Enum to value table VAL_percent_simins_n
 * CCDGEN:WriteEnum_Count==436
 */
#ifndef __T_BAT_VAL_percent_simins_n__
#define __T_BAT_VAL_percent_simins_n__
typedef enum
{
  BAT_P_SIMINS_N_NO_PIN          = 0xff,          /* No PIN required                */
  BAT_P_SIMINS_N_SIM_PIN         = 0xb,           /* SIM PIN required               */
  BAT_P_SIMINS_N_SIM_PUK         = 0xc,           /* SIM PUK required               */
  BAT_P_SIMINS_N_SIM_FAIL        = 0xd,           /* SIM failure                    */
  BAT_P_SIMINS_N_SIM_BUSY        = 0xe,           /* SIM busy                       */
  BAT_P_SIMINS_N_SIM_WRONG       = 0xf,           /* SIM wrong (in case of a blocked SIM due to 10 unsuccessful PUK unblock attempts) */
  BAT_P_SIMINS_N_UNKNOWN         = 0x64,          /* Unknown                        */
  BAT_P_SIMINS_N_SIM_RESET_NEEDED = 0x204         /* SIM card reinserted,hence reset needed */
}T_BAT_VAL_percent_simins_n;
#endif

/*
 * Enum to value table VAL_percent_simrem_m
 * CCDGEN:WriteEnum_Count==437
 */
#ifndef __T_BAT_VAL_percent_simrem_m__
#define __T_BAT_VAL_percent_simrem_m__
typedef enum
{
  BAT_P_SIMREM_TYPE_RESET        = 0x0,           /* Indication of deregistration by going into low power / minimum functionality mode */
  BAT_P_SIMREM_TYPE_FAILURE      = 0x1,           /* Indication that the SIM has been removed */
  BAT_P_SIMREM_TYPE_RETRY        = 0x2            /* Temporary failure              */
}T_BAT_VAL_percent_simrem_m;
#endif

/*
 * Enum to value table VAL_percent_sncnt_rst
 * CCDGEN:WriteEnum_Count==438
 */
#ifndef __T_BAT_VAL_percent_sncnt_rst__
#define __T_BAT_VAL_percent_sncnt_rst__
typedef enum
{
  BAT_P_SNCNT_RESET_RESET        = 0x0            /* Resets the Counter             */
}T_BAT_VAL_percent_sncnt_rst;
#endif

/*
 * Enum to value table VAL_percent_vts_mode
 * CCDGEN:WriteEnum_Count==439
 */
#ifndef __T_BAT_VAL_percent_vts_mode__
#define __T_BAT_VAL_percent_vts_mode__
typedef enum
{
  BAT_P_VTS_MODE_STOP            = 0x0,           /* Stop sending DTMF              */
  BAT_P_VTS_MODE_START           = 0x1,           /* Start sending DTMF             */
  BAT_P_VTS_MODE_AUTO            = 0x2            /* Automatic mode                 */
}T_BAT_VAL_percent_vts_mode;
#endif

/*
 * Enum to value table VAL_plus_ws46_n
 * CCDGEN:WriteEnum_Count==440
 */
#ifndef __T_BAT_VAL_plus_ws46_n__
#define __T_BAT_VAL_plus_ws46_n__
typedef enum
{
  BAT_WS46_N_NOT_PRESENT         = -0x1,          /* This indicates that the value is omitted. */
  BAT_WS46_N_GSM                 = 0xc            /* GSM                            */
}T_BAT_VAL_plus_ws46_n;
#endif

/*
 * Value constants for VAL_bat_dummy
 */
#define BAT_DUMMY                      (0x0)      /* dummy value                    */

/*
 * Value constants for VAL_delete_status
 */
#define BAT_CMGD_DEL_INDEX             (0x0)      /* Delete the messages specified by the index. */
#define BAT_CMGD_DEL_READ              (0x1)      /* Ignore the index and delete all the read messages. */
#define BAT_CMGD_DEL_READ_SENT         (0x2)      /* Ignore the index and delete all the read and sent messages. */
#define BAT_CMGD_DEL_READ_SENT_UNSENT  (0x3)      /* Ignore the index and delete all the read, send and unsent messages. */
#define BAT_CMGD_DEL_ALL               (0x4)      /* Ignore the index and delete all the messages whatever be  the status. */

/*
 * Enum to value table VAL_percent_ctzv_mode
 * CCDGEN:WriteEnum_Count==441
 */
#ifndef __T_BAT_VAL_percent_ctzv_mode__
#define __T_BAT_VAL_percent_ctzv_mode__
typedef enum
{
  BAT_P_CTZV_MODE_OFF            = 0x0,           /* time and date report off       */
  BAT_P_CTZV_MODE_ON             = 0x1            /* time and date report on        */
}T_BAT_VAL_percent_ctzv_mode;
#endif

// VALTAB-FF: REL99 
// 
// Enum to value table VAL_percent_cmgrs_mode 
// CCDGEN:WriteEnum_Count==442
// 
// #ifndef __T_BAT_VAL_percent_cmgrs_mode__
// #define __T_BAT_VAL_percent_cmgrs_mode__
// typedef enum
// {
// VAL-FF: REL99  
//   BAT_CMGRS_MODE_NotPresent      = -0x1,          /* Mode not present               */
// VAL-FF: REL99  
//   BAT_CMGRS_MODE_DISABLE_AUTO_RETRANS = 0x0,      /* Disable auto retransmission    */
// VAL-FF: REL99  
//   BAT_CMGRS_MODE_ENABLE_AUTO_RETRANS = 0x1,       /* Enable auto retransmission     */
// VAL-FF: REL99  
//   BAT_CMGRS_MODE_MANUAL_RETRANS  = 0x2            /* Manual mode for retransmission */
// }T_BAT_VAL_percent_cmgrs_mode;
// #endif

/*
 * Enum to value table VAL_percent_creg_rt
 * CCDGEN:WriteEnum_Count==443
 */
#ifndef __T_BAT_VAL_percent_creg_rt__
#define __T_BAT_VAL_percent_creg_rt__
typedef enum
{
  BAT_RT_GSM                     = 0x0,           /* GSM                            */
  BAT_RT_GPRS                    = 0x1,           /* GSM/GPRS                       */
  BAT_RT_EDGE                    = 0x2,           /* GSM/GPRS/EDGE                  */
  BAT_RT_UMTS_FDD                = 0x3            /* UMTS FDD                       */
}T_BAT_VAL_percent_creg_rt;
#endif

/*
 * Enum to value table VAL_plus_cgdcont_cntrl_ip_address
 * CCDGEN:WriteEnum_Count==444
 */
#ifndef __T_BAT_VAL_plus_cgdcont_cntrl_ip_address__
#define __T_BAT_VAL_plus_cgdcont_cntrl_ip_address__
typedef enum
{
  BAT_NAS_is_ip_not_present      = -0x1,          /* Nto a valid ip format          */
  BAT_NAS_is_ipv4                = 0x0,           /* IPV4 format                    */
  BAT_NAS_is_ipv6                = 0x1            /* IPV6 format                    */
}T_BAT_VAL_plus_cgdcont_cntrl_ip_address;
#endif

// VALTAB-FF: REL99 
// 
// Enum to value table VAL_plus_cgtft_ctrl_tft_pf_entry 
// CCDGEN:WriteEnum_Count==445
// 
// #ifndef __T_BAT_VAL_plus_cgtft_ctrl_tft_pf_entry__
// #define __T_BAT_VAL_plus_cgtft_ctrl_tft_pf_entry__
// typedef enum
// {
// VAL-FF: REL99  
//   BAT_NAS_is_tft_pf_not_present  = -0x1,          /* TFT pf not present             */
// VAL-FF: REL99  
//   BAT_NAS_is_tft_pf_ipv4         = 0x0,           /* IPV4                           */
// VAL-FF: REL99  
//   BAT_NAS_is_tft_pf_ipv6         = 0x1            /* IPV6                           */
// }T_BAT_VAL_plus_cgtft_ctrl_tft_pf_entry;
// #endif

// VALTAB-FF: SIM_PERS 
// 
// Enum to value table VAL_percent_mepd_sup_info 
// CCDGEN:WriteEnum_Count==446
// 
// #ifndef __T_BAT_VAL_percent_mepd_sup_info__
// #define __T_BAT_VAL_percent_mepd_sup_info__
// typedef enum
// {
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_MAX                 = 0x0,           /* Max value of Failure counter   */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_ALE                 = 0x1,           /* Current value of failure counter */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_RFM                 = 0x2,           /* Failure counter RESET fail max value */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_RFA                 = 0x3,           /* Failure counter RESET fail current value */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_RSM                 = 0x4,           /* Failure counter RESET success value */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_RSA                 = 0x5,           /* Failure counter RESET success current value */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_TMF                 = 0x6,           /* TIMER flag                     */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_ETF                 = 0x7,           /* ETSI flag                      */
// VAL-FF: SIM_PERS  
//   BAT_P_MEPD_AIF                 = 0x8            /* AIRTEL flag                    */
// }T_BAT_VAL_percent_mepd_sup_info;
// #endif

/*
 * Enum to value table VAL_percent_csq_mode
 * CCDGEN:WriteEnum_Count==447
 */
#ifndef __T_BAT_VAL_percent_csq_mode__
#define __T_BAT_VAL_percent_csq_mode__
typedef enum
{
  BAT_P_CSQ_DISABLE              = 0x0,           /* Value for Disabling CSQ        */
  BAT_P_CSQ_ENABLE               = 0x1            /* Value for Disabling CSQ        */
}T_BAT_VAL_percent_csq_mode;
#endif

/*
 * Enum to value table VAL_percent_cuscfg_mod
 * CCDGEN:WriteEnum_Count==448
 */
#ifndef __T_BAT_VAL_percent_cuscfg_mod__
#define __T_BAT_VAL_percent_cuscfg_mod__
typedef enum
{
  BAT_P_CUSCFG_MOD_Not_Present   = -0x1,          /* Value for %CUSCFG mode         */
  BAT_P_CUSCFG_MOD_Disable       = 0x0,           /* Value for %CUSCFG mode         */
  BAT_P_CUSCFG_MOD_Enable        = 0x1,           /* Value for %CUSCFG mode         */
  BAT_P_CUSCFG_MOD_Query         = 0x2            /* Value for %CUSCFG mode         */
}T_BAT_VAL_percent_cuscfg_mod;
#endif

/*
 * Enum to value table VAL_percent_cuscfg_stat
 * CCDGEN:WriteEnum_Count==449
 */
#ifndef __T_BAT_VAL_percent_cuscfg_stat__
#define __T_BAT_VAL_percent_cuscfg_stat__
typedef enum
{
  BAT_P_CUSCFG_STAT_Not_present  = -0x1,          /* Value for %CUSCFG status       */
  BAT_P_CUSCFG_STAT_Disabled     = 0x0,           /* Value for %CUSCFG status       */
  BAT_P_CUSCFG_STAT_Enabled      = 0x1            /* Value for %CUSCFG status       */
}T_BAT_VAL_percent_cuscfg_stat;
#endif

/*
 * Enum to value table VAL_percent_cniv_mode
 * CCDGEN:WriteEnum_Count==450
 */
#ifndef __T_BAT_VAL_percent_cniv_mode__
#define __T_BAT_VAL_percent_cniv_mode__
typedef enum
{
  BAT_CNIV_MODE_OFF              = 0x0,           /* network name report off        */
  BAT_CNIV_MODE_ON               = 0x1            /* network name report on         */
}T_BAT_VAL_percent_cniv_mode;
#endif

/*
 * Enum to value table VAL_percent_pbci_mode
 * CCDGEN:WriteEnum_Count==451
 */
#ifndef __T_BAT_VAL_percent_pbci_mode__
#define __T_BAT_VAL_percent_pbci_mode__
typedef enum
{
  BAT_PBCI_MODE_NOT_PRESENT      = -0x1,          /* Phonebook Change Indication mode not present */
  BAT_PBCI_MODE_OFF              = 0x0,           /* Phonebook Change Indication off */
  BAT_PBCI_MODE_ON               = 0x1            /* Phonebook Change Indication on */
}T_BAT_VAL_percent_pbci_mode;
#endif

/*
 * Enum to value table VAL_percent_pbci_update_type
 * CCDGEN:WriteEnum_Count==452
 */
#ifndef __T_BAT_VAL_percent_pbci_update_type__
#define __T_BAT_VAL_percent_pbci_update_type__
typedef enum
{
  BAT_PHB_ENTRY_DELETED          = 0x0,           /* delete operation               */
  BAT_PHB_ENTRY_EDITED           = 0x1,           /* edit operation                 */
  BAT_PHB_ENTRY_ADDED            = 0x2            /* add operation                  */
}T_BAT_VAL_percent_pbci_update_type;
#endif

/* 
 * enum to UnionController params 
 * CCDGEN:WriteEnum_Count==453
 */
#ifndef __T_BAT_ctrl_params__
#define __T_BAT_ctrl_params__
typedef enum
{
  BAT_CMD_SET_PERCENT_ALS        = 0x0,           
  BAT_CMD_SET_PERCENT_BAND       = 0x1,           
  BAT_CMD_ANDC                   = 0x2,           
  BAT_CMD_SET_PLUS_CACM          = 0x3,           
  BAT_CMD_SET_PLUS_CAMM          = 0x4,           
  BAT_CMD_SET_PLUS_CAOC          = 0x5,           
  BAT_CMD_SET_PERCENT_CBHZ       = 0x6,           
  BAT_CMD_SET_PLUS_CBST          = 0x7,           
  BAT_CMD_SET_PERCENT_CCBS       = 0x8,           
  BAT_CMD_SET_PLUS_CCFC          = 0x9,           
  BAT_CMD_SET_PLUS_CCLK          = 0xa,           
  BAT_CMD_SET_PLUS_CCUG          = 0xb,           
  BAT_CMD_SET_PLUS_CCWA          = 0xc,           
  BAT_CMD_SET_PLUS_CCWA_W        = 0xd,           
  BAT_CMD_SET_PLUS_CFUN          = 0xe,           
  BAT_CMD_SET_PERCENT_CGAATT     = 0xf,           
  BAT_CMD_SET_PLUS_CGACT         = 0x10,          
  BAT_CMD_SET_PLUS_CGANS         = 0x11,          
  BAT_CMD_SET_PLUS_CGATT         = 0x12,          
  BAT_CMD_SET_PERCENT_CGCLASS    = 0x13,          
  BAT_CMD_SET_PLUS_CGCLASS       = 0x14,          
  BAT_CMD_SET_PLUS_CGDATA        = 0x15,          
  BAT_CMD_SET_PLUS_CGDCONT       = 0x16,          
  BAT_CMD_SET_PERCENT_CGMM       = 0x17,          
  BAT_CMD_SET_PLUS_CGPADDR       = 0x18,          
  BAT_CMD_SET_PERCENT_CGPCO      = 0x19,          
  BAT_CMD_SET_PERCENT_CGPPP      = 0x1a,          
  BAT_CMD_SET_PLUS_CGQMIN        = 0x1b,          
  BAT_CMD_SET_PLUS_CGQREQ        = 0x1c,          
  BAT_CMD_SET_PLUS_CGSMS         = 0x1d,          
  BAT_CMD_SET_PERCENT_CHLD       = 0x1e,          
  BAT_CMD_SET_PERCENT_CHPL       = 0x1f,          
  BAT_CMD_SET_PERCENT_CHPL_W     = 0x20,          
  BAT_CMD_SET_PLUS_CIND          = 0x21,          
  BAT_CMD_SET_PLUS_CLAN          = 0x22,          
  BAT_CMD_SET_PLUS_CLCK          = 0x23,          
  BAT_CMD_SET_PLUS_CLIR          = 0x24,          
  BAT_CMD_SET_PLUS_CLVL          = 0x25,          
  BAT_CMD_SET_PLUS_CMER          = 0x26,          
  BAT_CMD_SET_PLUS_CMGC          = 0x27,          
  BAT_CMD_SET_PLUS_CMGD          = 0x28,          
  BAT_CMD_SET_PLUS_CMGL          = 0x29,          
  BAT_CMD_SET_PLUS_CMGL_W        = 0x2a,          
  BAT_CMD_SET_PLUS_CMGR          = 0x2b,          
  BAT_CMD_SET_PLUS_CMGR_W        = 0x2c,          
  BAT_CMD_SET_PLUS_CMGS          = 0x2d,          
  BAT_CMD_SET_PLUS_CMGW          = 0x2e,          
  BAT_CMD_SET_PLUS_CMOD          = 0x2f,          
  BAT_CMD_SET_PLUS_CMSS          = 0x30,          
  BAT_CMD_SET_PLUS_CMUT          = 0x31,          
  BAT_CMD_SET_PLUS_CMUX          = 0x32,          
  BAT_CMD_SET_PLUS_CNMA          = 0x33,          
  BAT_CMD_SET_PLUS_CNMI          = 0x34,          
  BAT_CMD_SET_PERCENT_COPS       = 0x35,          
  BAT_CMD_SET_PLUS_COPS          = 0x36,          
  BAT_CMD_SET_PERCENT_COPS_W     = 0x37,          
  BAT_CMD_SET_PERCENT_CPALS      = 0x38,          
  BAT_CMD_SET_PERCENT_CPALS_W    = 0x39,          
  BAT_CMD_SET_PLUS_CPBF          = 0x3a,          
  BAT_CMD_SET_PLUS_CPBF_W        = 0x3b,          
  BAT_CMD_SET_PLUS_CPBR          = 0x3c,          
  BAT_CMD_SET_PLUS_CPBR_W        = 0x3d,          
  BAT_CMD_SET_PLUS_CPBS          = 0x3e,          
  BAT_CMD_SET_PLUS_CPBW          = 0x3f,          
  BAT_CMD_SET_PLUS_CPBW_W        = 0x40,          
  BAT_CMD_SET_PERCENT_CPCFU      = 0x41,          
  BAT_CMD_SET_PERCENT_CPHS       = 0x42,          
  BAT_CMD_SET_PLUS_CPIN          = 0x43,          
  BAT_CMD_SET_PERCENT_CPMB       = 0x44,          
  BAT_CMD_SET_PERCENT_CPMBW      = 0x45,          
  BAT_CMD_SET_PERCENT_CPMBW_W    = 0x46,          
  BAT_CMD_SET_PERCENT_CPMB_W     = 0x47,          
  BAT_CMD_SET_PLUS_CPMS          = 0x48,          
  BAT_CMD_SET_PERCENT_CPNUMS     = 0x49,          
  BAT_CMD_SET_PERCENT_CPNUMS_W   = 0x4a,          
  BAT_CMD_SET_PLUS_CPOL          = 0x4b,          
  BAT_CMD_SET_PLUS_CPOL_W        = 0x4c,          
  BAT_CMD_SET_PERCENT_CPRSM      = 0x4d,          
  BAT_CMD_SET_PLUS_CPUC          = 0x4e,          
  BAT_CMD_SET_PLUS_CPUC_W        = 0x4f,          
  BAT_CMD_SET_PERCENT_CPVWI      = 0x50,          
  BAT_CMD_SET_PLUS_CPWD          = 0x51,          
  BAT_CMD_SET_PLUS_CRES          = 0x52,          
  BAT_CMD_SET_PLUS_CRLP          = 0x53,          
  BAT_CMD_SET_PLUS_CRSM          = 0x54,          
  BAT_CMD_SET_PLUS_CSAS          = 0x55,          
  BAT_CMD_SET_PLUS_CSCA          = 0x56,          
  BAT_CMD_SET_PLUS_CSCB          = 0x57,          
  BAT_CMD_SET_PLUS_CSCS          = 0x58,          
  BAT_CMD_SET_PLUS_CSIM          = 0x59,          
  BAT_CMD_SET_PLUS_CSMS          = 0x5a,          
  BAT_CMD_SET_PLUS_CSNS          = 0x5b,          
  BAT_CMD_SET_PLUS_CSTA          = 0x5c,          
  BAT_CMD_SET_PLUS_CSVM          = 0x5d,          
  BAT_CMD_SET_PLUS_CTFR          = 0x5e,          
  BAT_CMD_SET_PERCENT_CTTY       = 0x5f,          
  BAT_CMD_SET_PLUS_CTZU          = 0x60,          
  BAT_CMD_SET_PLUS_CUSD          = 0x61,          
  BAT_CMD_SET_PLUS_CUSD_W        = 0x62,          
  BAT_CMD_SET_PERCENT_CUST       = 0x63,          
  BAT_CMD_SET_PERCENT_CWUP       = 0x64,          
  BAT_CMD_AT_D                   = 0x65,          
  BAT_CMD_SET_PERCENT_DATA       = 0x66,          
  BAT_CMD_SET_PERCENT_DINF       = 0x67,          
  BAT_CMD_SET_PLUS_DS            = 0x68,          
  BAT_CMD_AT_D_W                 = 0x69,          
  BAT_CMD_SET_PERCENT_EFRSLT     = 0x6a,          
  BAT_CMD_SET_PERCENT_EM         = 0x6b,          
  BAT_CMD_SET_PLUS_FAP           = 0x6c,          
  BAT_CMD_SET_PLUS_FBO           = 0x6d,          
  BAT_CMD_SET_PLUS_FBU           = 0x6e,          
  BAT_CMD_SET_PLUS_FCC           = 0x6f,          
  BAT_CMD_SET_PLUS_FCLASS        = 0x70,          
  BAT_CMD_SET_PLUS_FCQ           = 0x71,          
  BAT_CMD_SET_PLUS_FCR           = 0x72,          
  BAT_CMD_SET_PLUS_FCT           = 0x73,          
  BAT_CMD_SET_PLUS_FEA           = 0x74,          
  BAT_CMD_SET_PLUS_FFC           = 0x75,          
  BAT_CMD_SET_PLUS_FIE           = 0x76,          
  BAT_CMD_SET_PLUS_FIS           = 0x77,          
  BAT_CMD_SET_PLUS_FIT           = 0x78,          
  BAT_CMD_SET_PLUS_FLI           = 0x79,          
  BAT_CMD_SET_PLUS_FLO           = 0x7a,          
  BAT_CMD_SET_PLUS_FLP           = 0x7b,          
  BAT_CMD_SET_PLUS_FMS           = 0x7c,          
  BAT_CMD_SET_PLUS_FNS           = 0x7d,          
  BAT_CMD_SET_PLUS_FPA           = 0x7e,          
  BAT_CMD_SET_PLUS_FPI           = 0x7f,          
  BAT_CMD_SET_PLUS_FPS           = 0x80,          
  BAT_CMD_SET_PLUS_FPW           = 0x81,          
  BAT_CMD_SET_PLUS_FRQ           = 0x82,          
  BAT_CMD_SET_PLUS_FSA           = 0x83,          
  BAT_CMD_SET_PLUS_FSP           = 0x84,          
  BAT_CMD_SET_PLUS_ICF           = 0x85,          
  BAT_CMD_SET_PLUS_IFC           = 0x86,          
  BAT_CMD_SET_PLUS_IPR           = 0x87,          
  BAT_CMD_SET_PERCENT_PBCF       = 0x88,          
  BAT_CMD_SET_PERCENT_PPP        = 0x89,          
  BAT_CMD_SET_PERCENT_PVRF       = 0x8a,          
  BAT_CMD_SET_PERCENT_RDL        = 0x8b,          
  BAT_CMD_SET_PERCENT_RDLB       = 0x8c,          
  BAT_CMD_SET_PERCENT_SATC       = 0x8d,          
  BAT_CMD_SET_PERCENT_SATCC      = 0x8e,          
  BAT_CMD_SET_PERCENT_SATE       = 0x8f,          
  BAT_CMD_SET_PERCENT_SATR       = 0x90,          
  BAT_CMD_SET_PERCENT_SATT       = 0x91,          
  BAT_CMD_SET_PERCENT_SNCNT      = 0x92,          
  BAT_CMD_SET_PERCENT_VTS        = 0x93,          
  BAT_CMD_SET_PLUS_VTS           = 0x94,          
  BAT_CMD_SET_PLUS_WS46          = 0x95,          
  BAT_CMD_SET_PERCENT_CPINF      = 0x96,          
  BAT_CMD_SET_PERCENT_CMGR       = 0x97,          
  BAT_CMD_SET_PERCENT_CMGL       = 0x98,          
  BAT_CMD_SET_PERCENT_CTZV       = 0x99,          
// ELEM-FF: TI_PS_FF_AT_CMD_P_ECC 
//   BAT_CMD_SET_PERCENT_ECC        = 0x9a,          
// ELEM-FF: SIM_PERS 
//   BAT_CMD_SET_PERCENT_MEPD       = 0x9a,          
  BAT_CMD_SET_PERCENT_CSQ        = 0x9a,          
  BAT_CMD_SET_PERCENT_CNIV       = 0x9b,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PERCENT_CMGRS      = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGCMOD        = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGDSCONT      = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGEQREQ       = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGEQMIN       = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGEQNEG       = 0x9c,          
// ELEM-FF: REL99 
//   BAT_CMD_SET_PLUS_CGTFT         = 0x9c,          
  BAT_CMD_SET_PERCENT_CUSCFG     = 0x9c,          
  BAT_CMD_SET_PERCENT_PBCI       = 0x9d,          
  BAT_CMD_SET_PERCENT_SIMEF      = 0x9e,          
  BAT_CMD_AT_A                   = 0xff7,         
  BAT_CMD_SET_PLUS_CBC           = 0xff8,         
  BAT_CMD_SET_PLUS_CEER          = 0xff9,         
  BAT_CMD_SET_PLUS_CIMI          = 0xffa,         
  BAT_CMD_SET_PLUS_CNUM          = 0xffb,         
  BAT_CMD_SET_PLUS_CNUM_W        = 0xffc,         
  BAT_CMD_SET_PLUS_CPAS          = 0xffd,         
  BAT_CMD_SET_PLUS_CSQ           = 0xffe,         
  BAT_CMD_ANDF                   = 0xfff,         
  BAT_CMD_AT_H                   = 0x1000,        
  BAT_CMD_AT_O                   = 0x1001,        
  BAT_CMD_AT_Z                   = 0x1002,        
  BAT_CMD_QUE_PERCENT_ALS        = 0x1003,        
  BAT_CMD_TST_PERCENT_ALS        = 0x1004,        
  BAT_CMD_QUE_PERCENT_ATR        = 0x1005,        
  BAT_CMD_QUE_PERCENT_BAND       = 0x1006,        
  BAT_CMD_TST_PERCENT_BAND       = 0x1007,        
  BAT_CMD_QUE_PLUS_CACM          = 0x1008,        
  BAT_CMD_QUE_PLUS_CAMM          = 0x1009,        
  BAT_CMD_QUE_PERCENT_CBHZ       = 0x100a,        
  BAT_CMD_TST_PERCENT_CBHZ       = 0x100b,        
  BAT_CMD_QUE_PLUS_CBST          = 0x100c,        
  BAT_CMD_QUE_PERCENT_CCBS       = 0x100d,        
  BAT_CMD_QUE_PLUS_CCLK          = 0x100e,        
  BAT_CMD_QUE_PLUS_CCUG          = 0x100f,        
  BAT_CMD_QUE_PLUS_CFUN          = 0x1010,        
  BAT_CMD_QUE_PERCENT_CGAATT     = 0x1011,        
  BAT_CMD_QUE_PLUS_CGACT         = 0x1012,        
  BAT_CMD_QUE_PLUS_CGATT         = 0x1013,        
  BAT_CMD_QUE_PERCENT_CGCLASS    = 0x1014,        
  BAT_CMD_QUE_PLUS_CGCLASS       = 0x1015,        
  BAT_CMD_QUE_PLUS_CGDCONT       = 0x1016,        
  BAT_CMD_TST_PLUS_CGPADDR       = 0x1017,        
  BAT_CMD_QUE_PERCENT_CGPPP      = 0x1018,        
  BAT_CMD_QUE_PLUS_CGQMIN        = 0x1019,        
  BAT_CMD_QUE_PLUS_CGQREQ        = 0x101a,        
  BAT_CMD_QUE_PERCENT_CGREG      = 0x101b,        
  BAT_CMD_QUE_PLUS_CGREG         = 0x101c,        
  BAT_CMD_QUE_PLUS_CGSMS         = 0x101d,        
  BAT_CMD_QUE_PLUS_CIND          = 0x101e,        
  BAT_CMD_QUE_PLUS_CLAN          = 0x101f,        
  BAT_CMD_TST_PLUS_CLAN          = 0x1020,        
  BAT_CMD_QUE_PLUS_CLCC          = 0x1021,        
  BAT_CMD_QUE_PLUS_CLIP          = 0x1022,        
  BAT_CMD_QUE_PLUS_CLIP_W        = 0x1023,        
  BAT_CMD_QUE_PLUS_CLIR          = 0x1024,        
  BAT_CMD_QUE_PLUS_CLVL          = 0x1025,        
  BAT_CMD_QUE_PLUS_CMER          = 0x1026,        
  BAT_CMD_QUE_PLUS_CMOD          = 0x1027,        
  BAT_CMD_QUE_PLUS_CMUT          = 0x1028,        
  BAT_CMD_QUE_PLUS_CMUX          = 0x1029,        
  BAT_CMD_QUE_PERCENT_CNAP       = 0x102a,        
  BAT_CMD_QUE_PLUS_CNMI          = 0x102b,        
  BAT_CMD_QUE_PLUS_COLP          = 0x102c,        
  BAT_CMD_QUE_PLUS_COLP_W        = 0x102d,        
  BAT_CMD_QUE_PERCENT_COPS       = 0x102e,        
  BAT_CMD_TST_PERCENT_COPS       = 0x102f,        
  BAT_CMD_QUE_PLUS_COPS          = 0x1030,        
  BAT_CMD_TST_PLUS_COPS          = 0x1031,        
  BAT_CMD_QUE_PERCENT_COPS_W     = 0x1032,        
  BAT_CMD_TST_PERCENT_COPS_W     = 0x1033,        
  BAT_CMD_QUE_PERCENT_CPALS      = 0x1034,        
  BAT_CMD_QUE_PERCENT_CPALS_W    = 0x1035,        
  BAT_CMD_TST_PLUS_CPBF          = 0x1036,        
  BAT_CMD_TST_PLUS_CPBF_W        = 0x1037,        
  BAT_CMD_TST_PLUS_CPBR          = 0x1038,        
  BAT_CMD_TST_PLUS_CPBR_W        = 0x1039,        
  BAT_CMD_QUE_PERCENT_CPBS       = 0x103a,        
  BAT_CMD_QUE_PLUS_CPBS          = 0x103b,        
  BAT_CMD_TST_PLUS_CPBW          = 0x103c,        
  BAT_CMD_TST_PLUS_CPBW_W        = 0x103d,        
  BAT_CMD_QUE_PERCENT_CPHS       = 0x103e,        
  BAT_CMD_QUE_PLUS_CPIN          = 0x103f,        
  BAT_CMD_QUE_PERCENT_CPINF      = 0x1040,        
  BAT_CMD_QUE_PERCENT_CPMB       = 0x1041,        
  BAT_CMD_TST_PERCENT_CPMBW      = 0x1042,        
  BAT_CMD_TST_PERCENT_CPMBW_W    = 0x1043,        
  BAT_CMD_QUE_PLUS_CPMS          = 0x1044,        
  BAT_CMD_TST_PERCENT_CPNUMS     = 0x1045,        
  BAT_CMD_TST_PERCENT_CPNUMS_W   = 0x1046,        
  BAT_CMD_QUE_PLUS_CPOL          = 0x1047,        
  BAT_CMD_TST_PLUS_CPOL          = 0x1048,        
  BAT_CMD_QUE_PLUS_CPOL_W        = 0x1049,        
  BAT_CMD_TST_PLUS_CPOL_W        = 0x104a,        
  BAT_CMD_QUE_PERCENT_CPOPN      = 0x104b,        
  BAT_CMD_QUE_PERCENT_CPRSM      = 0x104c,        
  BAT_CMD_QUE_PLUS_CPUC          = 0x104d,        
  BAT_CMD_QUE_PLUS_CPUC_W        = 0x104e,        
  BAT_CMD_QUE_PERCENT_CREG       = 0x104f,        
  BAT_CMD_TST_PLUS_CRES          = 0x1050,        
  BAT_CMD_QUE_PLUS_CRLP          = 0x1051,        
  BAT_CMD_TST_PLUS_CSAS          = 0x1052,        
  BAT_CMD_QUE_PLUS_CSCA          = 0x1053,        
  BAT_CMD_QUE_PLUS_CSCB          = 0x1054,        
  BAT_CMD_QUE_PLUS_CSCS          = 0x1055,        
  BAT_CMD_QUE_PLUS_CSMS          = 0x1056,        
  BAT_CMD_QUE_PLUS_CSNS          = 0x1057,        
  BAT_CMD_QUE_PERCENT_CSQ        = 0x1058,        
  BAT_CMD_QUE_PLUS_CSTA          = 0x1059,        
  BAT_CMD_QUE_PLUS_CSVM          = 0x105a,        
  BAT_CMD_QUE_PERCENT_CTTY       = 0x105b,        
  BAT_CMD_QUE_PLUS_CTZU          = 0x105c,        
  BAT_CMD_QUE_PERCENT_CUST       = 0x105d,        
  BAT_CMD_QUE_PERCENT_DATA       = 0x105e,        
  BAT_CMD_QUE_PLUS_DS            = 0x105f,        
  BAT_CMD_QUE_PLUS_FAP           = 0x1060,        
  BAT_CMD_QUE_PLUS_FBO           = 0x1061,        
  BAT_CMD_QUE_PLUS_FBS           = 0x1062,        
  BAT_CMD_QUE_PLUS_FBU           = 0x1063,        
  BAT_CMD_QUE_PLUS_FCC           = 0x1064,        
  BAT_CMD_QUE_PLUS_FCLASS        = 0x1065,        
  BAT_CMD_QUE_PLUS_FCQ           = 0x1066,        
  BAT_CMD_QUE_PLUS_FCR           = 0x1067,        
  BAT_CMD_QUE_PLUS_FCS           = 0x1068,        
  BAT_CMD_QUE_PLUS_FCT           = 0x1069,        
  BAT_CMD_QUE_PLUS_FEA           = 0x106a,        
  BAT_CMD_QUE_PLUS_FFC           = 0x106b,        
  BAT_CMD_QUE_PLUS_FHS           = 0x106c,        
  BAT_CMD_QUE_PLUS_FIE           = 0x106d,        
  BAT_CMD_QUE_PLUS_FIS           = 0x106e,        
  BAT_CMD_QUE_PLUS_FIT           = 0x106f,        
  BAT_CMD_QUE_PLUS_FLI           = 0x1070,        
  BAT_CMD_QUE_PLUS_FLO           = 0x1071,        
  BAT_CMD_QUE_PLUS_FLP           = 0x1072,        
  BAT_CMD_QUE_PLUS_FMS           = 0x1073,        
  BAT_CMD_QUE_PLUS_FNS           = 0x1074,        
  BAT_CMD_QUE_PLUS_FPA           = 0x1075,        
  BAT_CMD_QUE_PLUS_FPI           = 0x1076,        
  BAT_CMD_QUE_PLUS_FPS           = 0x1077,        
  BAT_CMD_QUE_PLUS_FPW           = 0x1078,        
  BAT_CMD_QUE_PLUS_FRQ           = 0x1079,        
  BAT_CMD_QUE_PLUS_FSA           = 0x107a,        
  BAT_CMD_QUE_PLUS_FSP           = 0x107b,        
  BAT_CMD_QUE_PLUS_ICF           = 0x107c,        
  BAT_CMD_QUE_PLUS_IFC           = 0x107d,        
  BAT_CMD_QUE_PERCENT_IMEI       = 0x107e,        
  BAT_CMD_QUE_PLUS_IPR           = 0x107f,        
  BAT_CMD_QUE_PERCENT_PBCF       = 0x1080,        
  BAT_CMD_QUE_PERCENT_PPP        = 0x1081,        
  BAT_CMD_QUE_PERCENT_PVRF       = 0x1082,        
  BAT_CMD_QUE_PERCENT_RDL        = 0x1083,        
  BAT_CMD_QUE_PERCENT_RDLB       = 0x1084,        
  BAT_CMD_QUE_PERCENT_SATC       = 0x1085,        
  BAT_CMD_QUE_PERCENT_SATCC      = 0x1086,        
  BAT_CMD_QUE_PERCENT_SNCNT      = 0x1087,        
  BAT_CMD_QUE_PLUS_WS46          = 0x1088,        
  BAT_CMD_QUE_PLUS_CDIP          = 0x1089,        
  BAT_CMD_SET_PLUS_CGMI          = 0x108a,        
  BAT_CMD_SET_PLUS_CGMM          = 0x108b,        
  BAT_CMD_SET_PLUS_CGMR          = 0x108c,        
  BAT_CMD_SET_PLUS_CGSN          = 0x108d,        
  BAT_CMD_QUE_PERCENT_CNIV       = 0x108e,        
// ELEM-FF: REL99 
//   BAT_CMD_QUE_PERCENT_CMGRS      = 0x108f,        
  BAT_CMD_QUE_PERCENT_PBCI       = 0x108f,        
  BAT_CMD_QUE_PERCENT_SIMEF      = 0x1090,        
  BAT_CMD_SET_PLUS_CHUP          = 0x1091,        
  BAT_CMD_CUSTOM                 = 0x1ff6         
}T_BAT_ctrl_params;
#endif

/* 
 * enum to UnionController response 
 * CCDGEN:WriteEnum_Count==454
 */
#ifndef __T_BAT_ctrl_response__
#define __T_BAT_ctrl_response__
typedef enum
{
  BAT_RES_AT_OK                  = 0x0,           
  BAT_RES_AT_CONNECT             = 0x1,           
  BAT_RES_AT_NO_CARRIER_FINAL    = 0x2,           
  BAT_RES_PLUS_CME_ERROR         = 0x3,           
  BAT_RES_PLUS_CMS_ERROR         = 0x4,           
  BAT_RES_AT_BUSY                = 0x5,           
  BAT_RES_AT_CHANNEL_BUSY        = 0x6,           
  BAT_RES_AT_NO_ANSWER           = 0x7,           
  BAT_RES_PLUS_EXT_ERROR         = 0x8,           
  BAT_RES_QUE_PERCENT_ALS        = 0x9,           
  BAT_RES_TST_PERCENT_ALS        = 0xa,           
  BAT_RES_QUE_PERCENT_ATR        = 0xb,           
  BAT_RES_QUE_PERCENT_BAND       = 0xc,           
  BAT_RES_TST_PERCENT_BAND       = 0xd,           
  BAT_RES_QUE_PLUS_CACM          = 0xe,           
  BAT_RES_QUE_PLUS_CAMM          = 0xf,           
  BAT_RES_SET_PLUS_CAOC          = 0x10,          
  BAT_RES_SET_PLUS_CBC           = 0x11,          
  BAT_RES_QUE_PERCENT_CBHZ       = 0x12,          
  BAT_RES_TST_PERCENT_CBHZ       = 0x13,          
  BAT_RES_QUE_PLUS_CBST          = 0x14,          
  BAT_RES_QUE_PERCENT_CCBS       = 0x15,          
  BAT_RES_SET_PLUS_CCFC          = 0x16,          
  BAT_RES_QUE_PLUS_CCLK          = 0x17,          
  BAT_RES_QUE_PLUS_CCUG          = 0x18,          
  BAT_RES_SET_PLUS_CCWA          = 0x19,          
  BAT_RES_SET_PLUS_CCWA_W        = 0x1a,          
  BAT_RES_SET_PLUS_CEER          = 0x1b,          
  BAT_RES_QUE_PLUS_CFUN          = 0x1c,          
  BAT_RES_QUE_PERCENT_CGAATT     = 0x1d,          
  BAT_RES_QUE_PLUS_CGACT         = 0x1e,          
  BAT_RES_QUE_PLUS_CGATT         = 0x1f,          
  BAT_RES_QUE_PERCENT_CGCLASS    = 0x20,          
  BAT_RES_QUE_PLUS_CGCLASS       = 0x21,          
  BAT_RES_QUE_PLUS_CGDCONT       = 0x22,          
  BAT_RES_SET_PLUS_CGPADDR       = 0x23,          
  BAT_RES_TST_PLUS_CGPADDR       = 0x24,          
  BAT_RES_SET_PERCENT_CGPCO      = 0x25,          
  BAT_RES_QUE_PERCENT_CGPPP      = 0x26,          
  BAT_RES_QUE_PLUS_CGQMIN        = 0x27,          
  BAT_RES_QUE_PLUS_CGQREQ        = 0x28,          
  BAT_RES_QUE_PERCENT_CGREG      = 0x29,          
  BAT_RES_QUE_PLUS_CGREG         = 0x2a,          
  BAT_RES_QUE_PLUS_CGSMS         = 0x2b,          
  BAT_RES_SET_PERCENT_CHPL       = 0x2c,          
  BAT_RES_SET_PERCENT_CHPL_W     = 0x2d,          
  BAT_RES_SET_PLUS_CIMI          = 0x2e,          
  BAT_RES_QUE_PLUS_CIND          = 0x2f,          
  BAT_RES_QUE_PLUS_CLAN          = 0x30,          
  BAT_RES_TST_PLUS_CLAN          = 0x31,          
  BAT_RES_QUE_PLUS_CLCC          = 0x32,          
  BAT_RES_SET_PLUS_CLCK          = 0x33,          
  BAT_RES_QUE_PLUS_CLIP          = 0x34,          
  BAT_RES_QUE_PLUS_CLIP_W        = 0x35,          
  BAT_RES_QUE_PLUS_CLIR          = 0x36,          
  BAT_RES_SET_PLUS_CLVL          = 0x37,          
  BAT_RES_QUE_PLUS_CLVL          = 0x38,          
  BAT_RES_QUE_PLUS_CMER          = 0x39,          
  BAT_RES_SET_PLUS_CMGC          = 0x3a,          
  BAT_RES_SET_PLUS_CMGL          = 0x3b,          
  BAT_RES_SET_PLUS_CMGL_W        = 0x3c,          
  BAT_RES_SET_PLUS_CMGR          = 0x3d,          
  BAT_RES_SET_PLUS_CMGR_W        = 0x3e,          
  BAT_RES_SET_PLUS_CMGS          = 0x3f,          
  BAT_RES_SET_PLUS_CMGW          = 0x40,          
  BAT_RES_QUE_PLUS_CMOD          = 0x41,          
  BAT_RES_QUE_PLUS_CMUT          = 0x42,          
  BAT_RES_QUE_PLUS_CMUX          = 0x43,          
  BAT_RES_QUE_PERCENT_CNAP       = 0x44,          
  BAT_RES_QUE_PLUS_CNMI          = 0x45,          
  BAT_RES_SET_PLUS_CNUM          = 0x46,          
  BAT_RES_SET_PLUS_CNUM_W        = 0x47,          
  BAT_RES_QUE_PLUS_COLP          = 0x48,          
  BAT_RES_QUE_PLUS_COLP_W        = 0x49,          
  BAT_RES_QUE_PERCENT_COPS       = 0x4a,          
  BAT_RES_TST_PERCENT_COPS       = 0x4b,          
  BAT_RES_QUE_PLUS_COPS          = 0x4c,          
  BAT_RES_TST_PLUS_COPS          = 0x4d,          
  BAT_RES_QUE_PERCENT_COPS_W     = 0x4e,          
  BAT_RES_TST_PERCENT_COPS_W     = 0x4f,          
  BAT_RES_SET_PERCENT_CPALS      = 0x50,          
  BAT_RES_QUE_PERCENT_CPALS      = 0x51,          
  BAT_RES_SET_PERCENT_CPALS_W    = 0x52,          
  BAT_RES_QUE_PERCENT_CPALS_W    = 0x53,          
  BAT_RES_SET_PLUS_CPAS          = 0x54,          
  BAT_RES_SET_PLUS_CPBF          = 0x55,          
  BAT_RES_TST_PLUS_CPBF          = 0x56,          
  BAT_RES_SET_PLUS_CPBF_W        = 0x57,          
  BAT_RES_TST_PLUS_CPBF_W        = 0x58,          
  BAT_RES_SET_PLUS_CPBR          = 0x59,          
  BAT_RES_TST_PLUS_CPBR          = 0x5a,          
  BAT_RES_SET_PLUS_CPBR_W        = 0x5b,          
  BAT_RES_TST_PLUS_CPBR_W        = 0x5c,          
  BAT_RES_QUE_PERCENT_CPBS       = 0x5d,          
  BAT_RES_QUE_PLUS_CPBS          = 0x5e,          
  BAT_RES_TST_PLUS_CPBW          = 0x5f,          
  BAT_RES_TST_PLUS_CPBW_W        = 0x60,          
  BAT_RES_SET_PERCENT_CPCFU      = 0x61,          
  BAT_RES_QUE_PERCENT_CPHS       = 0x62,          
  BAT_RES_QUE_PLUS_CPIN          = 0x63,          
  BAT_RES_QUE_PERCENT_CPINF      = 0x64,          
  BAT_RES_SET_PERCENT_CPMB       = 0x65,          
  BAT_RES_QUE_PERCENT_CPMB       = 0x66,          
  BAT_RES_TST_PERCENT_CPMBW      = 0x67,          
  BAT_RES_TST_PERCENT_CPMBW_W    = 0x68,          
  BAT_RES_SET_PERCENT_CPMB_W     = 0x69,          
  BAT_RES_SET_PLUS_CPMS          = 0x6a,          
  BAT_RES_QUE_PLUS_CPMS          = 0x6b,          
  BAT_RES_SET_PERCENT_CPNUMS     = 0x6c,          
  BAT_RES_TST_PERCENT_CPNUMS     = 0x6d,          
  BAT_RES_SET_PERCENT_CPNUMS_W   = 0x6e,          
  BAT_RES_TST_PERCENT_CPNUMS_W   = 0x6f,          
  BAT_RES_QUE_PLUS_CPOL          = 0x70,          
  BAT_RES_TST_PLUS_CPOL          = 0x71,          
  BAT_RES_QUE_PLUS_CPOL_W        = 0x72,          
  BAT_RES_TST_PLUS_CPOL_W        = 0x73,          
  BAT_RES_QUE_PERCENT_CPOPN      = 0x74,          
  BAT_RES_QUE_PERCENT_CPRSM      = 0x75,          
  BAT_RES_QUE_PLUS_CPUC          = 0x76,          
  BAT_RES_QUE_PLUS_CPUC_W        = 0x77,          
  BAT_RES_SET_PERCENT_CPVWI      = 0x78,          
  BAT_RES_QUE_PERCENT_CREG       = 0x79,          
  BAT_RES_TST_PLUS_CRES          = 0x7a,          
  BAT_RES_QUE_PLUS_CRLP          = 0x7b,          
  BAT_RES_SET_PLUS_CRSM          = 0x7c,          
  BAT_RES_TST_PLUS_CSAS          = 0x7d,          
  BAT_RES_QUE_PLUS_CSCA          = 0x7e,          
  BAT_RES_QUE_PLUS_CSCB          = 0x7f,          
  BAT_RES_QUE_PLUS_CSCS          = 0x80,          
  BAT_RES_SET_PLUS_CSIM          = 0x81,          
  BAT_RES_QUE_PLUS_CSMS          = 0x82,          
  BAT_RES_QUE_PLUS_CSNS          = 0x83,          
  BAT_RES_QUE_PERCENT_CSQ        = 0x84,          
  BAT_RES_SET_PLUS_CSQ           = 0x85,          
  BAT_RES_QUE_PLUS_CSTA          = 0x86,          
  BAT_RES_QUE_PLUS_CSVM          = 0x87,          
  BAT_RES_QUE_PERCENT_CTTY       = 0x88,          
  BAT_RES_QUE_PLUS_CTZU          = 0x89,          
  BAT_RES_QUE_PERCENT_CUST       = 0x8a,          
  BAT_RES_QUE_PERCENT_DATA       = 0x8b,          
  BAT_RES_SET_PERCENT_DINF       = 0x8c,          
  BAT_RES_QUE_PLUS_DS            = 0x8d,          
  BAT_RES_QUE_PLUS_FAP           = 0x8e,          
  BAT_RES_QUE_PLUS_FBO           = 0x8f,          
  BAT_RES_QUE_PLUS_FBS           = 0x90,          
  BAT_RES_QUE_PLUS_FBU           = 0x91,          
  BAT_RES_QUE_PLUS_FCC           = 0x92,          
  BAT_RES_QUE_PLUS_FCLASS        = 0x93,          
  BAT_RES_QUE_PLUS_FCQ           = 0x94,          
  BAT_RES_QUE_PLUS_FCR           = 0x95,          
  BAT_RES_QUE_PLUS_FCS           = 0x96,          
  BAT_RES_QUE_PLUS_FCT           = 0x97,          
  BAT_RES_QUE_PLUS_FEA           = 0x98,          
  BAT_RES_QUE_PLUS_FFC           = 0x99,          
  BAT_RES_QUE_PLUS_FHS           = 0x9a,          
  BAT_RES_QUE_PLUS_FIE           = 0x9b,          
  BAT_RES_QUE_PLUS_FIS           = 0x9c,          
  BAT_RES_QUE_PLUS_FIT           = 0x9d,          
  BAT_RES_QUE_PLUS_FLI           = 0x9e,          
  BAT_RES_QUE_PLUS_FLO           = 0x9f,          
  BAT_RES_QUE_PLUS_FLP           = 0xa0,          
  BAT_RES_QUE_PLUS_FMS           = 0xa1,          
  BAT_RES_QUE_PLUS_FNS           = 0xa2,          
  BAT_RES_QUE_PLUS_FPA           = 0xa3,          
  BAT_RES_QUE_PLUS_FPI           = 0xa4,          
  BAT_RES_QUE_PLUS_FPS           = 0xa5,          
  BAT_RES_QUE_PLUS_FPW           = 0xa6,          
  BAT_RES_QUE_PLUS_FRQ           = 0xa7,          
  BAT_RES_QUE_PLUS_FSA           = 0xa8,          
  BAT_RES_QUE_PLUS_FSP           = 0xa9,          
  BAT_RES_QUE_PLUS_ICF           = 0xaa,          
  BAT_RES_QUE_PLUS_IFC           = 0xab,          
  BAT_RES_QUE_PERCENT_IMEI       = 0xac,          
  BAT_RES_QUE_PLUS_IPR           = 0xad,          
  BAT_RES_QUE_PERCENT_PBCF       = 0xae,          
  BAT_RES_QUE_PERCENT_PPP        = 0xaf,          
  BAT_RES_QUE_PERCENT_PVRF       = 0xb0,          
  BAT_RES_QUE_PERCENT_RDL        = 0xb1,          
  BAT_RES_QUE_PERCENT_RDLB       = 0xb2,          
  BAT_RES_QUE_PERCENT_SATC       = 0xb3,          
  BAT_RES_QUE_PERCENT_SATCC      = 0xb4,          
  BAT_RES_SET_PERCENT_SATE       = 0xb5,          
  BAT_RES_QUE_PLUS_WS46          = 0xb6,          
  BAT_RES_QUE_PLUS_CDIP          = 0xb7,          
  BAT_RES_SET_PERCENT_CMGR       = 0xb8,          
  BAT_RES_SET_PERCENT_CMGL       = 0xb9,          
  BAT_RES_SET_PLUS_CMSS          = 0xba,          
  BAT_RES_SET_PLUS_CGMI          = 0xbb,          
  BAT_RES_SET_PLUS_CGMM          = 0xbc,          
  BAT_RES_SET_PLUS_CGMR          = 0xbd,          
  BAT_RES_SET_PLUS_CGSN          = 0xbe,          
// ELEM-FF: SIM_PERS 
//   BAT_RES_SET_PERCENT_MEPD       = 0xbf,          
  BAT_RES_SET_PERCENT_CSQ        = 0xbf,          
  BAT_RES_QUE_PERCENT_CNIV       = 0xc0,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PERCENT_CMGRS      = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGCMOD        = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGDSCONT      = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGEQREQ       = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGEQMIN       = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGEQNEG       = 0xc1,          
// ELEM-FF: REL99 
//   BAT_RES_QUE_PLUS_CGTFT         = 0xc1,          
  BAT_RES_PERCENT_CUSCFG         = 0xc1,          
  BAT_RES_QUE_PERCENT_PBCI       = 0xc2,          
  BAT_RES_QUE_PERCENT_SIMEF      = 0xc3,          
  BAT_RES_UNS_AT_BUSY            = 0xff8,         
  BAT_RES_UNS_AT_NO_ANSWER       = 0xff9,         
  BAT_RES_UNS_PLUS_CBM           = 0xffa,         
  BAT_RES_UNS_PLUS_CBMI          = 0xffb,         
  BAT_RES_UNS_PERCENT_CCBS       = 0xffc,         
  BAT_RES_UNS_PLUS_CCCM          = 0xffd,         
  BAT_RES_UNS_PERCENT_CCCN       = 0xffe,         
  BAT_RES_UNS_PLUS_CCWA          = 0xfff,         
  BAT_RES_UNS_PLUS_CCWA_W        = 0x1000,        
  BAT_RES_UNS_PLUS_CCWE          = 0x1001,        
  BAT_RES_UNS_PLUS_CDIP          = 0x1002,        
  BAT_RES_UNS_PLUS_CDS           = 0x1003,        
  BAT_RES_UNS_PLUS_CCWV          = 0x1004,        
  BAT_RES_UNS_PERCENT_CGEV       = 0x1005,        
  BAT_RES_UNS_PLUS_CGEV          = 0x1006,        
  BAT_RES_UNS_PERCENT_CGREG      = 0x1007,        
  BAT_RES_UNS_PLUS_CGREG         = 0x1008,        
  BAT_RES_UNS_PLUS_CLAE          = 0x1009,        
  BAT_RES_UNS_PLUS_CLAV          = 0x100a,        
  BAT_RES_UNS_PLUS_CLIP          = 0x100b,        
  BAT_RES_UNS_PLUS_CLIP_W        = 0x100c,        
  BAT_RES_UNS_PLUS_CMT           = 0x100d,        
  BAT_RES_UNS_PLUS_CMTI          = 0x100e,        
  BAT_RES_UNS_PLUS_CMT_W         = 0x100f,        
  BAT_RES_UNS_PERCENT_CNAP       = 0x1010,        
  BAT_RES_UNS_PLUS_COLP          = 0x1011,        
  BAT_RES_UNS_PLUS_COLP_W        = 0x1012,        
  BAT_RES_UNS_PERCENT_CPI        = 0x1013,        
  BAT_RES_UNS_PERCENT_CPI_W      = 0x1014,        
  BAT_RES_UNS_PERCENT_CPRI       = 0x1015,        
  BAT_RES_UNS_PERCENT_CPROAM     = 0x1016,        
  BAT_RES_UNS_PERCENT_CPVWI      = 0x1017,        
  BAT_RES_UNS_PLUS_CR            = 0x1018,        
  BAT_RES_UNS_PERCENT_CREG       = 0x1019,        
  BAT_RES_UNS_PLUS_CRING         = 0x101a,        
  BAT_RES_UNS_PERCENT_CSQ        = 0x101b,        
  BAT_RES_UNS_PLUS_CSSI          = 0x101c,        
  BAT_RES_UNS_PERCENT_CSSN       = 0x101d,        
  BAT_RES_UNS_PLUS_CSSU          = 0x101e,        
  BAT_RES_UNS_PERCENT_CSTAT      = 0x101f,        
  BAT_RES_UNS_PERCENT_CTYI       = 0x1020,        
  BAT_RES_UNS_PLUS_CTZR          = 0x1021,        
  BAT_RES_UNS_PERCENT_CTZV       = 0x1022,        
  BAT_RES_UNS_PLUS_CTZV          = 0x1023,        
  BAT_RES_UNS_PERCENT_CTZV_W     = 0x1024,        
  BAT_RES_UNS_PLUS_CUSD          = 0x1025,        
  BAT_RES_UNS_PLUS_CUSD_W        = 0x1026,        
  BAT_RES_UNS_AT_NO_CARRIER      = 0x1027,        
  BAT_RES_UNS_PLUS_FHS           = 0x1028,        
  BAT_RES_UNS_PLUS_ILRR          = 0x1029,        
  BAT_RES_UNS_PERCENT_RDL        = 0x102a,        
  BAT_RES_UNS_PERCENT_RDLB       = 0x102b,        
  BAT_RES_UNS_PERCENT_SATA       = 0x102c,        
  BAT_RES_UNS_PERCENT_SATI       = 0x102d,        
  BAT_RES_UNS_PERCENT_SATN       = 0x102e,        
  BAT_RES_UNS_PERCENT_SIMEF      = 0x102f,        
  BAT_RES_UNS_PERCENT_SIMINS     = 0x1030,        
  BAT_RES_UNS_PERCENT_SIMREM     = 0x1031,        
  BAT_RES_UNS_PERCENT_SNCNT      = 0x1032,        
  BAT_RES_UNS_PERCENT_CNIV       = 0x1033,        
// ELEM-FF: REL99 
//   BAT_RES_UNS_PERCENT_CMGRS      = 0x1034,        
  BAT_RES_UNS_PERCENT_PBCI       = 0x1034,        
  BAT_RES_CUSTOM                 = 0x1ff7         
}T_BAT_ctrl_response;
#endif

/*
 * user defined constants
 */
#define BAT_PARAMETER_NOT_PRESENT      (0xffffffff)
#define BAT_MAX_PHB_NUM_LEN            (0x2c)     
#define BAT_MAX_APN_LEN                (0x66)     
#define BAT_MAX_PDP_ADD                (0x10)     
#define BAT_MAX_SM_LEN                 (0xb0)     
#define BAT_MAX_USSD_LEN               (0xb6)     
#define BAT_MAX_SUBADDR_LENGTH         (0x14)     
#define BAT_MAX_ATR_LEN                (0x21)     
#define BAT_MAX_CACM_PASSWD_LEN        (0x8)      
#define BAT_MAX_CAMM_PASSWD_LEN        (0x8)      
#define BAT_MAX_CCBS_NUMBER_LEN        (0x27)     
#define BAT_MAX_CCCN_FACILITY_LEN      (0xfb)     
#define BAT_MAX_CCFC_NUMBER_LEN        (0x27)     
#define BAT_MAX_CCWA_NUMBER_LEN        (0x20)     
#define BAT_MIN_PDP_CID                (0x1)      
#define BAT_MAX_PDP_CID                (0xb)      
#define BAT_MIN_TFT_PF_ID              (0x1)      
#define BAT_MAX_TFT_PF_ID              (0x8)      
#define BAT_MIN_TFT_PRECEDENCE         (0x0)      
#define BAT_MAX_TFT_PRECEDENCE         (0xff)     
#define BAT_MIN_TFT_PROT_NUM_OR_NXT_HDR (0x0)     
#define BAT_MAX_TFT_PROT_NUM_OR_NXT_HDR (0xff)    
#define BAT_MIN_TFT_FLOW_LABEL         (0x0)      
#define BAT_MAX_TFT_FLOW_LABEL         (0xfffff)  
#define BAT_MAX_TFT_PRM_LIST_LEN       (0xfe)     
#define BAT_MAX_CGANS_L2P_LEN          (0x6)      
#define BAT_MAX_CGDATA_L2P_LEN         (0x6)      
#define BAT_MAX_CGMI_MANUFACTURER_LEN  (0x11c)    
#define BAT_MAX_CGMM_MODEL_LEN         (0x11c)    
#define BAT_MAX_CGMR_REVISION_LEN      (0x11c)    
#define BAT_MAX_CGPCO_PCO_LEN          (0xfb)     
#define BAT_MAX_CGSN_SN_LEN            (0x11c)    
#define BAT_MAX_CHPL_OPER_LEN          (0x19)     
#define BAT_MAX_CIMI_IMSI_LEN          (0x10)     
#define BAT_MAX_CLAE_CODE_LEN          (0x2)      
#define BAT_MAX_CLAN_CODE_LEN          (0x4)      
#define BAT_MAX_CLAV_CODE_LEN          (0x4)      
#define BAT_MAX_CLCC_NUMBER_LEN        (0x51)     
#define BAT_MAX_CLCK_PWD_LEN           (0x20)     
#define BAT_MAX_CLIP_NUMBER_LEN        (0x14)     
#define BAT_MAX_CMGC_ACKPDU_LEN        (0xb0)     
#define BAT_MAX_CMGC_PDU_LEN           (0xb0)     
#define BAT_MAX_CMGL_ALPHA             (0x2a)     
#define BAT_MAX_CMGR_ALPHA             (0x2a)     
#define BAT_MAX_CMSS_DEST_ADDR_LEN     (0x14)     
#define BAT_MAX_CMT_ALPHA              (0x2a)     
#define BAT_MAX_CNAP_NAME_LEN          (0xa0)     
#define BAT_MAX_CNUM_ALPHA_LEN         (0x15)     
#define BAT_MAX_CNUM_NUMBER_LEN        (0x51)     
#define BAT_MAX_COLP_ALPHA_LEN         (0x2c)     
#define BAT_MAX_COLP_NUMBER_LEN        (0x27)     
#define BAT_MAX_COPS_LONG_OPER_LEN     (0x1e)     
#define BAT_MAX_COPS_NUM_OPER_LEN      (0x7)      
#define BAT_MAX_COPS_SHORT_OPER_LEN    (0xa)      
#define BAT_MAX_COPS_OPER_LEN          (0x1e)     
#define BAT_MAX_CPALS_MSISDN_ID_LEN    (0x16)     
#define BAT_MAX_CPBF_FIND_TEXT_LEN     (0x51)     
#define BAT_MAX_CPBF_NUMBER_LEN        (0x51)     
#define BAT_MAX_CPBF_TEXT_LEN          (0x51)     
#define BAT_MAX_CPBR_NUMBER_LEN        (0x51)     
#define BAT_MAX_CPBR_TEXT_LEN          (0x51)     
#define BAT_MAX_CPBW_NUMBER_LEN        (0x51)     
#define BAT_MAX_CPBW_TEXT_LEN          (0x51)     
#define BAT_MAX_CPBW_TYPES             (0xff)     
#define BAT_MAX_CPI_ALPHA_LEN          (0x2c)     
#define BAT_MAX_CPI_NUMBER_LEN         (0x27)     
#define BAT_MAX_CPIN_PIN_LEN           (0x20)     
#define BAT_MAX_CPINF_CSP_LEN          (0x2d)     
#define BAT_MAX_CPMB_ALPHA_ID_LEN      (0x58)     
#define BAT_MAX_CPMB_NUMBER_LEN        (0x28)     
#define BAT_MAX_CPMBW_NUMBER_LEN       (0x28)     
#define BAT_MAX_CPMBW_TEXT_LEN         (0x58)     
#define BAT_MAX_CPMBW_TYPE_LEN         (0xff)     
#define BAT_MAX_CPNUMS_ALPHA_TAG_LEN   (0x50)     
#define BAT_MAX_CPNUMS_NUMBER_LEN      (0x51)     
#define BAT_MAX_CPOL_OPER_LEN          (0x1e)     
#define BAT_MAX_CPOPN_LONG_NAME_LEN    (0x1e)     
#define BAT_MAX_CPOPN_SHORT_NAME_LEN   (0xa)      
#define BAT_MAX_CPUC_CURRENCY_LEN      (0x3)      
#define BAT_MAX_CPUC_PASSWD_LEN        (0x8)      
#define BAT_MAX_CPUC_PPU_LEN           (0x14)     
#define BAT_MAX_CPWD_PWD_LEN           (0x20)     
#define BAT_MAX_CR_SERV_LEN            (0x9)      
#define BAT_MAX_L2P_LENGTH             (0x6)      
#define BAT_MAX_CRSM_DATA_LEN          (0xff)     
#define BAT_MAX_CRSM_RESPONSE_LEN      (0x100)    
#define BAT_MAX_CSCA_SMS_ADDR_LEN      (0x14)     
#define BAT_MAX_IDENTS                 (0x14)     
#define BAT_MAX_CSIM_CMD_LEN           (0x104)    
#define BAT_MAX_CSIM_RESP_LEN          (0x102)    
#define BAT_MAX_CSSN_FACILITY_LEN      (0xfb)     
#define BAT_MAX_CSSU_NUMBER_LEN        (0x27)     
#define BAT_MAX_CSVM_NUMBER_LEN        (0x51)     
#define BAT_MAX_CTFR_NUMBER_LEN        (0x51)     
#define BAT_MAX_CTZV_LONG_OPER         (0x1e)     
#define BAT_MAX_CTZV_NUM_OPER_LEN      (0x7)      
#define BAT_MAX_CTZV_SHORT_OPER        (0xa)      
#define BAT_MAX_CUSD_USSD_STR_LEN      (0xb6)     
#define BAT_MAX_D_DIAL_LEN             (0xb7)     
#define BAT_MAX_ID_CHAR                (0x15)     
#define BAT_MAX_FNS_NSF                (0x59)     
#define BAT_MAX_PPP_PASSW_LEN          (0x19)     
#define BAT_MAX_PPP_USER_LEN           (0x19)     
#define BAT_MAX_PVRF_NEW_PIN_LEN       (0x8)      
#define BAT_MAX_PVRF_PIN_LEN           (0x8)      
#define BAT_MAX_RDLB_NUMBER_LEN        (0x51)     
#define BAT_MAX_STK_PRF                (0x14)     
#define BAT_MAX_STK_CMD                (0x100)    
#define BAT_MAX_SATE_SAT_RSP_LEN       (0x100)    
#define BAT_MAX_SATI_SAT_CMD_LEN       (0x100)    
#define BAT_MAX_SATN_SAT_CMD_LEN       (0x100)    
#define BAT_MAX_SIMEF_EF_LEN           (0x40)     
#define BAT_MAX_CDIP_NUMBER_LEN        (0x14)     
#define BAT_MAX_CMSS_ACKPDU_LEN        (0xb0)     
#define BAT_MAX_CUSTOM_CMD_LEN         (0x122)    
#define BAT_MAX_CNIV_LONG_OPER         (0x28)     
#define BAT_MAX_CNIV_NUM_OPER_LEN      (0x7)      
#define BAT_MAX_CNIV_SHORT_OPER        (0x28)     
#define BAT_MAX_ADDR_N_MASK_LEN        (0x20)     
#define BAT_MAX_DEST_PORT_LEN          (0x2)      
#define BAT_MAX_SRC_PORT_LEN           (0x2)      
#define BAT_MAX_TOS_MASK_OR_TC_MASK    (0x2)      
#define BAT_MAX_SDU_ERR_RATIO          (0x2)      
#define BAT_MAX_RES_BIT_ERR_RATIO      (0x2)      
#define BAT_MAX_CUSCFG_FAC_STR_LEN     (0x14)     
#define BAT_MAX_CUSCFG_VALUE_LEN       (0x14)     

#include "CDG_LEAVE.h"


#endif
