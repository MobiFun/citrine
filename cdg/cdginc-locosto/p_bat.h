/*
+--------------------------------------------------------------------------+
| PROJECT : PROTOCOL STACK                                                 |
| FILE    : p_bat.h                                                        |
| SOURCE  : "sap\bat.pdf"                                                  |
| LastModified : "2005-02-03"                                              |
| IdAndVersion : "..8445.100.00.999."                                      |
| SrcFileTime  : "Tue Dec 18 08:39:54 2007"                                |
| Generated by CCDGEN_2.5.5A on Thu Sep 25 09:18:53 2014                   |
|           !!DO NOT MODIFY!!DO NOT MODIFY!!DO NOT MODIFY!!                |
+--------------------------------------------------------------------------+
*/

/* PRAGMAS
 * PREFIX                 : BAT
 * COMPATIBILITY_DEFINES  : NO
 * ALWAYS_ENUM_IN_VAL_FILE: NO
 * ENABLE_GROUP: NO
 * CAPITALIZE_TYPENAME: NO
 */


#ifndef P_BAT_H
#define P_BAT_H


#define CDG_ENTER__P_BAT_H

#define CDG_ENTER__FILENAME _P_BAT_H
#define CDG_ENTER__P_BAT_H__FILE_TYPE CDGINC
#define CDG_ENTER__P_BAT_H__LAST_MODIFIED _2005_02_03
#define CDG_ENTER__P_BAT_H__ID_AND_VERSION __8445_100_00_999

#define CDG_ENTER__P_BAT_H__SRC_FILE_TIME _Tue_Dec_18_08_39_54_2007

#include "CDG_ENTER.h"

#undef CDG_ENTER__P_BAT_H

#undef CDG_ENTER__FILENAME


#include "p_bat.val"


/*
 * typedef between var and valtab enums
 */
#ifndef __T_BAT_bearer_class__
#define __T_BAT_bearer_class__
typedef T_BAT_VAL_bearer_class T_BAT_bearer_class;
#endif

#ifndef __T_BAT_capability__
#define __T_BAT_capability__
typedef T_BAT_VAL_capability T_BAT_capability;
#endif

#ifndef __T_BAT_cli__
#define __T_BAT_cli__
typedef T_BAT_VAL_cli T_BAT_cli;
#endif

#ifndef __T_BAT_cring_type__
#define __T_BAT_cring_type__
typedef T_BAT_VAL_cring_type T_BAT_cring_type;
#endif

#ifndef __T_BAT_delay__
#define __T_BAT_delay__
typedef T_BAT_VAL_delay T_BAT_delay;
#endif

#ifndef __T_BAT_dev_name__
#define __T_BAT_dev_name__
typedef T_BAT_VAL_dev_name T_BAT_dev_name;
#endif

#ifndef __T_BAT_dtmf__
#define __T_BAT_dtmf__
typedef T_BAT_VAL_dtmf T_BAT_dtmf;
#endif

#ifndef __T_BAT_fax_bf__
#define __T_BAT_fax_bf__
typedef T_BAT_VAL_fax_bf T_BAT_fax_bf;
#endif

#ifndef __T_BAT_fax_br__
#define __T_BAT_fax_br__
typedef T_BAT_VAL_fax_br T_BAT_fax_br;
#endif

#ifndef __T_BAT_fax_cq__
#define __T_BAT_fax_cq__
typedef T_BAT_VAL_fax_cq T_BAT_fax_cq;
#endif

#ifndef __T_BAT_fax_df__
#define __T_BAT_fax_df__
typedef T_BAT_VAL_fax_df T_BAT_fax_df;
#endif

#ifndef __T_BAT_fax_ec__
#define __T_BAT_fax_ec__
typedef T_BAT_VAL_fax_ec T_BAT_fax_ec;
#endif

#ifndef __T_BAT_fax_jp__
#define __T_BAT_fax_jp__
typedef T_BAT_VAL_fax_jp T_BAT_fax_jp;
#endif

#ifndef __T_BAT_fax_ln__
#define __T_BAT_fax_ln__
typedef T_BAT_VAL_fax_ln T_BAT_fax_ln;
#endif

#ifndef __T_BAT_fax_st__
#define __T_BAT_fax_st__
typedef T_BAT_VAL_fax_st T_BAT_fax_st;
#endif

#ifndef __T_BAT_fax_vl__
#define __T_BAT_fax_vl__
typedef T_BAT_VAL_fax_vl T_BAT_fax_vl;
#endif

#ifndef __T_BAT_fax_vr__
#define __T_BAT_fax_vr__
typedef T_BAT_VAL_fax_vr T_BAT_fax_vr;
#endif

#ifndef __T_BAT_fax_wd__
#define __T_BAT_fax_wd__
typedef T_BAT_VAL_fax_wd T_BAT_fax_wd;
#endif

#ifndef __T_BAT_framing_format__
#define __T_BAT_framing_format__
typedef T_BAT_VAL_framing_format T_BAT_framing_format;
#endif

#ifndef __T_BAT_framing_parity__
#define __T_BAT_framing_parity__
typedef T_BAT_VAL_framing_parity T_BAT_framing_parity;
#endif

#ifndef __T_BAT_mean__
#define __T_BAT_mean__
typedef T_BAT_VAL_mean T_BAT_mean;
#endif

#ifndef __T_BAT_mobile_class__
#define __T_BAT_mobile_class__
typedef T_BAT_VAL_mobile_class T_BAT_mobile_class;
#endif

#ifndef __T_BAT_p_mobile_class__
#define __T_BAT_p_mobile_class__
typedef T_BAT_VAL_p_mobile_class T_BAT_p_mobile_class;
#endif

#ifndef __T_BAT_pdp_cid__
#define __T_BAT_pdp_cid__
typedef T_BAT_VAL_pdp_cid T_BAT_pdp_cid;
#endif

#ifndef __T_BAT_pdp_type__
#define __T_BAT_pdp_type__
typedef T_BAT_VAL_pdp_type T_BAT_pdp_type;
#endif

#ifndef __T_BAT_peak__
#define __T_BAT_peak__
typedef T_BAT_VAL_peak T_BAT_peak;
#endif

#ifndef __T_BAT_precedence__
#define __T_BAT_precedence__
typedef T_BAT_VAL_precedence T_BAT_precedence;
#endif

#ifndef __T_BAT_record_id__
#define __T_BAT_record_id__
typedef T_BAT_VAL_record_id T_BAT_record_id;
#endif

#ifndef __T_BAT_reliability__
#define __T_BAT_reliability__
typedef T_BAT_VAL_reliability T_BAT_reliability;
#endif

#ifndef __T_BAT_sms_mem__
#define __T_BAT_sms_mem__
typedef T_BAT_VAL_sms_mem T_BAT_sms_mem;
#endif

#ifndef __T_BAT_sms_stat__
#define __T_BAT_sms_stat__
typedef T_BAT_VAL_sms_stat T_BAT_sms_stat;
#endif

#ifndef __T_BAT_storage__
#define __T_BAT_storage__
typedef T_BAT_VAL_storage T_BAT_storage;
#endif

#ifndef __T_BAT_trx__
#define __T_BAT_trx__
typedef T_BAT_VAL_trx T_BAT_trx;
#endif

#ifndef __T_BAT_percent_als_mode__
#define __T_BAT_percent_als_mode__
typedef T_BAT_VAL_percent_als_mode T_BAT_percent_als_mode;
#endif

#ifndef __T_BAT_percent_atr_phase__
#define __T_BAT_percent_atr_phase__
typedef T_BAT_VAL_percent_atr_phase T_BAT_percent_atr_phase;
#endif

#ifndef __T_BAT_percent_band_band__
#define __T_BAT_percent_band_band__
typedef T_BAT_VAL_percent_band_band T_BAT_percent_band_band;
#endif

#ifndef __T_BAT_percent_band_mode__
#define __T_BAT_percent_band_mode__
typedef T_BAT_VAL_percent_band_mode T_BAT_percent_band_mode;
#endif

#ifndef __T_BAT_andc_value__
#define __T_BAT_andc_value__
typedef T_BAT_VAL_andc_value T_BAT_andc_value;
#endif

#ifndef __T_BAT_plus_caoc_mode__
#define __T_BAT_plus_caoc_mode__
typedef T_BAT_VAL_plus_caoc_mode T_BAT_plus_caoc_mode;
#endif

#ifndef __T_BAT_plus_cbc_bcl__
#define __T_BAT_plus_cbc_bcl__
typedef T_BAT_VAL_plus_cbc_bcl T_BAT_plus_cbc_bcl;
#endif

#ifndef __T_BAT_plus_cbc_bsc__
#define __T_BAT_plus_cbc_bsc__
typedef T_BAT_VAL_plus_cbc_bsc T_BAT_plus_cbc_bsc;
#endif

#ifndef __T_BAT_percent_cbhz_mode__
#define __T_BAT_percent_cbhz_mode__
typedef T_BAT_VAL_percent_cbhz_mode T_BAT_percent_cbhz_mode;
#endif

#ifndef __T_BAT_percent_cbhz_timeout__
#define __T_BAT_percent_cbhz_timeout__
typedef T_BAT_VAL_percent_cbhz_timeout T_BAT_percent_cbhz_timeout;
#endif

#ifndef __T_BAT_plus_cbst_ce__
#define __T_BAT_plus_cbst_ce__
typedef T_BAT_VAL_plus_cbst_ce T_BAT_plus_cbst_ce;
#endif

#ifndef __T_BAT_plus_cbst_name__
#define __T_BAT_plus_cbst_name__
typedef T_BAT_VAL_plus_cbst_name T_BAT_plus_cbst_name;
#endif

#ifndef __T_BAT_plus_cbst_speed__
#define __T_BAT_plus_cbst_speed__
typedef T_BAT_VAL_plus_cbst_speed T_BAT_plus_cbst_speed;
#endif

#ifndef __T_BAT_percent_ccbs_idx__
#define __T_BAT_percent_ccbs_idx__
typedef T_BAT_VAL_percent_ccbs_idx T_BAT_percent_ccbs_idx;
#endif

#ifndef __T_BAT_percent_ccbs_ind__
#define __T_BAT_percent_ccbs_ind__
typedef T_BAT_VAL_percent_ccbs_ind T_BAT_percent_ccbs_ind;
#endif

#ifndef __T_BAT_percent_ccbs_ptn__
#define __T_BAT_percent_ccbs_ptn__
typedef T_BAT_VAL_percent_ccbs_ptn T_BAT_percent_ccbs_ptn;
#endif

#ifndef __T_BAT_percent_ccbs_stat__
#define __T_BAT_percent_ccbs_stat__
typedef T_BAT_VAL_percent_ccbs_stat T_BAT_percent_ccbs_stat;
#endif

#ifndef __T_BAT_percent_cccn_direction__
#define __T_BAT_percent_cccn_direction__
typedef T_BAT_VAL_percent_cccn_direction T_BAT_percent_cccn_direction;
#endif

#ifndef __T_BAT_plus_ccfc_bearer_class__
#define __T_BAT_plus_ccfc_bearer_class__
typedef T_BAT_VAL_plus_ccfc_bearer_class T_BAT_plus_ccfc_bearer_class;
#endif

#ifndef __T_BAT_plus_ccfc_mode__
#define __T_BAT_plus_ccfc_mode__
typedef T_BAT_VAL_plus_ccfc_mode T_BAT_plus_ccfc_mode;
#endif

#ifndef __T_BAT_plus_ccfc_reason__
#define __T_BAT_plus_ccfc_reason__
typedef T_BAT_VAL_plus_ccfc_reason T_BAT_plus_ccfc_reason;
#endif

#ifndef __T_BAT_plus_ccfc_status__
#define __T_BAT_plus_ccfc_status__
typedef T_BAT_VAL_plus_ccfc_status T_BAT_plus_ccfc_status;
#endif

#ifndef __T_BAT_plus_ccfc_time__
#define __T_BAT_plus_ccfc_time__
typedef T_BAT_VAL_plus_ccfc_time T_BAT_plus_ccfc_time;
#endif

#ifndef __T_BAT_plus_ccug_index__
#define __T_BAT_plus_ccug_index__
typedef T_BAT_VAL_plus_ccug_index T_BAT_plus_ccug_index;
#endif

#ifndef __T_BAT_plus_ccug_info__
#define __T_BAT_plus_ccug_info__
typedef T_BAT_VAL_plus_ccug_info T_BAT_plus_ccug_info;
#endif

#ifndef __T_BAT_plus_ccug_n__
#define __T_BAT_plus_ccug_n__
typedef T_BAT_VAL_plus_ccug_n T_BAT_plus_ccug_n;
#endif

#ifndef __T_BAT_plus_ccwa_bearer_class__
#define __T_BAT_plus_ccwa_bearer_class__
typedef T_BAT_VAL_plus_ccwa_bearer_class T_BAT_plus_ccwa_bearer_class;
#endif

#ifndef __T_BAT_plus_ccwa_mode__
#define __T_BAT_plus_ccwa_mode__
typedef T_BAT_VAL_plus_ccwa_mode T_BAT_plus_ccwa_mode;
#endif

#ifndef __T_BAT_plus_ccwa_status__
#define __T_BAT_plus_ccwa_status__
typedef T_BAT_VAL_plus_ccwa_status T_BAT_plus_ccwa_status;
#endif

#ifndef __T_BAT_plus_ccwa_w_bearer_class__
#define __T_BAT_plus_ccwa_w_bearer_class__
typedef T_BAT_VAL_plus_ccwa_w_bearer_class T_BAT_plus_ccwa_w_bearer_class;
#endif

#ifndef __T_BAT_plus_ccwa_w_mode__
#define __T_BAT_plus_ccwa_w_mode__
typedef T_BAT_VAL_plus_ccwa_w_mode T_BAT_plus_ccwa_w_mode;
#endif

#ifndef __T_BAT_plus_ccwa_w_status__
#define __T_BAT_plus_ccwa_w_status__
typedef T_BAT_VAL_plus_ccwa_w_status T_BAT_plus_ccwa_w_status;
#endif

#ifndef __T_BAT_plus_cdip_m__
#define __T_BAT_plus_cdip_m__
typedef T_BAT_VAL_plus_cdip_m T_BAT_plus_cdip_m;
#endif

#ifndef __T_BAT_plus_ceer_definedby__
#define __T_BAT_plus_ceer_definedby__
typedef T_BAT_VAL_plus_ceer_definedby T_BAT_plus_ceer_definedby;
#endif

#ifndef __T_BAT_plus_ceer_originatingentity__
#define __T_BAT_plus_ceer_originatingentity__
typedef T_BAT_VAL_plus_ceer_originatingentity T_BAT_plus_ceer_originatingentity;
#endif

#ifndef __T_BAT_plus_ceer_originatingside__
#define __T_BAT_plus_ceer_originatingside__
typedef T_BAT_VAL_plus_ceer_originatingside T_BAT_plus_ceer_originatingside;
#endif

#ifndef __T_BAT_plus_cfun_fun__
#define __T_BAT_plus_cfun_fun__
typedef T_BAT_VAL_plus_cfun_fun T_BAT_plus_cfun_fun;
#endif

#ifndef __T_BAT_plus_cfun_rst__
#define __T_BAT_plus_cfun_rst__
typedef T_BAT_VAL_plus_cfun_rst T_BAT_plus_cfun_rst;
#endif

#ifndef __T_BAT_percent_cgaatt_att_m__
#define __T_BAT_percent_cgaatt_att_m__
typedef T_BAT_VAL_percent_cgaatt_att_m T_BAT_percent_cgaatt_att_m;
#endif

#ifndef __T_BAT_percent_cgaatt_det_m__
#define __T_BAT_percent_cgaatt_det_m__
typedef T_BAT_VAL_percent_cgaatt_det_m T_BAT_percent_cgaatt_det_m;
#endif

#ifndef __T_BAT_plus_cgact_state__
#define __T_BAT_plus_cgact_state__
typedef T_BAT_VAL_plus_cgact_state T_BAT_plus_cgact_state;
#endif

#ifndef __T_BAT_plus_cgans_response__
#define __T_BAT_plus_cgans_response__
typedef T_BAT_VAL_plus_cgans_response T_BAT_plus_cgans_response;
#endif

#ifndef __T_BAT_plus_cgatt_state__
#define __T_BAT_plus_cgatt_state__
typedef T_BAT_VAL_plus_cgatt_state T_BAT_plus_cgatt_state;
#endif

#ifndef __T_BAT_plus_cgdcont_d_comp__
#define __T_BAT_plus_cgdcont_d_comp__
typedef T_BAT_VAL_plus_cgdcont_d_comp T_BAT_plus_cgdcont_d_comp;
#endif

#ifndef __T_BAT_plus_cgdcont_h_comp__
#define __T_BAT_plus_cgdcont_h_comp__
typedef T_BAT_VAL_plus_cgdcont_h_comp T_BAT_plus_cgdcont_h_comp;
#endif

#ifndef __T_BAT_percent_cgev_evt__
#define __T_BAT_percent_cgev_evt__
typedef T_BAT_VAL_percent_cgev_evt T_BAT_percent_cgev_evt;
#endif

#ifndef __T_BAT_plus_cgev_evt__
#define __T_BAT_plus_cgev_evt__
typedef T_BAT_VAL_plus_cgev_evt T_BAT_plus_cgev_evt;
#endif

#ifndef __T_BAT_percent_cgmm_cipher_on__
#define __T_BAT_percent_cgmm_cipher_on__
typedef T_BAT_VAL_percent_cgmm_cipher_on T_BAT_percent_cgmm_cipher_on;
#endif

#ifndef __T_BAT_percent_cgmm_tlli_handling__
#define __T_BAT_percent_cgmm_tlli_handling__
typedef T_BAT_VAL_percent_cgmm_tlli_handling T_BAT_percent_cgmm_tlli_handling;
#endif

#ifndef __T_BAT_percent_cgpco_format__
#define __T_BAT_percent_cgpco_format__
typedef T_BAT_VAL_percent_cgpco_format T_BAT_percent_cgpco_format;
#endif

#ifndef __T_BAT_percent_cgpco_mode__
#define __T_BAT_percent_cgpco_mode__
typedef T_BAT_VAL_percent_cgpco_mode T_BAT_percent_cgpco_mode;
#endif

#ifndef __T_BAT_percent_cgppp_protocol__
#define __T_BAT_percent_cgppp_protocol__
typedef T_BAT_VAL_percent_cgppp_protocol T_BAT_percent_cgppp_protocol;
#endif

#ifndef __T_BAT_percent_cgreg_stat__
#define __T_BAT_percent_cgreg_stat__
typedef T_BAT_VAL_percent_cgreg_stat T_BAT_percent_cgreg_stat;
#endif

#ifndef __T_BAT_percent_cgreg_state__
#define __T_BAT_percent_cgreg_state__
typedef T_BAT_VAL_percent_cgreg_state T_BAT_percent_cgreg_state;
#endif

#ifndef __T_BAT_plus_cgreg_stat__
#define __T_BAT_plus_cgreg_stat__
typedef T_BAT_VAL_plus_cgreg_stat T_BAT_plus_cgreg_stat;
#endif

#ifndef __T_BAT_plus_cgsms_service__
#define __T_BAT_plus_cgsms_service__
typedef T_BAT_VAL_plus_cgsms_service T_BAT_plus_cgsms_service;
#endif

#ifndef __T_BAT_percent_chld_n__
#define __T_BAT_percent_chld_n__
typedef T_BAT_VAL_percent_chld_n T_BAT_percent_chld_n;
#endif

#ifndef __T_BAT_percent_chpl_oprfrmt__
#define __T_BAT_percent_chpl_oprfrmt__
typedef T_BAT_VAL_percent_chpl_oprfrmt T_BAT_percent_chpl_oprfrmt;
#endif

#ifndef __T_BAT_percent_chpl_type__
#define __T_BAT_percent_chpl_type__
typedef T_BAT_VAL_percent_chpl_type T_BAT_percent_chpl_type;
#endif

#ifndef __T_BAT_percent_chpl_w_oprfrmt__
#define __T_BAT_percent_chpl_w_oprfrmt__
typedef T_BAT_VAL_percent_chpl_w_oprfrmt T_BAT_percent_chpl_w_oprfrmt;
#endif

#ifndef __T_BAT_percent_chpl_w_type__
#define __T_BAT_percent_chpl_w_type__
typedef T_BAT_VAL_percent_chpl_w_type T_BAT_percent_chpl_w_type;
#endif

#ifndef __T_BAT_plus_cind_signal__
#define __T_BAT_plus_cind_signal__
typedef T_BAT_VAL_plus_cind_signal T_BAT_plus_cind_signal;
#endif

#ifndef __T_BAT_plus_cind_signal_ctrl__
#define __T_BAT_plus_cind_signal_ctrl__
typedef T_BAT_VAL_plus_cind_signal_ctrl T_BAT_plus_cind_signal_ctrl;
#endif

#ifndef __T_BAT_plus_cind_smsfull__
#define __T_BAT_plus_cind_smsfull__
typedef T_BAT_VAL_plus_cind_smsfull T_BAT_plus_cind_smsfull;
#endif

#ifndef __T_BAT_plus_cind_smsfull_ctrl__
#define __T_BAT_plus_cind_smsfull_ctrl__
typedef T_BAT_VAL_plus_cind_smsfull_ctrl T_BAT_plus_cind_smsfull_ctrl;
#endif

#ifndef __T_BAT_plus_clcc_dir__
#define __T_BAT_plus_clcc_dir__
typedef T_BAT_VAL_plus_clcc_dir T_BAT_plus_clcc_dir;
#endif

#ifndef __T_BAT_plus_clcc_mode__
#define __T_BAT_plus_clcc_mode__
typedef T_BAT_VAL_plus_clcc_mode T_BAT_plus_clcc_mode;
#endif

#ifndef __T_BAT_plus_clcc_mpty__
#define __T_BAT_plus_clcc_mpty__
typedef T_BAT_VAL_plus_clcc_mpty T_BAT_plus_clcc_mpty;
#endif

#ifndef __T_BAT_plus_clcc_stat__
#define __T_BAT_plus_clcc_stat__
typedef T_BAT_VAL_plus_clcc_stat T_BAT_plus_clcc_stat;
#endif

#ifndef __T_BAT_plus_clck_fac__
#define __T_BAT_plus_clck_fac__
typedef T_BAT_VAL_plus_clck_fac T_BAT_plus_clck_fac;
#endif

#ifndef __T_BAT_plus_clck_mode__
#define __T_BAT_plus_clck_mode__
typedef T_BAT_VAL_plus_clck_mode T_BAT_plus_clck_mode;
#endif

#ifndef __T_BAT_plus_clck_status__
#define __T_BAT_plus_clck_status__
typedef T_BAT_VAL_plus_clck_status T_BAT_plus_clck_status;
#endif

#ifndef __T_BAT_plus_clip_m__
#define __T_BAT_plus_clip_m__
typedef T_BAT_VAL_plus_clip_m T_BAT_plus_clip_m;
#endif

#ifndef __T_BAT_plus_clip_w_m__
#define __T_BAT_plus_clip_w_m__
typedef T_BAT_VAL_plus_clip_w_m T_BAT_plus_clip_w_m;
#endif

#ifndef __T_BAT_plus_clir_m__
#define __T_BAT_plus_clir_m__
typedef T_BAT_VAL_plus_clir_m T_BAT_plus_clir_m;
#endif

#ifndef __T_BAT_plus_clir_n__
#define __T_BAT_plus_clir_n__
typedef T_BAT_VAL_plus_clir_n T_BAT_plus_clir_n;
#endif

#ifndef __T_BAT_plus_cmer_ind_option__
#define __T_BAT_plus_cmer_ind_option__
typedef T_BAT_VAL_plus_cmer_ind_option T_BAT_plus_cmer_ind_option;
#endif

#ifndef __T_BAT_plus_cme_error_error__
#define __T_BAT_plus_cme_error_error__
typedef T_BAT_VAL_plus_cme_error_error T_BAT_plus_cme_error_error;
#endif

#ifndef __T_BAT_percent_cmgl_alpha_cs__
#define __T_BAT_percent_cmgl_alpha_cs__
typedef T_BAT_VAL_percent_cmgl_alpha_cs T_BAT_percent_cmgl_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmgl_alpha_cs__
#define __T_BAT_plus_cmgl_alpha_cs__
typedef T_BAT_VAL_plus_cmgl_alpha_cs T_BAT_plus_cmgl_alpha_cs;
#endif

#ifndef __T_BAT_percent_cmgl_stat__
#define __T_BAT_percent_cmgl_stat__
typedef T_BAT_VAL_percent_cmgl_stat T_BAT_percent_cmgl_stat;
#endif

#ifndef __T_BAT_plus_cmgl_stat__
#define __T_BAT_plus_cmgl_stat__
typedef T_BAT_VAL_plus_cmgl_stat T_BAT_plus_cmgl_stat;
#endif

#ifndef __T_BAT_plus_cmgl_w_alpha_cs__
#define __T_BAT_plus_cmgl_w_alpha_cs__
typedef T_BAT_VAL_plus_cmgl_w_alpha_cs T_BAT_plus_cmgl_w_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmgl_w_stat__
#define __T_BAT_plus_cmgl_w_stat__
typedef T_BAT_VAL_plus_cmgl_w_stat T_BAT_plus_cmgl_w_stat;
#endif

#ifndef __T_BAT_percent_cmgr_alpha_cs__
#define __T_BAT_percent_cmgr_alpha_cs__
typedef T_BAT_val_percent_cmgr_alpha_cs T_BAT_percent_cmgr_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmgr_alpha_cs__
#define __T_BAT_plus_cmgr_alpha_cs__
typedef T_BAT_VAL_plus_cmgr_alpha_cs T_BAT_plus_cmgr_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmgr_w_alpha_cs__
#define __T_BAT_plus_cmgr_w_alpha_cs__
typedef T_BAT_VAL_plus_cmgr_w_alpha_cs T_BAT_plus_cmgr_w_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmod_mode__
#define __T_BAT_plus_cmod_mode__
typedef T_BAT_VAL_plus_cmod_mode T_BAT_plus_cmod_mode;
#endif

#ifndef __T_BAT_plus_cms_error_err__
#define __T_BAT_plus_cms_error_err__
typedef T_BAT_VAL_plus_cms_error_err T_BAT_plus_cms_error_err;
#endif

#ifndef __T_BAT_plus_cmt_alpha_cs__
#define __T_BAT_plus_cmt_alpha_cs__
typedef T_BAT_VAL_plus_cmt_alpha_cs T_BAT_plus_cmt_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmt_w_alpha_cs__
#define __T_BAT_plus_cmt_w_alpha_cs__
typedef T_BAT_VAL_plus_cmt_w_alpha_cs T_BAT_plus_cmt_w_alpha_cs;
#endif

#ifndef __T_BAT_plus_cmut_n__
#define __T_BAT_plus_cmut_n__
typedef T_BAT_VAL_plus_cmut_n T_BAT_plus_cmut_n;
#endif

#ifndef __T_BAT_plus_cmux_mode__
#define __T_BAT_plus_cmux_mode__
typedef T_BAT_VAL_plus_cmux_mode T_BAT_plus_cmux_mode;
#endif

#ifndef __T_BAT_plus_cmux_port_speed__
#define __T_BAT_plus_cmux_port_speed__
typedef T_BAT_VAL_plus_cmux_port_speed T_BAT_plus_cmux_port_speed;
#endif

#ifndef __T_BAT_plus_cmux_subset__
#define __T_BAT_plus_cmux_subset__
typedef T_BAT_VAL_plus_cmux_subset T_BAT_plus_cmux_subset;
#endif

#ifndef __T_BAT_percent_cnap_pres_mode__
#define __T_BAT_percent_cnap_pres_mode__
typedef T_BAT_VAL_percent_cnap_pres_mode T_BAT_percent_cnap_pres_mode;
#endif

#ifndef __T_BAT_percent_cnap_status__
#define __T_BAT_percent_cnap_status__
typedef T_BAT_VAL_percent_cnap_status T_BAT_percent_cnap_status;
#endif

#ifndef __T_BAT_plus_cnma_n__
#define __T_BAT_plus_cnma_n__
typedef T_BAT_VAL_plus_cnma_n T_BAT_plus_cnma_n;
#endif

#ifndef __T_BAT_plus_cnmi_bm__
#define __T_BAT_plus_cnmi_bm__
typedef T_BAT_VAL_plus_cnmi_bm T_BAT_plus_cnmi_bm;
#endif

#ifndef __T_BAT_plus_cnmi_ds__
#define __T_BAT_plus_cnmi_ds__
typedef T_BAT_VAL_plus_cnmi_ds T_BAT_plus_cnmi_ds;
#endif

#ifndef __T_BAT_plus_cnmi_mt__
#define __T_BAT_plus_cnmi_mt__
typedef T_BAT_VAL_plus_cnmi_mt T_BAT_plus_cnmi_mt;
#endif

#ifndef __T_BAT_plus_colp_m__
#define __T_BAT_plus_colp_m__
typedef T_BAT_VAL_plus_colp_m T_BAT_plus_colp_m;
#endif

#ifndef __T_BAT_plus_colp_w_m__
#define __T_BAT_plus_colp_w_m__
typedef T_BAT_VAL_plus_colp_w_m T_BAT_plus_colp_w_m;
#endif

#ifndef __T_BAT_at_connect_data_rate__
#define __T_BAT_at_connect_data_rate__
typedef T_BAT_VAL_at_connect_data_rate T_BAT_at_connect_data_rate;
#endif

#ifndef __T_BAT_percent_cops_format__
#define __T_BAT_percent_cops_format__
typedef T_BAT_VAL_percent_cops_format T_BAT_percent_cops_format;
#endif

#ifndef __T_BAT_percent_cops_mode__
#define __T_BAT_percent_cops_mode__
typedef T_BAT_VAL_percent_cops_mode T_BAT_percent_cops_mode;
#endif

#ifndef __T_BAT_percent_cops_service__
#define __T_BAT_percent_cops_service__
typedef T_BAT_VAL_percent_cops_service T_BAT_percent_cops_service;
#endif

#ifndef __T_BAT_percent_cops_status__
#define __T_BAT_percent_cops_status__
typedef T_BAT_VAL_percent_cops_status T_BAT_percent_cops_status;
#endif

#ifndef __T_BAT_plus_cops_format__
#define __T_BAT_plus_cops_format__
typedef T_BAT_VAL_plus_cops_format T_BAT_plus_cops_format;
#endif

#ifndef __T_BAT_plus_cops_mode__
#define __T_BAT_plus_cops_mode__
typedef T_BAT_VAL_plus_cops_mode T_BAT_plus_cops_mode;
#endif

#ifndef __T_BAT_plus_cops_status__
#define __T_BAT_plus_cops_status__
typedef T_BAT_VAL_plus_cops_status T_BAT_plus_cops_status;
#endif

#ifndef __T_BAT_percent_cops_w_format__
#define __T_BAT_percent_cops_w_format__
typedef T_BAT_VAL_percent_cops_w_format T_BAT_percent_cops_w_format;
#endif

#ifndef __T_BAT_percent_cops_w_mode__
#define __T_BAT_percent_cops_w_mode__
typedef T_BAT_VAL_percent_cops_w_mode T_BAT_percent_cops_w_mode;
#endif

#ifndef __T_BAT_percent_cops_w_service__
#define __T_BAT_percent_cops_w_service__
typedef T_BAT_VAL_percent_cops_w_service T_BAT_percent_cops_w_service;
#endif

#ifndef __T_BAT_percent_cops_w_status__
#define __T_BAT_percent_cops_w_status__
typedef T_BAT_VAL_percent_cops_w_status T_BAT_percent_cops_w_status;
#endif

#ifndef __T_BAT_percent_cpals_lines__
#define __T_BAT_percent_cpals_lines__
typedef T_BAT_VAL_percent_cpals_lines T_BAT_percent_cpals_lines;
#endif

#ifndef __T_BAT_percent_cpals_w_lines__
#define __T_BAT_percent_cpals_w_lines__
typedef T_BAT_VAL_percent_cpals_w_lines T_BAT_percent_cpals_w_lines;
#endif

#ifndef __T_BAT_plus_cpas_pas__
#define __T_BAT_plus_cpas_pas__
typedef T_BAT_VAL_plus_cpas_pas T_BAT_plus_cpas_pas;
#endif

#ifndef __T_BAT_percent_cpcfu_line__
#define __T_BAT_percent_cpcfu_line__
typedef T_BAT_VAL_percent_cpcfu_line T_BAT_percent_cpcfu_line;
#endif

#ifndef __T_BAT_percent_cpcfu_mode__
#define __T_BAT_percent_cpcfu_mode__
typedef T_BAT_VAL_percent_cpcfu_mode T_BAT_percent_cpcfu_mode;
#endif

#ifndef __T_BAT_percent_cpcfu_status__
#define __T_BAT_percent_cpcfu_status__
typedef T_BAT_VAL_percent_cpcfu_status T_BAT_percent_cpcfu_status;
#endif

#ifndef __T_BAT_percent_cphs_init_mode__
#define __T_BAT_percent_cphs_init_mode__
typedef T_BAT_VAL_percent_cphs_init_mode T_BAT_percent_cphs_init_mode;
#endif

#ifndef __T_BAT_percent_cpi_ibt__
#define __T_BAT_percent_cpi_ibt__
typedef T_BAT_VAL_percent_cpi_ibt T_BAT_percent_cpi_ibt;
#endif

#ifndef __T_BAT_percent_cpi_msgtype__
#define __T_BAT_percent_cpi_msgtype__
typedef T_BAT_VAL_percent_cpi_msgtype T_BAT_percent_cpi_msgtype;
#endif

#ifndef __T_BAT_percent_cpi_prog_desc__
#define __T_BAT_percent_cpi_prog_desc__
typedef T_BAT_VAL_percent_cpi_prog_desc T_BAT_percent_cpi_prog_desc;
#endif

#ifndef __T_BAT_percent_cpi_tch__
#define __T_BAT_percent_cpi_tch__
typedef T_BAT_VAL_percent_cpi_tch T_BAT_percent_cpi_tch;
#endif

#ifndef __T_BAT_plus_cpin_code__
#define __T_BAT_plus_cpin_code__
typedef T_BAT_VAL_plus_cpin_code T_BAT_plus_cpin_code;
#endif

#ifndef __T_BAT_percent_cpinf_phase__
#define __T_BAT_percent_cpinf_phase__
typedef T_BAT_VAL_percent_cpinf_phase T_BAT_percent_cpinf_phase;
#endif

#ifndef __T_BAT_percent_cpi_w_ibt__
#define __T_BAT_percent_cpi_w_ibt__
typedef T_BAT_VAL_percent_cpi_w_ibt T_BAT_percent_cpi_w_ibt;
#endif

#ifndef __T_BAT_percent_cpi_w_msgtype__
#define __T_BAT_percent_cpi_w_msgtype__
typedef T_BAT_VAL_percent_cpi_w_msgtype T_BAT_percent_cpi_w_msgtype;
#endif

#ifndef __T_BAT_percent_cpi_w_prog_desc__
#define __T_BAT_percent_cpi_w_prog_desc__
typedef T_BAT_VAL_percent_cpi_w_prog_desc T_BAT_percent_cpi_w_prog_desc;
#endif

#ifndef __T_BAT_percent_cpi_w_tch__
#define __T_BAT_percent_cpi_w_tch__
typedef T_BAT_VAL_percent_cpi_w_tch T_BAT_percent_cpi_w_tch;
#endif

#ifndef __T_BAT_percent_cpmb_line__
#define __T_BAT_percent_cpmb_line__
typedef T_BAT_VAL_percent_cpmb_line T_BAT_percent_cpmb_line;
#endif

#ifndef __T_BAT_percent_cpmb_w_line__
#define __T_BAT_percent_cpmb_w_line__
typedef T_BAT_VAL_percent_cpmb_w_line T_BAT_percent_cpmb_w_line;
#endif

#ifndef __T_BAT_plus_cpms_mem1__
#define __T_BAT_plus_cpms_mem1__
typedef T_BAT_VAL_plus_cpms_mem1 T_BAT_plus_cpms_mem1;
#endif

#ifndef __T_BAT_plus_cpms_mem2__
#define __T_BAT_plus_cpms_mem2__
typedef T_BAT_VAL_plus_cpms_mem2 T_BAT_plus_cpms_mem2;
#endif

#ifndef __T_BAT_plus_cpms_mem3__
#define __T_BAT_plus_cpms_mem3__
typedef T_BAT_VAL_plus_cpms_mem3 T_BAT_plus_cpms_mem3;
#endif

#ifndef __T_BAT_percent_cpnums_mode__
#define __T_BAT_percent_cpnums_mode__
typedef T_BAT_VAL_percent_cpnums_mode T_BAT_percent_cpnums_mode;
#endif

#ifndef __T_BAT_percent_cpnums_network_flag__
#define __T_BAT_percent_cpnums_network_flag__
typedef T_BAT_VAL_percent_cpnums_network_flag T_BAT_percent_cpnums_network_flag;
#endif

#ifndef __T_BAT_percent_cpnums_premium_flag__
#define __T_BAT_percent_cpnums_premium_flag__
typedef T_BAT_VAL_percent_cpnums_premium_flag T_BAT_percent_cpnums_premium_flag;
#endif

#ifndef __T_BAT_percent_cpnums_w_mode__
#define __T_BAT_percent_cpnums_w_mode__
typedef T_BAT_VAL_percent_cpnums_w_mode T_BAT_percent_cpnums_w_mode;
#endif

#ifndef __T_BAT_percent_cpnums_w_network_flag__
#define __T_BAT_percent_cpnums_w_network_flag__
typedef T_BAT_VAL_percent_cpnums_w_network_flag T_BAT_percent_cpnums_w_network_flag;
#endif

#ifndef __T_BAT_percent_cpnums_w_premium_flag__
#define __T_BAT_percent_cpnums_w_premium_flag__
typedef T_BAT_VAL_percent_cpnums_w_premium_flag T_BAT_percent_cpnums_w_premium_flag;
#endif

#ifndef __T_BAT_plus_cpol_format__
#define __T_BAT_plus_cpol_format__
typedef T_BAT_VAL_plus_cpol_format T_BAT_plus_cpol_format;
#endif

#ifndef __T_BAT_plus_cpol_w_format__
#define __T_BAT_plus_cpol_w_format__
typedef T_BAT_VAL_plus_cpol_w_format T_BAT_plus_cpol_w_format;
#endif

#ifndef __T_BAT_percent_cpri_gprs_ciph__
#define __T_BAT_percent_cpri_gprs_ciph__
typedef T_BAT_VAL_percent_cpri_gprs_ciph T_BAT_percent_cpri_gprs_ciph;
#endif

#ifndef __T_BAT_percent_cpri_gsm_ciph__
#define __T_BAT_percent_cpri_gsm_ciph__
typedef T_BAT_VAL_percent_cpri_gsm_ciph T_BAT_percent_cpri_gsm_ciph;
#endif

#ifndef __T_BAT_percent_cproam_roam_status__
#define __T_BAT_percent_cproam_roam_status__
typedef T_BAT_VAL_percent_cproam_roam_status T_BAT_percent_cproam_roam_status;
#endif

#ifndef __T_BAT_percent_cprsm_mode__
#define __T_BAT_percent_cprsm_mode__
typedef T_BAT_VAL_percent_cprsm_mode T_BAT_percent_cprsm_mode;
#endif

#ifndef __T_BAT_percent_cpvwi_lines__
#define __T_BAT_percent_cpvwi_lines__
typedef T_BAT_VAL_percent_cpvwi_lines T_BAT_percent_cpvwi_lines;
#endif

#ifndef __T_BAT_percent_cpvwi_mode__
#define __T_BAT_percent_cpvwi_mode__
typedef T_BAT_VAL_percent_cpvwi_mode T_BAT_percent_cpvwi_mode;
#endif

#ifndef __T_BAT_percent_cpvwi_status__
#define __T_BAT_percent_cpvwi_status__
typedef T_BAT_VAL_percent_cpvwi_status T_BAT_percent_cpvwi_status;
#endif

#ifndef __T_BAT_plus_cpwd_fac__
#define __T_BAT_plus_cpwd_fac__
typedef T_BAT_VAL_plus_cpwd_fac T_BAT_plus_cpwd_fac;
#endif

#ifndef __T_BAT_percent_creg_gprs_ind__
#define __T_BAT_percent_creg_gprs_ind__
typedef T_BAT_VAL_percent_creg_gprs_ind T_BAT_percent_creg_gprs_ind;
#endif

#ifndef __T_BAT_percent_creg_stat__
#define __T_BAT_percent_creg_stat__
typedef T_BAT_VAL_percent_creg_stat T_BAT_percent_creg_stat;
#endif

#ifndef __T_BAT_plus_cring_alt__
#define __T_BAT_plus_cring_alt__
typedef T_BAT_VAL_plus_cring_alt T_BAT_plus_cring_alt;
#endif

#ifndef __T_BAT_plus_cring_type2__
#define __T_BAT_plus_cring_type2__
typedef T_BAT_VAL_plus_cring_type2 T_BAT_plus_cring_type2;
#endif

#ifndef __T_BAT_plus_crsm_command__
#define __T_BAT_plus_crsm_command__
typedef T_BAT_VAL_plus_crsm_command T_BAT_plus_crsm_command;
#endif

#ifndef __T_BAT_plus_cscb_mode__
#define __T_BAT_plus_cscb_mode__
typedef T_BAT_VAL_plus_cscb_mode T_BAT_plus_cscb_mode;
#endif

#ifndef __T_BAT_plus_cscs_cs__
#define __T_BAT_plus_cscs_cs__
typedef T_BAT_VAL_plus_cscs_cs T_BAT_plus_cscs_cs;
#endif

#ifndef __T_BAT_plus_csms_bm__
#define __T_BAT_plus_csms_bm__
typedef T_BAT_VAL_plus_csms_bm T_BAT_plus_csms_bm;
#endif

#ifndef __T_BAT_plus_csms_mo__
#define __T_BAT_plus_csms_mo__
typedef T_BAT_VAL_plus_csms_mo T_BAT_plus_csms_mo;
#endif

#ifndef __T_BAT_plus_csms_mt__
#define __T_BAT_plus_csms_mt__
typedef T_BAT_VAL_plus_csms_mt T_BAT_plus_csms_mt;
#endif

#ifndef __T_BAT_plus_csms_service__
#define __T_BAT_plus_csms_service__
typedef T_BAT_VAL_plus_csms_service T_BAT_plus_csms_service;
#endif

#ifndef __T_BAT_plus_csns_mode__
#define __T_BAT_plus_csns_mode__
typedef T_BAT_VAL_plus_csns_mode T_BAT_plus_csns_mode;
#endif

#ifndef __T_BAT_plus_cssi_code1__
#define __T_BAT_plus_cssi_code1__
typedef T_BAT_VAL_plus_cssi_code1 T_BAT_plus_cssi_code1;
#endif

#ifndef __T_BAT_percent_cssn_direction__
#define __T_BAT_percent_cssn_direction__
typedef T_BAT_VAL_percent_cssn_direction T_BAT_percent_cssn_direction;
#endif

#ifndef __T_BAT_percent_cssn_trans_type__
#define __T_BAT_percent_cssn_trans_type__
typedef T_BAT_VAL_percent_cssn_trans_type T_BAT_percent_cssn_trans_type;
#endif

#ifndef __T_BAT_plus_cssu_code2__
#define __T_BAT_plus_cssu_code2__
typedef T_BAT_VAL_plus_cssu_code2 T_BAT_plus_cssu_code2;
#endif

#ifndef __T_BAT_percent_cstat_entity_id__
#define __T_BAT_percent_cstat_entity_id__
typedef T_BAT_VAL_percent_cstat_entity_id T_BAT_percent_cstat_entity_id;
#endif

#ifndef __T_BAT_percent_cstat_status__
#define __T_BAT_percent_cstat_status__
typedef T_BAT_VAL_percent_cstat_status T_BAT_percent_cstat_status;
#endif

#ifndef __T_BAT_plus_csvm_mode__
#define __T_BAT_plus_csvm_mode__
typedef T_BAT_VAL_plus_csvm_mode T_BAT_plus_csvm_mode;
#endif

#ifndef __T_BAT_percent_ctty_m__
#define __T_BAT_percent_ctty_m__
typedef T_BAT_VAL_percent_ctty_m T_BAT_percent_ctty_m;
#endif

#ifndef __T_BAT_percent_ctty_req__
#define __T_BAT_percent_ctty_req__
typedef T_BAT_VAL_percent_ctty_req T_BAT_percent_ctty_req;
#endif

#ifndef __T_BAT_percent_ctyi_neg__
#define __T_BAT_percent_ctyi_neg__
typedef T_BAT_VAL_percent_ctyi_neg T_BAT_percent_ctyi_neg;
#endif

#ifndef __T_BAT_plus_ctzu_onoff__
#define __T_BAT_plus_ctzu_onoff__
typedef T_BAT_VAL_plus_ctzu_onoff T_BAT_plus_ctzu_onoff;
#endif

#ifndef __T_BAT_plus_cusd_m__
#define __T_BAT_plus_cusd_m__
typedef T_BAT_VAL_plus_cusd_m T_BAT_plus_cusd_m;
#endif

#ifndef __T_BAT_plus_cusd_n__
#define __T_BAT_plus_cusd_n__
typedef T_BAT_VAL_plus_cusd_n T_BAT_plus_cusd_n;
#endif

#ifndef __T_BAT_plus_cusd_w_m__
#define __T_BAT_plus_cusd_w_m__
typedef T_BAT_VAL_plus_cusd_w_m T_BAT_plus_cusd_w_m;
#endif

#ifndef __T_BAT_plus_cusd_w_n__
#define __T_BAT_plus_cusd_w_n__
typedef T_BAT_VAL_plus_cusd_w_n T_BAT_plus_cusd_w_n;
#endif

#ifndef __T_BAT_percent_cust_mode__
#define __T_BAT_percent_cust_mode__
typedef T_BAT_VAL_percent_cust_mode T_BAT_percent_cust_mode;
#endif

#ifndef __T_BAT_percent_cwup_type__
#define __T_BAT_percent_cwup_type__
typedef T_BAT_VAL_percent_cwup_type T_BAT_percent_cwup_type;
#endif

#ifndef __T_BAT_percent_data_mode__
#define __T_BAT_percent_data_mode__
typedef T_BAT_VAL_percent_data_mode T_BAT_percent_data_mode;
#endif

#ifndef __T_BAT_percent_dinf_mode__
#define __T_BAT_percent_dinf_mode__
typedef T_BAT_VAL_percent_dinf_mode T_BAT_percent_dinf_mode;
#endif

#ifndef __T_BAT_plus_ds_dir__
#define __T_BAT_plus_ds_dir__
typedef T_BAT_VAL_plus_ds_dir T_BAT_plus_ds_dir;
#endif

#ifndef __T_BAT_plus_ds_neg__
#define __T_BAT_plus_ds_neg__
typedef T_BAT_VAL_plus_ds_neg T_BAT_plus_ds_neg;
#endif

#ifndef __T_BAT_percent_efrslt_result__
#define __T_BAT_percent_efrslt_result__
typedef T_BAT_VAL_percent_efrslt_result T_BAT_percent_efrslt_result;
#endif

#ifndef __T_BAT_percent_simef_mode__
#define __T_BAT_percent_simef_mode__
typedef T_BAT_VAL_percent_simef_mode T_BAT_percent_simef_mode;
#endif

#ifndef __T_BAT_percent_em_mode__
#define __T_BAT_percent_em_mode__
typedef T_BAT_VAL_percent_em_mode T_BAT_percent_em_mode;
#endif

#ifndef __T_BAT_percent_em_pco_type__
#define __T_BAT_percent_em_pco_type__
typedef T_BAT_VAL_percent_em_pco_type T_BAT_percent_em_pco_type;
#endif

#ifndef __T_BAT_percent_em_sin_type__
#define __T_BAT_percent_em_sin_type__
typedef T_BAT_VAL_percent_em_sin_type T_BAT_percent_em_sin_type;
#endif

#ifndef __T_BAT_plus_ext_error_err__
#define __T_BAT_plus_ext_error_err__
typedef T_BAT_VAL_plus_ext_error_err T_BAT_plus_ext_error_err;
#endif

#ifndef __T_BAT_plus_fap_pwd__
#define __T_BAT_plus_fap_pwd__
typedef T_BAT_VAL_plus_fap_pwd T_BAT_plus_fap_pwd;
#endif

#ifndef __T_BAT_plus_fap_sep__
#define __T_BAT_plus_fap_sep__
typedef T_BAT_VAL_plus_fap_sep T_BAT_plus_fap_sep;
#endif

#ifndef __T_BAT_plus_fap_sub__
#define __T_BAT_plus_fap_sub__
typedef T_BAT_VAL_plus_fap_sub T_BAT_plus_fap_sub;
#endif

#ifndef __T_BAT_plus_fbo_value__
#define __T_BAT_plus_fbo_value__
typedef T_BAT_VAL_plus_fbo_value T_BAT_plus_fbo_value;
#endif

#ifndef __T_BAT_plus_fbu_value__
#define __T_BAT_plus_fbu_value__
typedef T_BAT_VAL_plus_fbu_value T_BAT_plus_fbu_value;
#endif

#ifndef __T_BAT_plus_fclass_n__
#define __T_BAT_plus_fclass_n__
typedef T_BAT_VAL_plus_fclass_n T_BAT_plus_fclass_n;
#endif

#ifndef __T_BAT_plus_fcq_tq__
#define __T_BAT_plus_fcq_tq__
typedef T_BAT_VAL_plus_fcq_tq T_BAT_plus_fcq_tq;
#endif

#ifndef __T_BAT_plus_fcr_value__
#define __T_BAT_plus_fcr_value__
typedef T_BAT_VAL_plus_fcr_value T_BAT_plus_fcr_value;
#endif

#ifndef __T_BAT_plus_fea_value__
#define __T_BAT_plus_fea_value__
typedef T_BAT_VAL_plus_fea_value T_BAT_plus_fea_value;
#endif

#ifndef __T_BAT_plus_ffc_dfc__
#define __T_BAT_plus_ffc_dfc__
typedef T_BAT_VAL_plus_ffc_dfc T_BAT_plus_ffc_dfc;
#endif

#ifndef __T_BAT_plus_ffc_lnc__
#define __T_BAT_plus_ffc_lnc__
typedef T_BAT_VAL_plus_ffc_lnc T_BAT_plus_ffc_lnc;
#endif

#ifndef __T_BAT_plus_ffc_vrc__
#define __T_BAT_plus_ffc_vrc__
typedef T_BAT_VAL_plus_ffc_vrc T_BAT_plus_ffc_vrc;
#endif

#ifndef __T_BAT_plus_ffc_wdc__
#define __T_BAT_plus_ffc_wdc__
typedef T_BAT_VAL_plus_ffc_wdc T_BAT_plus_ffc_wdc;
#endif

#ifndef __T_BAT_plus_fhs_status__
#define __T_BAT_plus_fhs_status__
typedef T_BAT_VAL_plus_fhs_status T_BAT_plus_fhs_status;
#endif

#ifndef __T_BAT_plus_fie_value__
#define __T_BAT_plus_fie_value__
typedef T_BAT_VAL_plus_fie_value T_BAT_plus_fie_value;
#endif

#ifndef __T_BAT_plus_fit_action__
#define __T_BAT_plus_fit_action__
typedef T_BAT_VAL_plus_fit_action T_BAT_plus_fit_action;
#endif

#ifndef __T_BAT_plus_flo_flo_c__
#define __T_BAT_plus_flo_flo_c__
typedef T_BAT_VAL_plus_flo_flo_c T_BAT_plus_flo_flo_c;
#endif

#ifndef __T_BAT_plus_flo_flo_q__
#define __T_BAT_plus_flo_flo_q__
typedef T_BAT_VAL_plus_flo_flo_q T_BAT_plus_flo_flo_q;
#endif

#ifndef __T_BAT_plus_flp_value__
#define __T_BAT_plus_flp_value__
typedef T_BAT_VAL_plus_flp_value T_BAT_plus_flp_value;
#endif

#ifndef __T_BAT_plus_fms_value__
#define __T_BAT_plus_fms_value__
typedef T_BAT_VAL_plus_fms_value T_BAT_plus_fms_value;
#endif

#ifndef __T_BAT_plus_fps_ppr__
#define __T_BAT_plus_fps_ppr__
typedef T_BAT_VAL_plus_fps_ppr T_BAT_plus_fps_ppr;
#endif

#ifndef __T_BAT_plus_fsp_poll__
#define __T_BAT_plus_fsp_poll__
typedef T_BAT_VAL_plus_fsp_poll T_BAT_plus_fsp_poll;
#endif

#ifndef __T_BAT_plus_ifc_by_ta__
#define __T_BAT_plus_ifc_by_ta__
typedef T_BAT_VAL_plus_ifc_by_ta T_BAT_plus_ifc_by_ta;
#endif

#ifndef __T_BAT_plus_ifc_by_te__
#define __T_BAT_plus_ifc_by_te__
typedef T_BAT_VAL_plus_ifc_by_te T_BAT_plus_ifc_by_te;
#endif

#ifndef __T_BAT_plus_ilrr_rate__
#define __T_BAT_plus_ilrr_rate__
typedef T_BAT_VAL_plus_ilrr_rate T_BAT_plus_ilrr_rate;
#endif

#ifndef __T_BAT_plus_ipr_rate__
#define __T_BAT_plus_ipr_rate__
typedef T_BAT_VAL_plus_ipr_rate T_BAT_plus_ipr_rate;
#endif

#ifndef __T_BAT_percent_pbcf_ldn__
#define __T_BAT_percent_pbcf_ldn__
typedef T_BAT_VAL_percent_pbcf_ldn T_BAT_percent_pbcf_ldn;
#endif

#ifndef __T_BAT_percent_pbcf_lmn__
#define __T_BAT_percent_pbcf_lmn__
typedef T_BAT_VAL_percent_pbcf_lmn T_BAT_percent_pbcf_lmn;
#endif

#ifndef __T_BAT_percent_pbcf_lrn__
#define __T_BAT_percent_pbcf_lrn__
typedef T_BAT_VAL_percent_pbcf_lrn T_BAT_percent_pbcf_lrn;
#endif

#ifndef __T_BAT_percent_ppp_authprot__
#define __T_BAT_percent_ppp_authprot__
typedef T_BAT_VAL_percent_ppp_authprot T_BAT_percent_ppp_authprot;
#endif

#ifndef __T_BAT_percent_ppp_conn_type__
#define __T_BAT_percent_ppp_conn_type__
typedef T_BAT_VAL_percent_ppp_conn_type T_BAT_percent_ppp_conn_type;
#endif

#ifndef __T_BAT_percent_pvrf_ps1__
#define __T_BAT_percent_pvrf_ps1__
typedef T_BAT_VAL_percent_pvrf_ps1 T_BAT_percent_pvrf_ps1;
#endif

#ifndef __T_BAT_percent_pvrf_ps2__
#define __T_BAT_percent_pvrf_ps2__
typedef T_BAT_VAL_percent_pvrf_ps2 T_BAT_percent_pvrf_ps2;
#endif

#ifndef __T_BAT_percent_pvrf_type__
#define __T_BAT_percent_pvrf_type__
typedef T_BAT_VAL_percent_pvrf_type T_BAT_percent_pvrf_type;
#endif

#ifndef __T_BAT_percent_rdl_mode__
#define __T_BAT_percent_rdl_mode__
typedef T_BAT_VAL_percent_rdl_mode T_BAT_percent_rdl_mode;
#endif

#ifndef __T_BAT_percent_rdl_state__
#define __T_BAT_percent_rdl_state__
typedef T_BAT_VAL_percent_rdl_state T_BAT_percent_rdl_state;
#endif

#ifndef __T_BAT_percent_rdlb_mode__
#define __T_BAT_percent_rdlb_mode__
typedef T_BAT_VAL_percent_rdlb_mode T_BAT_percent_rdlb_mode;
#endif

#ifndef __T_BAT_percent_rdlb_state__
#define __T_BAT_percent_rdlb_state__
typedef T_BAT_VAL_percent_rdlb_state T_BAT_percent_rdlb_state;
#endif

#ifndef __T_BAT_percent_satcc_mode__
#define __T_BAT_percent_satcc_mode__
typedef T_BAT_VAL_percent_satcc_mode T_BAT_percent_satcc_mode;
#endif

#ifndef __T_BAT_percent_satt_cs__
#define __T_BAT_percent_satt_cs__
typedef T_BAT_VAL_percent_satt_cs T_BAT_percent_satt_cs;
#endif

#ifndef __T_BAT_percent_simins_n__
#define __T_BAT_percent_simins_n__
typedef T_BAT_VAL_percent_simins_n T_BAT_percent_simins_n;
#endif

#ifndef __T_BAT_percent_simrem_m__
#define __T_BAT_percent_simrem_m__
typedef T_BAT_VAL_percent_simrem_m T_BAT_percent_simrem_m;
#endif

#ifndef __T_BAT_percent_sncnt_rst__
#define __T_BAT_percent_sncnt_rst__
typedef T_BAT_VAL_percent_sncnt_rst T_BAT_percent_sncnt_rst;
#endif

#ifndef __T_BAT_percent_vts_mode__
#define __T_BAT_percent_vts_mode__
typedef T_BAT_VAL_percent_vts_mode T_BAT_percent_vts_mode;
#endif

#ifndef __T_BAT_plus_ws46_n__
#define __T_BAT_plus_ws46_n__
typedef T_BAT_VAL_plus_ws46_n T_BAT_plus_ws46_n;
#endif

#ifndef __T_BAT_percent_ctzv_mode__
#define __T_BAT_percent_ctzv_mode__
typedef T_BAT_VAL_percent_ctzv_mode T_BAT_percent_ctzv_mode;
#endif

// VAR-FF: REL99  
#ifndef __T_BAT_percent_cmgrs_mode__
#define __T_BAT_percent_cmgrs_mode__
typedef T_BAT_VAL_percent_cmgrs_mode T_BAT_percent_cmgrs_mode;
#endif

#ifndef __T_BAT_percent_creg_rt__
#define __T_BAT_percent_creg_rt__
typedef T_BAT_VAL_percent_creg_rt T_BAT_percent_creg_rt;
#endif

#ifndef __T_BAT_plus_cgdcont_ctrl_ip_adderss__
#define __T_BAT_plus_cgdcont_ctrl_ip_adderss__
typedef T_BAT_VAL_plus_cgdcont_cntrl_ip_address T_BAT_plus_cgdcont_ctrl_ip_adderss;
#endif

// VAR-FF: REL99  
#ifndef __T_BAT_plus_cgtft_ctrl_tft_pf_entry__
#define __T_BAT_plus_cgtft_ctrl_tft_pf_entry__
typedef T_BAT_VAL_plus_cgtft_ctrl_tft_pf_entry T_BAT_plus_cgtft_ctrl_tft_pf_entry;
#endif

// VAR-FF: SIM_PERS  
#ifndef __T_BAT_percent_mepd_sup_info__
#define __T_BAT_percent_mepd_sup_info__
typedef T_BAT_VAL_percent_mepd_sup_info T_BAT_percent_mepd_sup_info;
#endif

#ifndef __T_BAT_percent_csq_mode__
#define __T_BAT_percent_csq_mode__
typedef T_BAT_VAL_percent_csq_mode T_BAT_percent_csq_mode;
#endif

#ifndef __T_BAT_percent_cuscfg_mod__
#define __T_BAT_percent_cuscfg_mod__
typedef T_BAT_VAL_percent_cuscfg_mod T_BAT_percent_cuscfg_mod;
#endif

#ifndef __T_BAT_percent_cuscfg_stat__
#define __T_BAT_percent_cuscfg_stat__
typedef T_BAT_VAL_percent_cuscfg_stat T_BAT_percent_cuscfg_stat;
#endif

#ifndef __T_BAT_percent_cniv_mode__
#define __T_BAT_percent_cniv_mode__
typedef T_BAT_VAL_percent_cniv_mode T_BAT_percent_cniv_mode;
#endif

#ifndef __T_BAT_percent_pbci_mode__
#define __T_BAT_percent_pbci_mode__
typedef T_BAT_VAL_percent_pbci_mode T_BAT_percent_pbci_mode;
#endif

#ifndef __T_BAT_percent_pbci_update_type__
#define __T_BAT_percent_pbci_update_type__
typedef T_BAT_VAL_percent_pbci_update_type T_BAT_percent_pbci_update_type;
#endif

#ifndef __T_BAT_no_parameter__
#define __T_BAT_no_parameter__
/*
 * Dummy structure
 * CCDGEN:WriteStruct_Count==2419
 */
typedef struct
{
  U8                        bat_dummy;                /*<  0:  1> dummy parameter                                    */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_no_parameter;
#endif

#ifndef __T_BAT_res_que_percent_als__
#define __T_BAT_res_que_percent_als__
/*
 * The query answer structure of the %ALS command.
 * CCDGEN:WriteStruct_Count==2420
 */
typedef struct
{
  T_BAT_percent_als_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_als_mode ALS Mode     */
} T_BAT_res_que_percent_als;
#endif

#ifndef __T_BAT_cmd_set_percent_als__
#define __T_BAT_cmd_set_percent_als__
/*
 * The set command structure of the %ALS command.
 * CCDGEN:WriteStruct_Count==2421
 */
typedef struct
{
  T_BAT_percent_als_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_als_mode ALS Mode     */
} T_BAT_cmd_set_percent_als;
#endif

#ifndef __T_BAT_res_tst_percent_als__
#define __T_BAT_res_tst_percent_als__
/*
 * The test answer structure of the %ALS command.
 * CCDGEN:WriteStruct_Count==2422
 */
typedef struct
{
  T_BAT_percent_als_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_als_mode ALS Mode     */
} T_BAT_res_tst_percent_als;
#endif

#ifndef __T_BAT_res_que_percent_atr__
#define __T_BAT_res_que_percent_atr__
/*
 * The query answer structure of the %ATR command.
 * CCDGEN:WriteStruct_Count==2423
 */
typedef struct
{
  T_BAT_percent_atr_phase   phase;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_atr_phase GSM Phase   */
  U8                        c_atr;                    /*<  4:  1> counter                                            */
  U8                        atr[BAT_MAX_ATR_LEN];     /*<  5: 33> answer to reset                                    */
  U8                        _align0;                  /*< 38:  1> alignment                                          */
  U8                        _align1;                  /*< 39:  1> alignment                                          */
} T_BAT_res_que_percent_atr;
#endif

#ifndef __T_BAT_res_que_percent_band__
#define __T_BAT_res_que_percent_band__
/*
 * The query answer structure of the %BAND command.
 * CCDGEN:WriteStruct_Count==2424
 */
typedef struct
{
  T_BAT_percent_band_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_band_mode set the radio band switch mode */
  T_BAT_percent_band_band   band;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_band_band BAND Type   */
} T_BAT_res_que_percent_band;
#endif

#ifndef __T_BAT_cmd_set_percent_band__
#define __T_BAT_cmd_set_percent_band__
/*
 * The set command structure of the %BAND command.
 * CCDGEN:WriteStruct_Count==2425
 */
typedef struct
{
  T_BAT_percent_band_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_band_mode set the radio band switch mode */
  T_BAT_percent_band_band   band;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_band_band BAND Type   */
} T_BAT_cmd_set_percent_band;
#endif

#ifndef __T_BAT_res_tst_percent_band__
#define __T_BAT_res_tst_percent_band__
/*
 * The test answer structure of the %BAND command.
 * CCDGEN:WriteStruct_Count==2426
 */
typedef struct
{
  T_BAT_percent_band_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_band_mode set the radio band switch mode */
  T_BAT_percent_band_band   band;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_band_band BAND Type   */
} T_BAT_res_tst_percent_band;
#endif

#ifndef __T_BAT_cmd_andc__
#define __T_BAT_cmd_andc__
/*
 * The set command structure of the &C command.
 * CCDGEN:WriteStruct_Count==2427
 */
typedef struct
{
  T_BAT_andc_value          value;                    /*<  0:  4> (enum=32bit)<->T_BAT_andc_value Value              */
} T_BAT_cmd_andc;
#endif

#ifndef __T_BAT_res_que_plus_cacm__
#define __T_BAT_res_que_plus_cacm__
/*
 * The query answer structure of the +CACM command.
 * CCDGEN:WriteStruct_Count==2428
 */
typedef struct
{
  U32                       acm;                      /*<  0:  4> Accumulated Call Meter                             */
} T_BAT_res_que_plus_cacm;
#endif

#ifndef __T_BAT_cmd_set_plus_cacm__
#define __T_BAT_cmd_set_plus_cacm__
/*
 * The set command structure of the +CACM command.
 * CCDGEN:WriteStruct_Count==2429
 */
typedef struct
{
  U8                        c_passwd;                 /*<  0:  1> counter                                            */
  U8                        passwd[BAT_MAX_CACM_PASSWD_LEN]; /*<  1:  8> SIM PIN2                                           */
  U8                        _align0;                  /*<  9:  1> alignment                                          */
  U8                        _align1;                  /*< 10:  1> alignment                                          */
  U8                        _align2;                  /*< 11:  1> alignment                                          */
} T_BAT_cmd_set_plus_cacm;
#endif

#ifndef __T_BAT_res_que_plus_camm__
#define __T_BAT_res_que_plus_camm__
/*
 * The query answer structure of the +CAMM command.
 * CCDGEN:WriteStruct_Count==2430
 */
typedef struct
{
  S32                       acmmax;                   /*<  0:  4> Accumulated Call Meter Maximum Value               */
} T_BAT_res_que_plus_camm;
#endif

#ifndef __T_BAT_cmd_set_plus_camm__
#define __T_BAT_cmd_set_plus_camm__
/*
 * The set command structure of the +CAMM command.
 * CCDGEN:WriteStruct_Count==2431
 */
typedef struct
{
  S32                       acmmax;                   /*<  0:  4> Accumulated Call Meter Maximum Value               */
  U8                        v_passwd;                 /*<  4:  1> valid-flag                                         */
  U8                        c_passwd;                 /*<  5:  1> counter                                            */
  U8                        passwd[BAT_MAX_CAMM_PASSWD_LEN]; /*<  6:  8> SIM PIN2 String                                    */
  U8                        _align0;                  /*< 14:  1> alignment                                          */
  U8                        _align1;                  /*< 15:  1> alignment                                          */
} T_BAT_cmd_set_plus_camm;
#endif

#ifndef __T_BAT_cmd_set_plus_caoc__
#define __T_BAT_cmd_set_plus_caoc__
/*
 * The set command structure of the +CAOC command.
 * CCDGEN:WriteStruct_Count==2432
 */
typedef struct
{
  T_BAT_plus_caoc_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_caoc_mode Select mode. Only mode 0 is supported on BAT */
} T_BAT_cmd_set_plus_caoc;
#endif

#ifndef __T_BAT_res_set_plus_caoc__
#define __T_BAT_res_set_plus_caoc__
/*
 * The set response structure of the +CAOC command.
 * CCDGEN:WriteStruct_Count==2433
 */
typedef struct
{
  U32                       ccm;                      /*<  0:  4> Current Call Meter                                 */
} T_BAT_res_set_plus_caoc;
#endif

#ifndef __T_BAT_res_set_plus_cbc__
#define __T_BAT_res_set_plus_cbc__
/*
 * The set response structure of the +CBC command.
 * CCDGEN:WriteStruct_Count==2434
 */
typedef struct
{
  T_BAT_plus_cbc_bsc        bsc;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cbc_bsc Battery Connection Status */
  T_BAT_plus_cbc_bcl        bcl;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_cbc_bcl Battery Charge Level */
} T_BAT_res_set_plus_cbc;
#endif

#ifndef __T_BAT_res_que_percent_cbhz__
#define __T_BAT_res_que_percent_cbhz__
/*
 * The query answer structure of the %CBHZ command.
 * CCDGEN:WriteStruct_Count==2435
 */
typedef struct
{
  T_BAT_percent_cbhz_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cbhz_mode CBHZ mode   */
  U8                        dcs;                      /*<  4:  1> Data coding scheme (3GPP TS 23.038)                */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
  T_BAT_percent_cbhz_timeout timeout;                 /*<  8:  4> (enum=32bit)<->T_BAT_percent_cbhz_timeout CBHZ timeout */
} T_BAT_res_que_percent_cbhz;
#endif

#ifndef __T_BAT_cmd_set_percent_cbhz__
#define __T_BAT_cmd_set_percent_cbhz__
/*
 * The set command structure of the %CBHZ command.
 * CCDGEN:WriteStruct_Count==2436
 */
typedef struct
{
  T_BAT_percent_cbhz_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cbhz_mode CBHZ mode   */
  S16                       dcs;                      /*<  4:  2> Data coding scheme (3GPP TS 23.038)                */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
  T_BAT_percent_cbhz_timeout timeout;                 /*<  8:  4> (enum=32bit)<->T_BAT_percent_cbhz_timeout CBHZ timeout */
} T_BAT_cmd_set_percent_cbhz;
#endif

#ifndef __T_BAT_res_tst_percent_cbhz__
#define __T_BAT_res_tst_percent_cbhz__
/*
 * The test answer structure of the %CBHZ command.
 * CCDGEN:WriteStruct_Count==2437
 */
typedef struct
{
  T_BAT_percent_cbhz_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cbhz_mode CBHZ mode   */
  U8                        dcs;                      /*<  4:  1> Data coding scheme (3GPP TS 23.038)                */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
  T_BAT_percent_cbhz_timeout timeout;                 /*<  8:  4> (enum=32bit)<->T_BAT_percent_cbhz_timeout CBHZ timeout */
} T_BAT_res_tst_percent_cbhz;
#endif

#ifndef __T_BAT_res_uns_plus_cbm__
#define __T_BAT_res_uns_plus_cbm__
/*
 * The unsolicited result code structure of the +CBM command.
 * CCDGEN:WriteStruct_Count==2438
 */
typedef struct
{
  U8                        c_pdu;                    /*<  0:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<  1:176> PDU data                                           */
  U8                        _align0;                  /*<177:  1> alignment                                          */
  U8                        _align1;                  /*<178:  1> alignment                                          */
  U8                        _align2;                  /*<179:  1> alignment                                          */
} T_BAT_res_uns_plus_cbm;
#endif

#ifndef __T_BAT_res_uns_plus_cbmi__
#define __T_BAT_res_uns_plus_cbmi__
/*
 * The unsolicited result code structure of the +CBMI command.
 * CCDGEN:WriteStruct_Count==2439
 */
typedef struct
{
  T_BAT_sms_mem             sms_mem;                  /*<  0:  4> (enum=32bit)<->T_BAT_sms_mem Memory area for SMS   */
  U16                       sms_index;                /*<  4:  2> Index of message                                   */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_res_uns_plus_cbmi;
#endif

#ifndef __T_BAT_res_que_plus_cbst__
#define __T_BAT_res_que_plus_cbst__
/*
 * The query answer structure of the +CBST command.
 * CCDGEN:WriteStruct_Count==2440
 */
typedef struct
{
  T_BAT_plus_cbst_speed     speed;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cbst_speed CBST Speed    */
  T_BAT_plus_cbst_name      name;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_cbst_name CBST name      */
  T_BAT_plus_cbst_ce        ce;                       /*<  8:  4> (enum=32bit)<->T_BAT_plus_cbst_ce CBST ce          */
} T_BAT_res_que_plus_cbst;
#endif

#ifndef __T_BAT_cmd_set_plus_cbst__
#define __T_BAT_cmd_set_plus_cbst__
/*
 * The set command structure of the +CBST command.
 * CCDGEN:WriteStruct_Count==2441
 */
typedef struct
{
  T_BAT_plus_cbst_speed     speed;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cbst_speed CBST Speed    */
  T_BAT_plus_cbst_name      name;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_cbst_name CBST name      */
  T_BAT_plus_cbst_ce        ce;                       /*<  8:  4> (enum=32bit)<->T_BAT_plus_cbst_ce CBST ce          */
} T_BAT_cmd_set_plus_cbst;
#endif

#ifndef __T_BAT_res_que_percent_ccbs__
#define __T_BAT_res_que_percent_ccbs__
/*
 * The query answer structure of the %CCBS command.
 * CCDGEN:WriteStruct_Count==2442
 */
typedef struct
{
  T_BAT_percent_ccbs_ind    ind;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ccbs_ind type of CCBS Indication */
  T_BAT_percent_ccbs_stat   stat;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_ccbs_stat CCBS status */
  T_BAT_percent_ccbs_idx    idx;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_ccbs_idx CCBS Index   */
  U8                        v_number;                 /*< 12:  1> valid-flag                                         */
  U8                        c_number;                 /*< 13:  1> counter                                            */
  U8                        number[BAT_MAX_CCBS_NUMBER_LEN]; /*< 14: 39> Number                                             */
  U8                        _align0;                  /*< 53:  1> alignment                                          */
  S16                       type;                     /*< 54:  2> type of number                                     */
  U8                        v_subaddr;                /*< 56:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 57:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 58: 20> Subaddress                                         */
  S16                       satype;                   /*< 78:  2> Type of subaddress                                 */
  T_BAT_bearer_class        bearer_class;             /*< 80:  4> (enum=32bit)<->T_BAT_bearer_class Class Type       */
  T_BAT_percent_ccbs_ptn    ptn;                      /*< 84:  4> (enum=32bit)<->T_BAT_percent_ccbs_ptn alerting pattern */
} T_BAT_res_que_percent_ccbs;
#endif

#ifndef __T_BAT_cmd_set_percent_ccbs__
#define __T_BAT_cmd_set_percent_ccbs__
/*
 * The set command structure of the %CCBS command.
 * CCDGEN:WriteStruct_Count==2443
 */
typedef struct
{
  T_BAT_percent_ccbs_idx    idx;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ccbs_idx CCBS Index   */
} T_BAT_cmd_set_percent_ccbs;
#endif

#ifndef __T_BAT_res_uns_percent_ccbs__
#define __T_BAT_res_uns_percent_ccbs__
/*
 * The unsolicited result code structure of the %CCBS command.
 * CCDGEN:WriteStruct_Count==2444
 */
typedef struct
{
  T_BAT_percent_ccbs_ind    ind;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ccbs_ind type of CCBS Indication */
  T_BAT_percent_ccbs_stat   stat;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_ccbs_stat CCBS status */
  T_BAT_percent_ccbs_idx    idx;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_ccbs_idx CCBS Index   */
  U8                        v_number;                 /*< 12:  1> valid-flag                                         */
  U8                        c_number;                 /*< 13:  1> counter                                            */
  U8                        number[BAT_MAX_CCBS_NUMBER_LEN]; /*< 14: 39> Number                                             */
  U8                        _align0;                  /*< 53:  1> alignment                                          */
  S16                       type;                     /*< 54:  2> type of number                                     */
  U8                        v_subaddr;                /*< 56:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 57:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 58: 20> Subaddress                                         */
  S16                       satype;                   /*< 78:  2> Type of subaddress                                 */
  T_BAT_bearer_class        bearer_class;             /*< 80:  4> (enum=32bit)<->T_BAT_bearer_class Class Type       */
  T_BAT_percent_ccbs_ptn    ptn;                      /*< 84:  4> (enum=32bit)<->T_BAT_percent_ccbs_ptn alerting pattern */
} T_BAT_res_uns_percent_ccbs;
#endif

#ifndef __T_BAT_res_uns_plus_cccm__
#define __T_BAT_res_uns_plus_cccm__
/*
 * The unsolicited result code structure of the +CCCM command.
 * CCDGEN:WriteStruct_Count==2445
 */
typedef struct
{
  U32                       ccm;                      /*<  0:  4> Current Call Meter                                 */
} T_BAT_res_uns_plus_cccm;
#endif

#ifndef __T_BAT_res_uns_percent_cccn__
#define __T_BAT_res_uns_percent_cccn__
/*
 * The unsolicited result code structure of the %CCCN command.
 * CCDGEN:WriteStruct_Count==2446
 */
typedef struct
{
  T_BAT_percent_cccn_direction direction;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cccn_direction Direction */
  U16                       cid;                      /*<  4:  2> Call identification number as described in GSM 02.30 subclause 4.5.5.1 */
  U8                        c_facility;               /*<  6:  1> counter                                            */
  U8                        facility[BAT_MAX_CCCN_FACILITY_LEN]; /*<  7:251> Facility IE string                                 */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_res_uns_percent_cccn;
#endif

#ifndef __T_BAT_cmd_set_plus_ccfc__
#define __T_BAT_cmd_set_plus_ccfc__
/*
 * The set command structure of the +CCFC command.
 * CCDGEN:WriteStruct_Count==2447
 */
typedef struct
{
  T_BAT_plus_ccfc_reason    reason;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccfc_reason CCFC reason  */
  T_BAT_plus_ccfc_mode      mode;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccfc_mode CCFC mode      */
  U8                        v_number;                 /*<  8:  1> valid-flag                                         */
  U8                        c_number;                 /*<  9:  1> counter                                            */
  U8                        number[BAT_MAX_CCFC_NUMBER_LEN]; /*< 10: 39> number                                             */
  U8                        _align0;                  /*< 49:  1> alignment                                          */
  S16                       type;                     /*< 50:  2> Type of address                                    */
  U8                        v_subaddr;                /*< 52:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 53:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 54: 20> Subaddress                                         */
  S16                       satype;                   /*< 74:  2> Type of subaddress                                 */
  T_BAT_plus_ccfc_bearer_class bearer_class;          /*< 76:  4> (enum=32bit)<->T_BAT_plus_ccfc_bearer_class Class  */
  T_BAT_plus_ccfc_time      time;                     /*< 80:  4> (enum=32bit)<->T_BAT_plus_ccfc_time time in seconds before call is forwarded (when 'no reply' is enabled or queried) */
} T_BAT_cmd_set_plus_ccfc;
#endif

#ifndef __T_BAT_res_set_plus_ccfc__
#define __T_BAT_res_set_plus_ccfc__
/*
 * The set response structure of the +CCFC command.
 * CCDGEN:WriteStruct_Count==2448
 */
typedef struct
{
  T_BAT_plus_ccfc_status    status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccfc_status status       */
  T_BAT_plus_ccfc_bearer_class bearer_class;          /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccfc_bearer_class Class  */
  U8                        v_number;                 /*<  8:  1> valid-flag                                         */
  U8                        c_number;                 /*<  9:  1> counter                                            */
  U8                        number[BAT_MAX_CCFC_NUMBER_LEN]; /*< 10: 39> number                                             */
  U8                        _align0;                  /*< 49:  1> alignment                                          */
  S16                       type;                     /*< 50:  2> Type of address                                    */
  U8                        v_subaddr;                /*< 52:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 53:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 54: 20> Subaddress                                         */
  S16                       satype;                   /*< 74:  2> Type of subaddress                                 */
  T_BAT_plus_ccfc_time      time;                     /*< 76:  4> (enum=32bit)<->T_BAT_plus_ccfc_time time in seconds before call is forwarded (when 'no reply' is enabled or queried) */
} T_BAT_res_set_plus_ccfc;
#endif

#ifndef __T_BAT_res_que_plus_cclk__
#define __T_BAT_res_que_plus_cclk__
/*
 * The query answer structure of the +CCLK command.
 * CCDGEN:WriteStruct_Count==2449
 */
typedef struct
{
  U8                        year;                     /*<  0:  1> year                                               */
  U8                        month;                    /*<  1:  1> month                                              */
  U8                        day;                      /*<  2:  1> day                                                */
  U8                        hour;                     /*<  3:  1> hour                                               */
  U8                        minutes;                  /*<  4:  1> minutes                                            */
  U8                        seconds;                  /*<  5:  1> seconds                                            */
  S8                        time_zone;                /*<  6:  1> time zone                                          */
  U8                        _align0;                  /*<  7:  1> alignment                                          */
} T_BAT_res_que_plus_cclk;
#endif

#ifndef __T_BAT_cmd_set_plus_cclk__
#define __T_BAT_cmd_set_plus_cclk__
/*
 * The set command structure of the +CCLK command.
 * CCDGEN:WriteStruct_Count==2450
 */
typedef struct
{
  U8                        year;                     /*<  0:  1> year                                               */
  U8                        month;                    /*<  1:  1> month                                              */
  U8                        day;                      /*<  2:  1> day                                                */
  U8                        hour;                     /*<  3:  1> hour                                               */
  U8                        minutes;                  /*<  4:  1> minutes                                            */
  U8                        seconds;                  /*<  5:  1> seconds                                            */
  S8                        time_zone;                /*<  6:  1> time zone                                          */
  U8                        _align0;                  /*<  7:  1> alignment                                          */
} T_BAT_cmd_set_plus_cclk;
#endif

#ifndef __T_BAT_res_que_plus_ccug__
#define __T_BAT_res_que_plus_ccug__
/*
 * The query answer structure of the +CCUG command.
 * CCDGEN:WriteStruct_Count==2451
 */
typedef struct
{
  T_BAT_plus_ccug_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccug_n CCUG mode         */
  T_BAT_plus_ccug_index     index;                    /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccug_index index         */
  T_BAT_plus_ccug_info      info;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_ccug_info info           */
} T_BAT_res_que_plus_ccug;
#endif

#ifndef __T_BAT_cmd_set_plus_ccug__
#define __T_BAT_cmd_set_plus_ccug__
/*
 * The set command structure of the +CCUG command.
 * CCDGEN:WriteStruct_Count==2452
 */
typedef struct
{
  T_BAT_plus_ccug_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccug_n CCUG mode         */
  T_BAT_plus_ccug_index     index;                    /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccug_index index         */
  T_BAT_plus_ccug_info      info;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_ccug_info info           */
} T_BAT_cmd_set_plus_ccug;
#endif

#ifndef __T_BAT_cmd_set_plus_ccwa__
#define __T_BAT_cmd_set_plus_ccwa__
/*
 * The set command structure of the +CCWA command.
 * CCDGEN:WriteStruct_Count==2453
 */
typedef struct
{
  T_BAT_plus_ccwa_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccwa_mode Call waiting mode */
  T_BAT_plus_ccwa_bearer_class bearer_class;          /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccwa_bearer_class Sum of integers each representing a class of information */
} T_BAT_cmd_set_plus_ccwa;
#endif

#ifndef __T_BAT_res_set_plus_ccwa__
#define __T_BAT_res_set_plus_ccwa__
/*
 * The set response structure of the +CCWA command.
 * CCDGEN:WriteStruct_Count==2454
 */
typedef struct
{
  T_BAT_plus_ccwa_status    status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccwa_status Actiavtion status */
  T_BAT_plus_ccwa_bearer_class bearer_class;          /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccwa_bearer_class Sum of integers each representing a class of information */
} T_BAT_res_set_plus_ccwa;
#endif

#ifndef __T_BAT_res_uns_plus_ccwa__
#define __T_BAT_res_uns_plus_ccwa__
/*
 * The unsolicited result code structure of the +CCWA command.
 * CCDGEN:WriteStruct_Count==2455
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CCWA_NUMBER_LEN]; /*<  1: 32> Number                                             */
  U8                        type;                     /*< 33:  1> Type of address                                    */
  U8                        _align0;                  /*< 34:  1> alignment                                          */
  U8                        _align1;                  /*< 35:  1> alignment                                          */
  T_BAT_plus_ccwa_bearer_class bearer_class;          /*< 36:  4> (enum=32bit)<->T_BAT_plus_ccwa_bearer_class Sum of integers each representing a class of information */
  U8                        v_alpha;                  /*< 40:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 41:  1> counter                                            */
  U8                        alpha[BAT_MAX_PHB_NUM_LEN]; /*< 42: 44> alphanumeric representation of &lt;number&gt;      */
  U8                        _align2;                  /*< 86:  1> alignment                                          */
  U8                        _align3;                  /*< 87:  1> alignment                                          */
  T_BAT_cli                 cli;                      /*< 88:  4> (enum=32bit)<->T_BAT_cli CLI validity              */
} T_BAT_res_uns_plus_ccwa;
#endif

#ifndef __T_BAT_cmd_set_plus_ccwa_w__
#define __T_BAT_cmd_set_plus_ccwa_w__
/*
 * The set command structure of the +CCWA_W command.
 * CCDGEN:WriteStruct_Count==2456
 */
typedef struct
{
  T_BAT_plus_ccwa_w_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccwa_w_mode Call waiting mode */
  T_BAT_plus_ccwa_w_bearer_class bearer_class;        /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccwa_w_bearer_class Sum of integers each representing a class of information */
} T_BAT_cmd_set_plus_ccwa_w;
#endif

#ifndef __T_BAT_res_set_plus_ccwa_w__
#define __T_BAT_res_set_plus_ccwa_w__
/*
 * The set response structure of the +CCWA_W command.
 * CCDGEN:WriteStruct_Count==2457
 */
typedef struct
{
  T_BAT_plus_ccwa_w_status  status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_ccwa_w_status Actiavtion status */
  T_BAT_plus_ccwa_w_bearer_class bearer_class;        /*<  4:  4> (enum=32bit)<->T_BAT_plus_ccwa_w_bearer_class Sum of integers each representing a class of information */
} T_BAT_res_set_plus_ccwa_w;
#endif

#ifndef __T_BAT_res_uns_plus_ccwa_w__
#define __T_BAT_res_uns_plus_ccwa_w__
/*
 * The unsolicited result code structure of the +CCWA_W command.
 * CCDGEN:WriteStruct_Count==2458
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CCWA_NUMBER_LEN]; /*<  1: 32> Number                                             */
  U8                        type;                     /*< 33:  1> Type of address                                    */
  U8                        _align0;                  /*< 34:  1> alignment                                          */
  U8                        _align1;                  /*< 35:  1> alignment                                          */
  T_BAT_plus_ccwa_w_bearer_class bearer_class;        /*< 36:  4> (enum=32bit)<->T_BAT_plus_ccwa_w_bearer_class Sum of integers each representing a class of information */
  U8                        v_alpha16;                /*< 40:  1> valid-flag                                         */
  U8                        c_alpha16;                /*< 41:  1> counter                                            */
  U16                       alpha16[BAT_MAX_PHB_NUM_LEN]; /*< 42: 88> alphanumeric representation of &lt;number&gt;      */
  U8                        _align2;                  /*<130:  1> alignment                                          */
  U8                        _align3;                  /*<131:  1> alignment                                          */
  T_BAT_cli                 cli;                      /*<132:  4> (enum=32bit)<->T_BAT_cli CLI validity              */
} T_BAT_res_uns_plus_ccwa_w;
#endif

#ifndef __T_BAT_res_que_plus_cdip__
#define __T_BAT_res_que_plus_cdip__
/*
 * The query answer structure of the +CDIP command
 * CCDGEN:WriteStruct_Count==2459
 */
typedef struct
{
  T_BAT_plus_cdip_m         m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cdip_m subscriber CDIP service status in the network */
} T_BAT_res_que_plus_cdip;
#endif

#ifndef __T_BAT_res_uns_plus_cdip__
#define __T_BAT_res_uns_plus_cdip__
/*
 * The unsolicited result code structure of the +CDIP command.
 * CCDGEN:WriteStruct_Count==2460
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CDIP_NUMBER_LEN]; /*<  1: 20> number                                             */
  U8                        type;                     /*< 21:  1> Type of address                                    */
  U8                        v_subaddr;                /*< 22:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 23:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 24: 20> Subaddress                                         */
  S16                       satype;                   /*< 44:  2> Type of subaddress                                 */
  U8                        _align0;                  /*< 46:  1> alignment                                          */
  U8                        _align1;                  /*< 47:  1> alignment                                          */
} T_BAT_res_uns_plus_cdip;
#endif

#ifndef __T_BAT_res_uns_plus_cds__
#define __T_BAT_res_uns_plus_cds__
/*
 * The unsolicited result code structure of the +CDS command.
 * CCDGEN:WriteStruct_Count==2461
 */
typedef struct
{
  U8                        c_pdu;                    /*<  0:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<  1:176> PDU data                                           */
  U8                        _align0;                  /*<177:  1> alignment                                          */
  U8                        _align1;                  /*<178:  1> alignment                                          */
  U8                        _align2;                  /*<179:  1> alignment                                          */
} T_BAT_res_uns_plus_cds;
#endif

#ifndef __T_BAT_res_set_plus_ceer__
#define __T_BAT_res_set_plus_ceer__
/*
 * The set response structure of the +CEER command.
 * CCDGEN:WriteStruct_Count==2462
 */
typedef struct
{
  T_BAT_plus_ceer_definedby definedby;                /*<  0:  4> (enum=32bit)<->T_BAT_plus_ceer_definedby Cause is defined by */
  T_BAT_plus_ceer_originatingside originatingside;    /*<  4:  4> (enum=32bit)<->T_BAT_plus_ceer_originatingside Originating Side */
  T_BAT_plus_ceer_originatingentity originatingentity; /*<  8:  4> (enum=32bit)<->T_BAT_plus_ceer_originatingentity Originating Entity */
  U8                        causevalue;               /*< 12:  1> Cause Value                                        */
  U8                        _align0;                  /*< 13:  1> alignment                                          */
  U8                        _align1;                  /*< 14:  1> alignment                                          */
  U8                        _align2;                  /*< 15:  1> alignment                                          */
} T_BAT_res_set_plus_ceer;
#endif

#ifndef __T_BAT_res_que_plus_cfun__
#define __T_BAT_res_que_plus_cfun__
/*
 * The query answer structure of the +CFUN command.
 * CCDGEN:WriteStruct_Count==2463
 */
typedef struct
{
  T_BAT_plus_cfun_fun       fun;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cfun_fun fun             */
} T_BAT_res_que_plus_cfun;
#endif

#ifndef __T_BAT_cmd_set_plus_cfun__
#define __T_BAT_cmd_set_plus_cfun__
/*
 * The set command structure of the +CFUN command.
 * CCDGEN:WriteStruct_Count==2464
 */
typedef struct
{
  T_BAT_plus_cfun_fun       fun;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cfun_fun fun             */
  T_BAT_plus_cfun_rst       rst;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_cfun_rst Reset           */
} T_BAT_cmd_set_plus_cfun;
#endif

#ifndef __T_BAT_res_que_percent_cgaatt__
#define __T_BAT_res_que_percent_cgaatt__
/*
 * The query answer structure of the %CGAATT command.
 * CCDGEN:WriteStruct_Count==2465
 */
typedef struct
{
  T_BAT_percent_cgaatt_att_m att_m;                   /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgaatt_att_m Attach mode */
  T_BAT_percent_cgaatt_det_m det_m;                   /*<  4:  4> (enum=32bit)<->T_BAT_percent_cgaatt_det_m Detach mode */
} T_BAT_res_que_percent_cgaatt;
#endif

#ifndef __T_BAT_cmd_set_percent_cgaatt__
#define __T_BAT_cmd_set_percent_cgaatt__
/*
 * The set command structure of the %CGAATT command.
 * CCDGEN:WriteStruct_Count==2466
 */
typedef struct
{
  T_BAT_percent_cgaatt_att_m att_m;                   /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgaatt_att_m Attach mode */
  T_BAT_percent_cgaatt_det_m det_m;                   /*<  4:  4> (enum=32bit)<->T_BAT_percent_cgaatt_det_m Detach mode */
} T_BAT_cmd_set_percent_cgaatt;
#endif

#ifndef __T_BAT_res_que_plus_cgact__
#define __T_BAT_res_que_plus_cgact__
/*
 * The query answer structure of the +CGACT command.
 * CCDGEN:WriteStruct_Count==2467
 */
typedef struct
{
  T_BAT_plus_cgact_state    state;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgact_state state        */
  T_BAT_pdp_cid             cid;                      /*<  4:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_res_que_plus_cgact;
#endif

#ifndef __T_BAT_cmd_set_plus_cgact__
#define __T_BAT_cmd_set_plus_cgact__
/*
 * The set command structure of the +CGACT command.
 * CCDGEN:WriteStruct_Count==2468
 */
typedef struct
{
  T_BAT_plus_cgact_state    state;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgact_state state        */
  U8                        _align0;                  /*<  4:  1> alignment                                          */
  U8                        _align1;                  /*<  5:  1> alignment                                          */
  U8                        _align2;                  /*<  6:  1> alignment                                          */
  U8                        c_cid;                    /*<  7:  1> counter                                            */
  T_BAT_pdp_cid             cid[BAT_MAX_PDP_CID];     /*<  8: 44> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_cmd_set_plus_cgact;
#endif

#ifndef __T_BAT_cmd_set_plus_cgans__
#define __T_BAT_cmd_set_plus_cgans__
/*
 * The set command structure of the +CGANS command.
 * CCDGEN:WriteStruct_Count==2469
 */
typedef struct
{
  T_BAT_plus_cgans_response response;                 /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgans_response response  */
  U8                        v_l2p;                    /*<  4:  1> valid-flag                                         */
  U8                        c_l2p;                    /*<  5:  1> counter                                            */
  U8                        l2p[BAT_MAX_CGANS_L2P_LEN]; /*<  6:  6> layer 2 protocol string                            */
  T_BAT_pdp_cid             cid;                      /*< 12:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_cmd_set_plus_cgans;
#endif

#ifndef __T_BAT_res_que_plus_cgatt__
#define __T_BAT_res_que_plus_cgatt__
/*
 * The query answer structure of the +CGATT command.
 * CCDGEN:WriteStruct_Count==2470
 */
typedef struct
{
  T_BAT_plus_cgatt_state    state;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgatt_state state        */
} T_BAT_res_que_plus_cgatt;
#endif

#ifndef __T_BAT_cmd_set_plus_cgatt__
#define __T_BAT_cmd_set_plus_cgatt__
/*
 * The set command structure of the +CGATT command.
 * CCDGEN:WriteStruct_Count==2471
 */
typedef struct
{
  T_BAT_plus_cgatt_state    state;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgatt_state state        */
} T_BAT_cmd_set_plus_cgatt;
#endif

#ifndef __T_BAT_res_que_percent_cgclass__
#define __T_BAT_res_que_percent_cgclass__
/*
 * The query answer structure of the %CGCLASS command.
 * CCDGEN:WriteStruct_Count==2472
 */
typedef struct
{
  T_BAT_p_mobile_class      p_mobile_class;           /*<  0:  4> (enum=32bit)<->T_BAT_p_mobile_class Mobile class   */
  T_BAT_p_mobile_class      current_mobile_class;     /*<  4:  4> (enum=32bit)<->T_BAT_p_mobile_class Mobile class   */
} T_BAT_res_que_percent_cgclass;
#endif

#ifndef __T_BAT_cmd_set_percent_cgclass__
#define __T_BAT_cmd_set_percent_cgclass__
/*
 * The set command structure of the %CGCLASS command.
 * CCDGEN:WriteStruct_Count==2473
 */
typedef struct
{
  T_BAT_p_mobile_class      p_mobile_class;           /*<  0:  4> (enum=32bit)<->T_BAT_p_mobile_class Mobile class   */
} T_BAT_cmd_set_percent_cgclass;
#endif

#ifndef __T_BAT_res_que_plus_cgclass__
#define __T_BAT_res_que_plus_cgclass__
/*
 * The query answer structure of the +CGCLASS command.
 * CCDGEN:WriteStruct_Count==2474
 */
typedef struct
{
  T_BAT_mobile_class        mobile_class;             /*<  0:  4> (enum=32bit)<->T_BAT_mobile_class Mobile class     */
} T_BAT_res_que_plus_cgclass;
#endif

#ifndef __T_BAT_cmd_set_plus_cgclass__
#define __T_BAT_cmd_set_plus_cgclass__
/*
 * The set command structure of the +CGCLASS command.
 * CCDGEN:WriteStruct_Count==2475
 */
typedef struct
{
  T_BAT_mobile_class        mobile_class;             /*<  0:  4> (enum=32bit)<->T_BAT_mobile_class Mobile class     */
} T_BAT_cmd_set_plus_cgclass;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgcmod__
#define __T_BAT_res_que_plus_cgcmod__
/*
 * The query answer structure of the +CGCMODcommand.
 * CCDGEN:WriteStruct_Count==2476
 */
typedef struct
{
// ELEM-FF: REL99 
  U8                        c_cid;                    /*<  0:  1> counter                                            */
  U8                        cid[BAT_MAX_PDP_CID];     /*<  1: 11> Array of CIDs                                      */
} T_BAT_res_que_plus_cgcmod;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgcmod__
#define __T_BAT_cmd_set_plus_cgcmod__
/*
 * The set command structure of the +CGCMOD command.
 * CCDGEN:WriteStruct_Count==2477
 */
typedef struct
{
// ELEM-FF: REL99 
  U8                        c_cid;                    /*<  0:  1> counter                                            */
  U8                        cid[BAT_MAX_PDP_CID];     /*<  1: 11> Array of CIDs                                      */
} T_BAT_cmd_set_plus_cgcmod;
#endif

#ifndef __T_BAT_cmd_set_plus_cgdata__
#define __T_BAT_cmd_set_plus_cgdata__
/*
 * The set command structure of the +CGDATA command.
 * CCDGEN:WriteStruct_Count==2478
 */
typedef struct
{
  U8                        v_l2p;                    /*<  0:  1> valid-flag                                         */
  U8                        c_l2p;                    /*<  1:  1> counter                                            */
  U8                        l2p[BAT_MAX_CGDATA_L2P_LEN]; /*<  2:  6> layer 2 protocol string                            */
  U8                        v_cid;                    /*<  8:  1> valid-flag                                         */
  U8                        c_cid;                    /*<  9:  1> counter                                            */
  U16                       cid[BAT_MAX_PDP_CID];     /*< 10: 22> Array of PDP context IDs                           */
} T_BAT_cmd_set_plus_cgdata;
#endif

#ifndef __T_BAT_res_que_plus_cgdcont__
#define __T_BAT_res_que_plus_cgdcont__
/*
 * The query answer structure of the +CGDCONT command.
 * CCDGEN:WriteStruct_Count==2479
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_pdp_type            pdp_type;                 /*<  4:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
  U8                        c_apn;                    /*<  8:  1> counter                                            */
  U8                        apn[BAT_MAX_APN_LEN];     /*<  9:102> Access Point Name                                  */
  U8                        c_pdp_addr;               /*<111:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*<112: 16> PDP address                                        */
  T_BAT_plus_cgdcont_d_comp d_comp;                   /*<128:  4> (enum=32bit)<->T_BAT_plus_cgdcont_d_comp d_comp    */
  T_BAT_plus_cgdcont_h_comp h_comp;                   /*<132:  4> (enum=32bit)<->T_BAT_plus_cgdcont_h_comp h_comp    */
  T_BAT_plus_cgdcont_ctrl_ip_adderss ctrl_ip_address; /*<136:  4> (enum=32bit)<->T_BAT_plus_cgdcont_ctrl_ip_adderss Control Ip address ( NAS_IPV4, NAS_IPV6, Not_present) */
} T_BAT_res_que_plus_cgdcont;
#endif

#ifndef __T_BAT_cmd_set_plus_cgdcont__
#define __T_BAT_cmd_set_plus_cgdcont__
/*
 * The query answer structure of the +CGDCONT command.
 * CCDGEN:WriteStruct_Count==2480
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_pdp_type            pdp_type;                 /*<  4:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
  U8                        v_apn;                    /*<  8:  1> valid-flag                                         */
  U8                        c_apn;                    /*<  9:  1> counter                                            */
  U8                        apn[BAT_MAX_APN_LEN];     /*< 10:102> Access Point Name                                  */
  U8                        v_pdp_addr;               /*<112:  1> valid-flag                                         */
  U8                        c_pdp_addr;               /*<113:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*<114: 16> PDP address                                        */
  U8                        _align0;                  /*<130:  1> alignment                                          */
  U8                        _align1;                  /*<131:  1> alignment                                          */
  T_BAT_plus_cgdcont_d_comp d_comp;                   /*<132:  4> (enum=32bit)<->T_BAT_plus_cgdcont_d_comp d_comp    */
  T_BAT_plus_cgdcont_h_comp h_comp;                   /*<136:  4> (enum=32bit)<->T_BAT_plus_cgdcont_h_comp h_comp    */
  T_BAT_plus_cgdcont_ctrl_ip_adderss ctrl_ip_address; /*<140:  4> (enum=32bit)<->T_BAT_plus_cgdcont_ctrl_ip_adderss Control Ip address ( NAS_IPV4, NAS_IPV6, Not_present) */
} T_BAT_cmd_set_plus_cgdcont;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgdscont__
#define __T_BAT_res_que_plus_cgdscont__
/*
 * The query answer structure of the +CGDSCONT command.
 * CCDGEN:WriteStruct_Count==2481
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        p_cid;                    /*<  4:  1> Primary context Identifier                         */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
  T_BAT_pdp_type            pdp_type;                 /*<  8:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
// ELEM-FF: REL99 
  T_BAT_plus_cgdcont_d_comp d_comp;                   /*< 12:  4> (enum=32bit)<->T_BAT_plus_cgdcont_d_comp d_comp    */
// ELEM-FF: REL99 
  T_BAT_plus_cgdcont_h_comp h_comp;                   /*< 16:  4> (enum=32bit)<->T_BAT_plus_cgdcont_h_comp h_comp    */
} T_BAT_res_que_plus_cgdscont;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgdscont__
#define __T_BAT_cmd_set_plus_cgdscont__
/*
 * The set command structure of the +CGDSCONT command.
 * CCDGEN:WriteStruct_Count==2482
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        p_cid;                    /*<  4:  1> Primary context Identifier                         */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
  T_BAT_pdp_type            pdp_type;                 /*<  8:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
// ELEM-FF: REL99 
  T_BAT_plus_cgdcont_d_comp d_comp;                   /*< 12:  4> (enum=32bit)<->T_BAT_plus_cgdcont_d_comp d_comp    */
// ELEM-FF: REL99 
  T_BAT_plus_cgdcont_h_comp h_comp;                   /*< 16:  4> (enum=32bit)<->T_BAT_plus_cgdcont_h_comp h_comp    */
} T_BAT_cmd_set_plus_cgdscont;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgeqreq__
#define __T_BAT_res_que_plus_cgeqreq__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2483
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tc;                       /*<  4:  1> Traffic class                                      */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U16                       max_rate_ul;              /*<  6:  2> Maximum number of Kbits delivered to UMTS          */
// ELEM-FF: REL99 
  U16                       max_rate_dl;              /*<  8:  2> Maximum bit rate Kbits delivered by UMTS           */
// ELEM-FF: REL99 
  U16                       guar_br_ul;               /*< 10:  2> Guaranteed number of Kbits delivered to UMTS       */
// ELEM-FF: REL99 
  U16                       guar_br_dl;               /*< 12:  2> Guaranteed bit rate Kbits delivered by UMTS        */
// ELEM-FF: REL99 
  U8                        order;                    /*< 14:  1>  Delivery Order:UMTS bearer shall provide in-sequence SDU delivery */
// ELEM-FF: REL99 
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  U16                       max_sdu;                  /*< 16:  2> Maximum allowed SDU size in octets                 */
// ELEM-FF: REL99 
  U8                        c_sdu_err_ratio;          /*< 18:  1> counter                                            */
  U8                        sdu_err_ratio[BAT_MAX_SDU_ERR_RATIO]; /*< 19:  2> Target value for fraction of SDUs lost or detected as erroneous */
// ELEM-FF: REL99 
  U8                        c_ber;                    /*< 21:  1> counter                                            */
  U8                        ber[BAT_MAX_RES_BIT_ERR_RATIO]; /*< 22:  2> Target value for undetected bit error ratio in delivered SDUs */
// ELEM-FF: REL99 
  U8                        del_err_sdu;              /*< 24:  1>  SDU detected erroneous shall be delivered or not  */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 25:  1> alignment                                          */
  U16                       xfer_delay;               /*< 26:  2> Targeted time between request of SDU at one SAP and delivery at another */
// ELEM-FF: REL99 
  U8                        handling_pri;             /*< 28:  1> Traffic Handling Priority                          */
  U8                        _align3;                  /*< 29:  1> alignment                                          */
  U8                        _align4;                  /*< 30:  1> alignment                                          */
  U8                        _align5;                  /*< 31:  1> alignment                                          */
} T_BAT_res_que_plus_cgeqreq;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgeqreq__
#define __T_BAT_cmd_set_plus_cgeqreq__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2484
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tc;                       /*<  4:  1> Traffic class                                      */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U16                       max_rate_ul;              /*<  6:  2> Maximum number of Kbits delivered to UMTS          */
// ELEM-FF: REL99 
  U16                       max_rate_dl;              /*<  8:  2> Maximum bit rate Kbits delivered by UMTS           */
// ELEM-FF: REL99 
  U16                       guar_br_ul;               /*< 10:  2> Guaranteed number of Kbits delivered to UMTS       */
// ELEM-FF: REL99 
  U16                       guar_br_dl;               /*< 12:  2> Guaranteed bit rate Kbits delivered by UMTS        */
// ELEM-FF: REL99 
  U8                        order;                    /*< 14:  1>  Delivery Order:UMTS bearer shall provide in-sequence SDU delivery */
// ELEM-FF: REL99 
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  U16                       max_sdu;                  /*< 16:  2> Maximum allowed SDU size in octets                 */
// ELEM-FF: REL99 
  U8                        v_sdu_err_ratio;          /*< 18:  1> valid-flag                                         */
  U8                        c_sdu_err_ratio;          /*< 19:  1> counter                                            */
  U8                        sdu_err_ratio[BAT_MAX_SDU_ERR_RATIO]; /*< 20:  2> Target value for fraction of SDUs lost or detected as erroneous */
// ELEM-FF: REL99 
  U8                        v_ber;                    /*< 22:  1> valid-flag                                         */
  U8                        c_ber;                    /*< 23:  1> counter                                            */
  U8                        ber[BAT_MAX_RES_BIT_ERR_RATIO]; /*< 24:  2> Target value for undetected bit error ratio in delivered SDUs */
// ELEM-FF: REL99 
  U8                        del_err_sdu;              /*< 26:  1>  SDU detected erroneous shall be delivered or not  */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 27:  1> alignment                                          */
  U16                       xfer_delay;               /*< 28:  2> Targeted time between request of SDU at one SAP and delivery at another */
// ELEM-FF: REL99 
  U8                        handling_pri;             /*< 30:  1> Traffic Handling Priority                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
} T_BAT_cmd_set_plus_cgeqreq;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgeqmin__
#define __T_BAT_res_que_plus_cgeqmin__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2485
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tc;                       /*<  4:  1> Traffic class                                      */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U16                       max_rate_ul;              /*<  6:  2> Maximum number of Kbits delivered to UMTS          */
// ELEM-FF: REL99 
  U16                       max_rate_dl;              /*<  8:  2> Maximum bit rate Kbits delivered by UMTS           */
// ELEM-FF: REL99 
  U16                       guar_br_ul;               /*< 10:  2> Guaranteed number of Kbits delivered to UMTS       */
// ELEM-FF: REL99 
  U16                       guar_br_dl;               /*< 12:  2> Guaranteed bit rate Kbits delivered by UMTS        */
// ELEM-FF: REL99 
  U8                        order;                    /*< 14:  1>  Delivery Order:UMTS bearer shall provide in-sequence SDU delivery */
// ELEM-FF: REL99 
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  U16                       max_sdu;                  /*< 16:  2> Maximum allowed SDU size in octets                 */
// ELEM-FF: REL99 
  U8                        v_sdu_err_ratio;          /*< 18:  1> valid-flag                                         */
  U8                        c_sdu_err_ratio;          /*< 19:  1> counter                                            */
  U8                        sdu_err_ratio[BAT_MAX_SDU_ERR_RATIO]; /*< 20:  2> Target value for fraction of SDUs lost or detected as erroneous */
// ELEM-FF: REL99 
  U8                        v_ber;                    /*< 22:  1> valid-flag                                         */
  U8                        c_ber;                    /*< 23:  1> counter                                            */
  U8                        ber[BAT_MAX_RES_BIT_ERR_RATIO]; /*< 24:  2> Target value for undetected bit error ratio in delivered SDUs */
// ELEM-FF: REL99 
  U8                        del_err_sdu;              /*< 26:  1>  SDU detected erroneous shall be delivered or not  */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 27:  1> alignment                                          */
  U16                       xfer_delay;               /*< 28:  2> Targeted time between request of SDU at one SAP and delivery at another */
// ELEM-FF: REL99 
  U8                        handling_pri;             /*< 30:  1> Traffic Handling Priority                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
} T_BAT_res_que_plus_cgeqmin;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgeqmin__
#define __T_BAT_cmd_set_plus_cgeqmin__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2486
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tc;                       /*<  4:  1> Traffic class                                      */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U16                       max_rate_ul;              /*<  6:  2> Maximum number of Kbits delivered to UMTS          */
// ELEM-FF: REL99 
  U16                       max_rate_dl;              /*<  8:  2> Maximum bit rate Kbits delivered by UMTS           */
// ELEM-FF: REL99 
  U16                       guar_br_ul;               /*< 10:  2> Guaranteed number of Kbits delivered to UMTS       */
// ELEM-FF: REL99 
  U16                       guar_br_dl;               /*< 12:  2> Guaranteed bit rate Kbits delivered by UMTS        */
// ELEM-FF: REL99 
  U8                        order;                    /*< 14:  1>  Delivery Order:UMTS bearer shall provide in-sequence SDU delivery */
// ELEM-FF: REL99 
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  U16                       max_sdu;                  /*< 16:  2> Maximum allowed SDU size in octets                 */
// ELEM-FF: REL99 
  U8                        v_sdu_err_ratio;          /*< 18:  1> valid-flag                                         */
  U8                        c_sdu_err_ratio;          /*< 19:  1> counter                                            */
  U8                        sdu_err_ratio[BAT_MAX_SDU_ERR_RATIO]; /*< 20:  2> Target value for fraction of SDUs lost or detected as erroneous */
// ELEM-FF: REL99 
  U8                        v_ber;                    /*< 22:  1> valid-flag                                         */
  U8                        c_ber;                    /*< 23:  1> counter                                            */
  U8                        ber[BAT_MAX_RES_BIT_ERR_RATIO]; /*< 24:  2> Target value for undetected bit error ratio in delivered SDUs */
// ELEM-FF: REL99 
  U8                        del_err_sdu;              /*< 26:  1>  SDU detected erroneous shall be delivered or not  */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 27:  1> alignment                                          */
  U16                       xfer_delay;               /*< 28:  2> Targeted time between request of SDU at one SAP and delivery at another */
// ELEM-FF: REL99 
  U8                        handling_pri;             /*< 30:  1> Traffic Handling Priority                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
} T_BAT_cmd_set_plus_cgeqmin;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgeqneg__
#define __T_BAT_res_que_plus_cgeqneg__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2487
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tc;                       /*<  4:  1> Traffic class                                      */
// ELEM-FF: REL99 
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U16                       max_rate_ul;              /*<  6:  2> Maximum number of Kbits delivered to UMTS          */
// ELEM-FF: REL99 
  U16                       max_rate_dl;              /*<  8:  2> Maximum bit rate Kbits delivered by UMTS           */
// ELEM-FF: REL99 
  U16                       guar_br_ul;               /*< 10:  2> Guaranteed number of Kbits delivered to UMTS       */
// ELEM-FF: REL99 
  U16                       guar_br_dl;               /*< 12:  2> Guaranteed bit rate Kbits delivered by UMTS        */
// ELEM-FF: REL99 
  U8                        order;                    /*< 14:  1>  Delivery Order:UMTS bearer shall provide in-sequence SDU delivery */
// ELEM-FF: REL99 
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  U16                       max_sdu;                  /*< 16:  2> Maximum allowed SDU size in octets                 */
// ELEM-FF: REL99 
  U8                        v_sdu_err_ratio;          /*< 18:  1> valid-flag                                         */
  U8                        c_sdu_err_ratio;          /*< 19:  1> counter                                            */
  U8                        sdu_err_ratio[BAT_MAX_SDU_ERR_RATIO]; /*< 20:  2> Target value for fraction of SDUs lost or detected as erroneous */
// ELEM-FF: REL99 
  U8                        v_ber;                    /*< 22:  1> valid-flag                                         */
  U8                        c_ber;                    /*< 23:  1> counter                                            */
  U8                        ber[BAT_MAX_RES_BIT_ERR_RATIO]; /*< 24:  2> Target value for undetected bit error ratio in delivered SDUs */
// ELEM-FF: REL99 
  U8                        del_err_sdu;              /*< 26:  1>  SDU detected erroneous shall be delivered or not  */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 27:  1> alignment                                          */
  U16                       xfer_delay;               /*< 28:  2> Targeted time between request of SDU at one SAP and delivery at another */
// ELEM-FF: REL99 
  U8                        handling_pri;             /*< 30:  1> Traffic Handling Priority                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
} T_BAT_res_que_plus_cgeqneg;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgeqneg__
#define __T_BAT_cmd_set_plus_cgeqneg__
/*
 * The query answer structure of the +CGDCONT command
 * CCDGEN:WriteStruct_Count==2488
 */
typedef struct
{
// ELEM-FF: REL99 
  U8                        c_cid;                    /*<  0:  1> counter                                            */
  U8                        cid[BAT_MAX_PDP_CID];     /*<  1: 11> Array of CIDs                                      */
} T_BAT_cmd_set_plus_cgeqneg;
#endif

#ifndef __T_BAT_res_uns_percent_cgev__
#define __T_BAT_res_uns_percent_cgev__
/*
 * The unsolicited result code structure of the %CGEV command.
 * CCDGEN:WriteStruct_Count==2489
 */
typedef struct
{
  T_BAT_percent_cgev_evt    evt;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgev_evt CGEV event type */
  T_BAT_pdp_type            pdp_type;                 /*<  4:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
  U8                        v_pdp_addr;               /*<  8:  1> valid-flag                                         */
  U8                        c_pdp_addr;               /*<  9:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*< 10: 16> PDP address                                        */
  U8                        _align0;                  /*< 26:  1> alignment                                          */
  U8                        _align1;                  /*< 27:  1> alignment                                          */
  T_BAT_pdp_cid             cid;                      /*< 28:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_p_mobile_class      p_mobile_class;           /*< 32:  4> (enum=32bit)<->T_BAT_p_mobile_class Mobile class   */
} T_BAT_res_uns_percent_cgev;
#endif

#ifndef __T_BAT_res_uns_plus_cgev__
#define __T_BAT_res_uns_plus_cgev__
/*
 * The unsolicited result code structure of the +CGEV command.
 * CCDGEN:WriteStruct_Count==2490
 */
typedef struct
{
  T_BAT_plus_cgev_evt       evt;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgev_evt CGEV event type */
  T_BAT_pdp_type            pdp_type;                 /*<  4:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
  U8                        v_pdp_addr;               /*<  8:  1> valid-flag                                         */
  U8                        c_pdp_addr;               /*<  9:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*< 10: 16> PDP address                                        */
  U8                        _align0;                  /*< 26:  1> alignment                                          */
  U8                        _align1;                  /*< 27:  1> alignment                                          */
  T_BAT_pdp_cid             cid;                      /*< 28:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_mobile_class        mobile_class;             /*< 32:  4> (enum=32bit)<->T_BAT_mobile_class Mobile class     */
} T_BAT_res_uns_plus_cgev;
#endif

#ifndef __T_BAT_res_set_plus_cgmi__
#define __T_BAT_res_set_plus_cgmi__
/*
 * The set response structure of the +CGMI command.
 * CCDGEN:WriteStruct_Count==2491
 */
typedef struct
{
  U16                       c_manufacturer;           /*<  0:  2> counter                                            */
  U8                        manufacturer[BAT_MAX_CGMI_MANUFACTURER_LEN]; /*<  2:284> Manufacturer Infomation                            */
  U8                        _align0;                  /*<286:  1> alignment                                          */
  U8                        _align1;                  /*<287:  1> alignment                                          */
} T_BAT_res_set_plus_cgmi;
#endif

#ifndef __T_BAT_cmd_set_percent_cgmm__
#define __T_BAT_cmd_set_percent_cgmm__
/*
 * The set command structure of the %CGMM command.
 * CCDGEN:WriteStruct_Count==2492
 */
typedef struct
{
  T_BAT_percent_cgmm_cipher_on cipher_on;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgmm_cipher_on cipher_on */
  T_BAT_percent_cgmm_tlli_handling tlli_handling;     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cgmm_tlli_handling tlli_handling */
} T_BAT_cmd_set_percent_cgmm;
#endif

#ifndef __T_BAT_res_set_plus_cgmm__
#define __T_BAT_res_set_plus_cgmm__
/*
 * The set response structure of the +CGMM command.
 * CCDGEN:WriteStruct_Count==2493
 */
typedef struct
{
  U16                       c_model;                  /*<  0:  2> counter                                            */
  U8                        model[BAT_MAX_CGMM_MODEL_LEN]; /*<  2:284> Model Information                                  */
  U8                        _align0;                  /*<286:  1> alignment                                          */
  U8                        _align1;                  /*<287:  1> alignment                                          */
} T_BAT_res_set_plus_cgmm;
#endif

#ifndef __T_BAT_res_set_plus_cgmr__
#define __T_BAT_res_set_plus_cgmr__
/*
 * The set response structure of the +CGMR command.
 * CCDGEN:WriteStruct_Count==2494
 */
typedef struct
{
  U16                       c_revision;               /*<  0:  2> counter                                            */
  U8                        revision[BAT_MAX_CGMR_REVISION_LEN]; /*<  2:284> Revision Information                               */
  U8                        _align0;                  /*<286:  1> alignment                                          */
  U8                        _align1;                  /*<287:  1> alignment                                          */
} T_BAT_res_set_plus_cgmr;
#endif

#ifndef __T_BAT_cmd_set_plus_cgpaddr__
#define __T_BAT_cmd_set_plus_cgpaddr__
/*
 * The set command structure of the +CGPADDR command.
 * CCDGEN:WriteStruct_Count==2495
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        _align1;                  /*<  1:  1> alignment                                          */
  U8                        _align2;                  /*<  2:  1> alignment                                          */
  U8                        c_cid;                    /*<  3:  1> counter                                            */
  T_BAT_pdp_cid             cid[BAT_MAX_PDP_CID];     /*<  4: 44> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_cmd_set_plus_cgpaddr;
#endif

#ifndef __T_BAT_res_set_plus_cgpaddr__
#define __T_BAT_res_set_plus_cgpaddr__
/*
 * The set response structure of the +CGPADDR command.
 * CCDGEN:WriteStruct_Count==2496
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  U8                        c_pdp_addr;               /*<  4:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*<  5: 16> PDP address                                        */
  U8                        _align0;                  /*< 21:  1> alignment                                          */
  U8                        _align1;                  /*< 22:  1> alignment                                          */
  U8                        _align2;                  /*< 23:  1> alignment                                          */
} T_BAT_res_set_plus_cgpaddr;
#endif

#ifndef __T_BAT_res_tst_plus_cgpaddr__
#define __T_BAT_res_tst_plus_cgpaddr__
/*
 * The test answer structure of the +CGPADDR command.
 * CCDGEN:WriteStruct_Count==2497
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        _align1;                  /*<  1:  1> alignment                                          */
  U8                        _align2;                  /*<  2:  1> alignment                                          */
  U8                        c_cid;                    /*<  3:  1> counter                                            */
  T_BAT_pdp_cid             cid[BAT_MAX_PDP_CID];     /*<  4: 44> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_res_tst_plus_cgpaddr;
#endif

#ifndef __T_BAT_cmd_set_percent_cgpco__
#define __T_BAT_cmd_set_percent_cgpco__
/*
 * The set command structure of the %CGPCO command.
 * CCDGEN:WriteStruct_Count==2498
 */
typedef struct
{
  T_BAT_percent_cgpco_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgpco_mode execution mode */
  T_BAT_percent_cgpco_format format;                  /*<  4:  4> (enum=32bit)<->T_BAT_percent_cgpco_format PCO parameter format */
  U8                        v_pco;                    /*<  8:  1> valid-flag                                         */
  U8                        c_pco;                    /*<  9:  1> counter                                            */
  U8                        pco[BAT_MAX_CGPCO_PCO_LEN]; /*< 10:251> protocol configuration options                     */
  U8                        _align0;                  /*<261:  1> alignment                                          */
  U8                        _align1;                  /*<262:  1> alignment                                          */
  U8                        _align2;                  /*<263:  1> alignment                                          */
  T_BAT_pdp_cid             cid;                      /*<264:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_cmd_set_percent_cgpco;
#endif

#ifndef __T_BAT_res_set_percent_cgpco__
#define __T_BAT_res_set_percent_cgpco__
/*
 * The set response structure of the %CGPCO command.
 * CCDGEN:WriteStruct_Count==2499
 */
typedef struct
{
  U8                        c_pco;                    /*<  0:  1> counter                                            */
  U8                        pco[BAT_MAX_CGPCO_PCO_LEN]; /*<  1:251> protocol configuration options                     */
  T_BAT_pdp_cid             cid;                      /*<252:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_res_set_percent_cgpco;
#endif

#ifndef __T_BAT_res_que_percent_cgppp__
#define __T_BAT_res_que_percent_cgppp__
/*
 * The query answer structure of the %CGPPP command.
 * CCDGEN:WriteStruct_Count==2500
 */
typedef struct
{
  T_BAT_percent_cgppp_protocol protocol;              /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgppp_protocol authentication protocol */
} T_BAT_res_que_percent_cgppp;
#endif

#ifndef __T_BAT_cmd_set_percent_cgppp__
#define __T_BAT_cmd_set_percent_cgppp__
/*
 * The set command structure of the %CGPPP command.
 * CCDGEN:WriteStruct_Count==2501
 */
typedef struct
{
  T_BAT_percent_cgppp_protocol protocol;              /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgppp_protocol authentication protocol */
} T_BAT_cmd_set_percent_cgppp;
#endif

#ifndef __T_BAT_res_que_plus_cgqmin__
#define __T_BAT_res_que_plus_cgqmin__
/*
 * The query answer structure of the +CGQMIN command.
 * CCDGEN:WriteStruct_Count==2502
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_precedence          precedence;               /*<  4:  4> (enum=32bit)<->T_BAT_precedence Precedence Class   */
  T_BAT_delay               delay;                    /*<  8:  4> (enum=32bit)<->T_BAT_delay Delay Class             */
  T_BAT_reliability         reliability;              /*< 12:  4> (enum=32bit)<->T_BAT_reliability Reliability Class */
  T_BAT_peak                peak;                     /*< 16:  4> (enum=32bit)<->T_BAT_peak Peak Throughput Class    */
  T_BAT_mean                mean;                     /*< 20:  4> (enum=32bit)<->T_BAT_mean Mean Throughput Class    */
} T_BAT_res_que_plus_cgqmin;
#endif

#ifndef __T_BAT_cmd_set_plus_cgqmin__
#define __T_BAT_cmd_set_plus_cgqmin__
/*
 * The set command structure of the +CGQMIN command.
 * CCDGEN:WriteStruct_Count==2503
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_precedence          precedence;               /*<  4:  4> (enum=32bit)<->T_BAT_precedence Precedence Class   */
  T_BAT_delay               delay;                    /*<  8:  4> (enum=32bit)<->T_BAT_delay Delay Class             */
  T_BAT_reliability         reliability;              /*< 12:  4> (enum=32bit)<->T_BAT_reliability Reliability Class */
  T_BAT_peak                peak;                     /*< 16:  4> (enum=32bit)<->T_BAT_peak Peak Throughput Class    */
  T_BAT_mean                mean;                     /*< 20:  4> (enum=32bit)<->T_BAT_mean Mean Throughput Class    */
} T_BAT_cmd_set_plus_cgqmin;
#endif

#ifndef __T_BAT_res_que_plus_cgqreq__
#define __T_BAT_res_que_plus_cgqreq__
/*
 * The query answer structure of the +CGQREQ command.
 * CCDGEN:WriteStruct_Count==2504
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_precedence          precedence;               /*<  4:  4> (enum=32bit)<->T_BAT_precedence Precedence Class   */
  T_BAT_delay               delay;                    /*<  8:  4> (enum=32bit)<->T_BAT_delay Delay Class             */
  T_BAT_reliability         reliability;              /*< 12:  4> (enum=32bit)<->T_BAT_reliability Reliability Class */
  T_BAT_peak                peak;                     /*< 16:  4> (enum=32bit)<->T_BAT_peak Peak Throughput Class    */
  T_BAT_mean                mean;                     /*< 20:  4> (enum=32bit)<->T_BAT_mean Mean Throughput Class    */
} T_BAT_res_que_plus_cgqreq;
#endif

#ifndef __T_BAT_cmd_set_plus_cgqreq__
#define __T_BAT_cmd_set_plus_cgqreq__
/*
 * The set command structure of the +CGQREQ command.
 * CCDGEN:WriteStruct_Count==2505
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  T_BAT_precedence          precedence;               /*<  4:  4> (enum=32bit)<->T_BAT_precedence Precedence Class   */
  T_BAT_delay               delay;                    /*<  8:  4> (enum=32bit)<->T_BAT_delay Delay Class             */
  T_BAT_reliability         reliability;              /*< 12:  4> (enum=32bit)<->T_BAT_reliability Reliability Class */
  T_BAT_peak                peak;                     /*< 16:  4> (enum=32bit)<->T_BAT_peak Peak Throughput Class    */
  T_BAT_mean                mean;                     /*< 20:  4> (enum=32bit)<->T_BAT_mean Mean Throughput Class    */
} T_BAT_cmd_set_plus_cgqreq;
#endif

#ifndef __T_BAT_res_que_percent_cgreg__
#define __T_BAT_res_que_percent_cgreg__
/*
 * The query answer structure of the %CGREG command.
 * CCDGEN:WriteStruct_Count==2506
 */
typedef struct
{
  T_BAT_percent_cgreg_stat  stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgreg_stat GPRS extended registration state */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
  T_BAT_percent_cgreg_state state;                    /*< 12:  4> (enum=32bit)<->T_BAT_percent_cgreg_state PDP context state */
} T_BAT_res_que_percent_cgreg;
#endif

#ifndef __T_BAT_res_uns_percent_cgreg__
#define __T_BAT_res_uns_percent_cgreg__
/*
 * The unsolicited result code structure of the %CGREG command.
 * CCDGEN:WriteStruct_Count==2507
 */
typedef struct
{
  T_BAT_percent_cgreg_stat  stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cgreg_stat GPRS extended registration state */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
} T_BAT_res_uns_percent_cgreg;
#endif

#ifndef __T_BAT_res_que_plus_cgreg__
#define __T_BAT_res_que_plus_cgreg__
/*
 * The query answer structure of the +CGREG command.
 * CCDGEN:WriteStruct_Count==2508
 */
typedef struct
{
  T_BAT_plus_cgreg_stat     stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgreg_stat GPRS extended registration state */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
} T_BAT_res_que_plus_cgreg;
#endif

#ifndef __T_BAT_res_uns_plus_cgreg__
#define __T_BAT_res_uns_plus_cgreg__
/*
 * The unsolicited result code structure of the +CGREG command.
 * CCDGEN:WriteStruct_Count==2509
 */
typedef struct
{
  T_BAT_plus_cgreg_stat     stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgreg_stat GPRS extended registration state */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
} T_BAT_res_uns_plus_cgreg;
#endif

#ifndef __T_BAT_res_set_plus_cgsn__
#define __T_BAT_res_set_plus_cgsn__
/*
 * The set response structure of the +CGSN command.
 * CCDGEN:WriteStruct_Count==2510
 */
typedef struct
{
  U16                       c_sn;                     /*<  0:  2> counter                                            */
  U8                        sn[BAT_MAX_CGSN_SN_LEN];  /*<  2:284> SN Information                                     */
  U8                        _align0;                  /*<286:  1> alignment                                          */
  U8                        _align1;                  /*<287:  1> alignment                                          */
} T_BAT_res_set_plus_cgsn;
#endif

#ifndef __T_BAT_res_que_plus_cgsms__
#define __T_BAT_res_que_plus_cgsms__
/*
 * The query answer structure of the +CGSMS command.
 * CCDGEN:WriteStruct_Count==2511
 */
typedef struct
{
  T_BAT_plus_cgsms_service  service;                  /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgsms_service service    */
} T_BAT_res_que_plus_cgsms;
#endif

#ifndef __T_BAT_cmd_set_plus_cgsms__
#define __T_BAT_cmd_set_plus_cgsms__
/*
 * The set command structure of the +CGSMS command.
 * CCDGEN:WriteStruct_Count==2512
 */
typedef struct
{
  T_BAT_plus_cgsms_service  service;                  /*<  0:  4> (enum=32bit)<->T_BAT_plus_cgsms_service service    */
} T_BAT_cmd_set_plus_cgsms;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_plus_cgtft__
#define __T_BAT_res_que_plus_cgtft__
/*
 * The query answer structure of the +CGTFT command.
 * CCDGEN:WriteStruct_Count==2513
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tft_pf_id;                /*<  4:  1> <  0:  1> packet filter identifier                 */
// ELEM-FF: REL99 
  U8                        tft_pf_precedence;        /*<  5:  1> packet filter precedence                           */
// ELEM-FF: REL99 
  U8                        v_addr_n_mask;            /*<  6:  1> valid-flag                                         */
  U8                        c_addr_n_mask;            /*<  7:  1> counter                                            */
  U8                        addr_n_mask[BAT_MAX_ADDR_N_MASK_LEN]; /*<  8: 32>  Source address and subnet mask. consists of dot seperated numeric parameters */
// ELEM-FF: REL99 
  U8                        prt_num_or_nxt_hd;        /*< 40:  1> Basic Element                                      */
// ELEM-FF: REL99 
  U8                        v_dest_port_range;        /*< 41:  1> valid-flag                                         */
  U8                        c_dest_port_range;        /*< 42:  1> counter                                            */
  U8                        dest_port_range[BAT_MAX_DEST_PORT_LEN]; /*< 43:  2> Range of destination port addresses.               */
// ELEM-FF: REL99 
  U8                        v_src_port_range;         /*< 45:  1> valid-flag                                         */
  U8                        c_src_port_range;         /*< 46:  1> counter                                            */
  U8                        src_port_range[BAT_MAX_SRC_PORT_LEN]; /*< 47:  2> Source port addresses range                        */
// ELEM-FF: REL99 
  U8                        _align0;                  /*< 49:  1> alignment                                          */
  U8                        _align1;                  /*< 50:  1> alignment                                          */
  U8                        v_ipsec_spi;              /*< 51:  1> valid-flag                                         */
  U32                       ipsec_spi;                /*< 52:  4> ipsec security parameter index (SPI)               */
// ELEM-FF: REL99 
  U8                        v_tos_mask_or_tc_mask;    /*< 56:  1> valid-flag                                         */
  U8                        c_tos_mask_or_tc_mask;    /*< 57:  1> counter                                            */
  U8                        tos_mask_or_tc_mask[BAT_MAX_TOS_MASK_OR_TC_MASK]; /*< 58:  2> Type of service and mask (IPv4) / traffic class and mask (IPv6) */
// ELEM-FF: REL99 
  U8                        _align2;                  /*< 60:  1> alignment                                          */
  U8                        _align3;                  /*< 61:  1> alignment                                          */
  U8                        _align4;                  /*< 62:  1> alignment                                          */
  U8                        v_flow_label;             /*< 63:  1> valid-flag                                         */
  U32                       flow_label;               /*< 64:  4> Flow label (IPv6)                                  */
} T_BAT_res_que_plus_cgtft;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_plus_cgtft__
#define __T_BAT_cmd_set_plus_cgtft__
/*
 * The set command structure of the +CGTFT command.
 * CCDGEN:WriteStruct_Count==2514
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
// ELEM-FF: REL99 
  U8                        tft_pf_id;                /*<  4:  1> <  0:  1> packet filter identifier                 */
// ELEM-FF: REL99 
  U8                        tft_pf_precedence;        /*<  5:  1> packet filter precedence                           */
// ELEM-FF: REL99 
  U8                        v_addr_n_mask;            /*<  6:  1> valid-flag                                         */
  U8                        c_addr_n_mask;            /*<  7:  1> counter                                            */
  U8                        addr_n_mask[BAT_MAX_ADDR_N_MASK_LEN]; /*<  8: 32>  Source address and subnet mask. consists of dot seperated numeric parameters */
// ELEM-FF: REL99 
  U8                        prt_num_or_nxt_hd;        /*< 40:  1> Basic Element                                      */
// ELEM-FF: REL99 
  U8                        v_dest_port_range;        /*< 41:  1> valid-flag                                         */
  U8                        c_dest_port_range;        /*< 42:  1> counter                                            */
  U8                        dest_port_range[BAT_MAX_DEST_PORT_LEN]; /*< 43:  2> Range of destination port addresses.               */
// ELEM-FF: REL99 
  U8                        v_src_port_range;         /*< 45:  1> valid-flag                                         */
  U8                        c_src_port_range;         /*< 46:  1> counter                                            */
  U8                        src_port_range[BAT_MAX_SRC_PORT_LEN]; /*< 47:  2> Source port addresses range                        */
// ELEM-FF: REL99 
  U8                        _align0;                  /*< 49:  1> alignment                                          */
  U8                        _align1;                  /*< 50:  1> alignment                                          */
  U8                        v_ipsec_spi;              /*< 51:  1> valid-flag                                         */
  U32                       ipsec_spi;                /*< 52:  4> ipsec security parameter index (SPI)               */
// ELEM-FF: REL99 
  U8                        v_tos_mask_or_tc_mask;    /*< 56:  1> valid-flag                                         */
  U8                        c_tos_mask_or_tc_mask;    /*< 57:  1> counter                                            */
  U8                        tos_mask_or_tc_mask[BAT_MAX_TOS_MASK_OR_TC_MASK]; /*< 58:  2> Type of service and mask (IPv4) / traffic class and mask (IPv6) */
// ELEM-FF: REL99 
  U32                       flow_label;               /*< 60:  4> Flow label (IPv6)                                  */
// ELEM-FF: REL99 
  T_BAT_plus_cgtft_ctrl_tft_pf_entry ctrl_tft_pf_entry; /*< 64:  4> (enum=32bit)<->T_BAT_plus_cgtft_ctrl_tft_pf_entry IPV4/IPV6/notpreset */
} T_BAT_cmd_set_plus_cgtft;
#endif

#ifndef __T_BAT_cmd_set_percent_chld__
#define __T_BAT_cmd_set_percent_chld__
/*
 * The set command structure of the %CHLD command.
 * CCDGEN:WriteStruct_Count==2515
 */
typedef struct
{
  T_BAT_percent_chld_n      n;                        /*<  0:  4> (enum=32bit)<->T_BAT_percent_chld_n n              */
  S16                       x;                        /*<  4:  2> x is supported for 1, 2, 6 and 7, for 7 is X required */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_cmd_set_percent_chld;
#endif

#ifndef __T_BAT_cmd_set_percent_chpl__
#define __T_BAT_cmd_set_percent_chpl__
/*
 * The set command structure of the %CHPL command.
 * CCDGEN:WriteStruct_Count==2516
 */
typedef struct
{
  T_BAT_percent_chpl_oprfrmt oprfrmt;                 /*<  0:  4> (enum=32bit)<->T_BAT_percent_chpl_oprfrmt oprFrmt  */
} T_BAT_cmd_set_percent_chpl;
#endif

#ifndef __T_BAT_res_set_percent_chpl__
#define __T_BAT_res_set_percent_chpl__
/*
 * The set response structure of the %CHPL command.
 * CCDGEN:WriteStruct_Count==2517
 */
typedef struct
{
  T_BAT_percent_chpl_type   type;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_chpl_type Type of the entry */
  U8                        c_oper;                   /*<  4:  1> counter                                            */
  U8                        oper[BAT_MAX_CHPL_OPER_LEN]; /*<  5: 25> Operator String                                    */
  U8                        _align0;                  /*< 30:  1> alignment                                          */
  U8                        _align1;                  /*< 31:  1> alignment                                          */
} T_BAT_res_set_percent_chpl;
#endif

#ifndef __T_BAT_cmd_set_percent_chpl_w__
#define __T_BAT_cmd_set_percent_chpl_w__
/*
 * The set command structure of the %CHPL_W command.
 * CCDGEN:WriteStruct_Count==2518
 */
typedef struct
{
  T_BAT_percent_chpl_w_oprfrmt oprfrmt;               /*<  0:  4> (enum=32bit)<->T_BAT_percent_chpl_w_oprfrmt oprFrmt */
} T_BAT_cmd_set_percent_chpl_w;
#endif

#ifndef __T_BAT_res_set_percent_chpl_w__
#define __T_BAT_res_set_percent_chpl_w__
/*
 * The set response structure of the %CHPL_W command.
 * CCDGEN:WriteStruct_Count==2519
 */
typedef struct
{
  T_BAT_percent_chpl_w_type type;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_chpl_w_type Type of the entry */
  U8                        _align0;                  /*<  4:  1> alignment                                          */
  U8                        c_oper;                   /*<  5:  1> counter                                            */
  U16                       oper[BAT_MAX_CHPL_OPER_LEN]; /*<  6: 50> Operator String                                    */
} T_BAT_res_set_percent_chpl_w;
#endif

#ifndef __T_BAT_res_set_plus_cimi__
#define __T_BAT_res_set_plus_cimi__
/*
 * The set response structure of the +CIMI command.
 * CCDGEN:WriteStruct_Count==2520
 */
typedef struct
{
  U8                        c_imsi;                   /*<  0:  1> counter                                            */
  U8                        imsi[BAT_MAX_CIMI_IMSI_LEN]; /*<  1: 16> International Mobile Subscriber Identity           */
  U8                        _align0;                  /*< 17:  1> alignment                                          */
  U8                        _align1;                  /*< 18:  1> alignment                                          */
  U8                        _align2;                  /*< 19:  1> alignment                                          */
} T_BAT_res_set_plus_cimi;
#endif

#ifndef __T_BAT_res_que_plus_cind__
#define __T_BAT_res_que_plus_cind__
/*
 * The query answer structure of the +CIND command.
 * CCDGEN:WriteStruct_Count==2521
 */
typedef struct
{
  T_BAT_plus_cind_signal    signal;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_cind_signal signal indicator type */
  T_BAT_plus_cind_smsfull   smsfull;                  /*<  4:  4> (enum=32bit)<->T_BAT_plus_cind_smsfull smsfull     */
} T_BAT_res_que_plus_cind;
#endif

#ifndef __T_BAT_cmd_set_plus_cind__
#define __T_BAT_cmd_set_plus_cind__
/*
 * The set command structure of the +CIND command.
 * CCDGEN:WriteStruct_Count==2522
 */
typedef struct
{
  T_BAT_plus_cind_signal_ctrl signal_ctrl;            /*<  0:  4> (enum=32bit)<->T_BAT_plus_cind_signal_ctrl threshold level for signal strength */
  T_BAT_plus_cind_smsfull_ctrl smsfull_ctrl;          /*<  4:  4> (enum=32bit)<->T_BAT_plus_cind_smsfull_ctrl smsfull control */
} T_BAT_cmd_set_plus_cind;
#endif

#ifndef __T_BAT_res_uns_plus_clae__
#define __T_BAT_res_uns_plus_clae__
/*
 * The unsolicited result code structure of the +CLAE command.
 * CCDGEN:WriteStruct_Count==2523
 */
typedef struct
{
  U8                        c_code;                   /*<  0:  1> counter                                            */
  U8                        code[BAT_MAX_CLAE_CODE_LEN]; /*<  1:  2> code                                               */
  U8                        _align0;                  /*<  3:  1> alignment                                          */
} T_BAT_res_uns_plus_clae;
#endif

#ifndef __T_BAT_res_que_plus_clan__
#define __T_BAT_res_que_plus_clan__
/*
 * The query answer structure of the +CLAN command.
 * CCDGEN:WriteStruct_Count==2524
 */
typedef struct
{
  U8                        c_code;                   /*<  0:  1> counter                                            */
  U8                        code[BAT_MAX_CLAN_CODE_LEN]; /*<  1:  4> code (Including AUTO)                              */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_res_que_plus_clan;
#endif

#ifndef __T_BAT_cmd_set_plus_clan__
#define __T_BAT_cmd_set_plus_clan__
/*
 * The set command structure of the +CLAN command.
 * CCDGEN:WriteStruct_Count==2525
 */
typedef struct
{
  U8                        c_code;                   /*<  0:  1> counter                                            */
  U8                        code[BAT_MAX_CLAN_CODE_LEN]; /*<  1:  4> code (Including AUTO)                              */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_cmd_set_plus_clan;
#endif

#ifndef __T_BAT_res_tst_plus_clan__
#define __T_BAT_res_tst_plus_clan__
/*
 * The test answer structure of the +CLAN command.
 * CCDGEN:WriteStruct_Count==2526
 */
typedef struct
{
  U8                        c_code;                   /*<  0:  1> counter                                            */
  U8                        code[BAT_MAX_CLAN_CODE_LEN]; /*<  1:  4> code (Including AUTO)                              */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_res_tst_plus_clan;
#endif

#ifndef __T_BAT_res_uns_plus_clav__
#define __T_BAT_res_uns_plus_clav__
/*
 * The unsolicited result code structure of the +CLAV command.
 * CCDGEN:WriteStruct_Count==2527
 */
typedef struct
{
  U8                        c_code;                   /*<  0:  1> counter                                            */
  U8                        code[BAT_MAX_CLAV_CODE_LEN]; /*<  1:  4> Language code as defined in ISO 639                */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_res_uns_plus_clav;
#endif

#ifndef __T_BAT_res_que_plus_clcc__
#define __T_BAT_res_que_plus_clcc__
/*
 * The query answer structure of the +CLCC command.
 * CCDGEN:WriteStruct_Count==2528
 */
typedef struct
{
  S16                       idx;                      /*<  0:  2> Call Identification                                */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_clcc_dir       dir;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_clcc_dir Direction of call */
  T_BAT_plus_clcc_stat      stat;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_clcc_stat state of call  */
  T_BAT_plus_clcc_mode      mode;                     /*< 12:  4> (enum=32bit)<->T_BAT_plus_clcc_mode bearer or teleservice */
  T_BAT_plus_clcc_mpty      mpty;                     /*< 16:  4> (enum=32bit)<->T_BAT_plus_clcc_mpty Type of call   */
  S16                       type;                     /*< 20:  2> Type of address                                    */
  U8                        v_alpha;                  /*< 22:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 23:  1> counter                                            */
  U8                        alpha[BAT_MAX_PHB_NUM_LEN]; /*< 24: 44> alphanumeric representation of &lt;number&gt;      */
  U8                        v_number;                 /*< 68:  1> valid-flag                                         */
  U8                        c_number;                 /*< 69:  1> counter                                            */
  U8                        number[BAT_MAX_CLCC_NUMBER_LEN]; /*< 70: 81> Called number                                      */
  U8                        _align2;                  /*<151:  1> alignment                                          */
} T_BAT_res_que_plus_clcc;
#endif

#ifndef __T_BAT_cmd_set_plus_clck__
#define __T_BAT_cmd_set_plus_clck__
/*
 * The set command structure of the +CLCK command.
 * CCDGEN:WriteStruct_Count==2529
 */
typedef struct
{
  T_BAT_plus_clck_fac       fac;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_clck_fac facility        */
  T_BAT_plus_clck_mode      mode;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_clck_mode mode           */
  U8                        v_passwd;                 /*<  8:  1> valid-flag                                         */
  U8                        c_passwd;                 /*<  9:  1> counter                                            */
  U8                        passwd[BAT_MAX_CLCK_PWD_LEN]; /*< 10: 32> password string                                    */
  U8                        _align0;                  /*< 42:  1> alignment                                          */
  U8                        _align1;                  /*< 43:  1> alignment                                          */
  T_BAT_bearer_class        bearer_class;             /*< 44:  4> (enum=32bit)<->T_BAT_bearer_class Class Type       */
} T_BAT_cmd_set_plus_clck;
#endif

#ifndef __T_BAT_res_set_plus_clck__
#define __T_BAT_res_set_plus_clck__
/*
 * The set response structure of the +CLCK command.
 * CCDGEN:WriteStruct_Count==2530
 */
typedef struct
{
  T_BAT_plus_clck_status    status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_clck_status Status       */
  T_BAT_bearer_class        bearer_class;             /*<  4:  4> (enum=32bit)<->T_BAT_bearer_class Class Type       */
} T_BAT_res_set_plus_clck;
#endif

#ifndef __T_BAT_res_que_plus_clip__
#define __T_BAT_res_que_plus_clip__
/*
 * The query answer structure of the +CLIP command.
 * CCDGEN:WriteStruct_Count==2531
 */
typedef struct
{
  T_BAT_plus_clip_m         m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_clip_m subscriber CLIP service status in the network */
} T_BAT_res_que_plus_clip;
#endif

#ifndef __T_BAT_res_uns_plus_clip__
#define __T_BAT_res_uns_plus_clip__
/*
 * The unsolicited result code structure of the +CLIP command.
 * CCDGEN:WriteStruct_Count==2532
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CLIP_NUMBER_LEN]; /*<  1: 20> number                                             */
  U8                        type;                     /*< 21:  1> Type of address                                    */
  U8                        v_subaddr;                /*< 22:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 23:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 24: 20> Subaddress                                         */
  S16                       satype;                   /*< 44:  2> Type of subaddress                                 */
  U8                        v_alpha;                  /*< 46:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 47:  1> counter                                            */
  U8                        alpha[BAT_MAX_PHB_NUM_LEN]; /*< 48: 44> alphanumeric representation of &lt;number&gt;      */
  T_BAT_cli                 cli;                      /*< 92:  4> (enum=32bit)<->T_BAT_cli CLI validity              */
} T_BAT_res_uns_plus_clip;
#endif

#ifndef __T_BAT_res_que_plus_clip_w__
#define __T_BAT_res_que_plus_clip_w__
/*
 * The query answer structure of the +CLIP_W command.
 * CCDGEN:WriteStruct_Count==2533
 */
typedef struct
{
  T_BAT_plus_clip_w_m       m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_clip_w_m subscriber CLIP service status in the network */
} T_BAT_res_que_plus_clip_w;
#endif

#ifndef __T_BAT_res_uns_plus_clip_w__
#define __T_BAT_res_uns_plus_clip_w__
/*
 * The unsolicited result code structure of the +CLIP_W command.
 * CCDGEN:WriteStruct_Count==2534
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CLIP_NUMBER_LEN]; /*<  1: 20> number                                             */
  U8                        type;                     /*< 21:  1> Type of address                                    */
  U8                        v_subaddr;                /*< 22:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 23:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 24: 20> Subaddress                                         */
  S16                       satype;                   /*< 44:  2> Type of subaddress                                 */
  U8                        v_alpha;                  /*< 46:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 47:  1> counter                                            */
  U16                       alpha[BAT_MAX_PHB_NUM_LEN]; /*< 48: 88> alphanumeric representation of &lt;number&gt;      */
  T_BAT_cli                 cli;                      /*<136:  4> (enum=32bit)<->T_BAT_cli CLI validity              */
} T_BAT_res_uns_plus_clip_w;
#endif

#ifndef __T_BAT_res_que_plus_clir__
#define __T_BAT_res_que_plus_clir__
/*
 * The query answer structure of the +CLIR command.
 * CCDGEN:WriteStruct_Count==2535
 */
typedef struct
{
  T_BAT_plus_clir_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_clir_n Adjustment for outgoing calls */
  T_BAT_plus_clir_m         m;                        /*<  4:  4> (enum=32bit)<->T_BAT_plus_clir_m CLIR service status in the network */
} T_BAT_res_que_plus_clir;
#endif

#ifndef __T_BAT_cmd_set_plus_clir__
#define __T_BAT_cmd_set_plus_clir__
/*
 * The set command structure of the +CLIR command.
 * CCDGEN:WriteStruct_Count==2536
 */
typedef struct
{
  T_BAT_plus_clir_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_clir_n Adjustment for outgoing calls */
} T_BAT_cmd_set_plus_clir;
#endif

#ifndef __T_BAT_res_que_plus_clvl__
#define __T_BAT_res_que_plus_clvl__
/*
 * The query answer structure of the +CLVL command.
 * CCDGEN:WriteStruct_Count==2537
 */
typedef struct
{
  U8                        level;                    /*<  0:  1> integer type value with manufacturer specific range (smallest value represents the lowest sound level) */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_que_plus_clvl;
#endif

#ifndef __T_BAT_cmd_set_plus_clvl__
#define __T_BAT_cmd_set_plus_clvl__
/*
 * The set command structure of the +CLVL command.
 * CCDGEN:WriteStruct_Count==2538
 */
typedef struct
{
  U8                        level;                    /*<  0:  1> integer type value with manufacturer specific range (smallest value represents the lowest sound level) */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_clvl;
#endif

#ifndef __T_BAT_res_que_plus_cmer__
#define __T_BAT_res_que_plus_cmer__
/*
 * The query answer structure of the +CMER command.
 * CCDGEN:WriteStruct_Count==2539
 */
typedef struct
{
  T_BAT_plus_cmer_ind_option ind_option;              /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmer_ind_option indication option */
} T_BAT_res_que_plus_cmer;
#endif

#ifndef __T_BAT_cmd_set_plus_cmer__
#define __T_BAT_cmd_set_plus_cmer__
/*
 * The set command structure of the +CMER command.
 * CCDGEN:WriteStruct_Count==2540
 */
typedef struct
{
  T_BAT_plus_cmer_ind_option ind_option;              /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmer_ind_option indication option */
} T_BAT_cmd_set_plus_cmer;
#endif

#ifndef __T_BAT_res_plus_cme_error__
#define __T_BAT_res_plus_cme_error__
/*
 * The unsolicited result code structure of the +CME_ERROR command.
 * CCDGEN:WriteStruct_Count==2541
 */
typedef struct
{
  T_BAT_plus_cme_error_error error;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_cme_error_error Error    */
} T_BAT_res_plus_cme_error;
#endif


// STRUCT-FF: SIM_PERS 
#ifndef __T_BAT_cmd_set_percent_mepd__
#define __T_BAT_cmd_set_percent_mepd__
/*
 * The structure for %MEPD set comand
 * CCDGEN:WriteStruct_Count==2542
 */
typedef struct
{
// ELEM-FF: SIM_PERS 
  T_BAT_percent_mepd_sup_info sup_info_type;          /*<  0:  4> (enum=32bit)<->T_BAT_percent_mepd_sup_info Supplementary information for MEPD */
} T_BAT_cmd_set_percent_mepd;
#endif


// STRUCT-FF: SIM_PERS 
#ifndef __T_BAT_res_set_percent_mepd__
#define __T_BAT_res_set_percent_mepd__
/*
 * The set response structure of the %MEPD command
 * CCDGEN:WriteStruct_Count==2543
 */
typedef struct
{
// ELEM-FF: SIM_PERS 
  U8                        datavalue;                /*<  0:  1> Return value for supplementary information         */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_set_percent_mepd;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgc__
#define __T_BAT_cmd_set_plus_cmgc__
/*
 * The set command structure of the +CMGC command.
 * CCDGEN:WriteStruct_Count==2544
 */
typedef struct
{
  U8                        c_pdu;                    /*<  0:  1> counter                                            */
  U8                        pdu[BAT_MAX_CMGC_PDU_LEN]; /*<  1:176> PDU Data                                           */
  U8                        _align0;                  /*<177:  1> alignment                                          */
  U8                        _align1;                  /*<178:  1> alignment                                          */
  U8                        _align2;                  /*<179:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgc;
#endif

#ifndef __T_BAT_res_set_plus_cmgc__
#define __T_BAT_res_set_plus_cmgc__
/*
 * The set response structure of the +CMGC command.
 * CCDGEN:WriteStruct_Count==2545
 */
typedef struct
{
  U8                        mr;                       /*<  0:  1> message reference                                  */
  U8                        c_ackpdu;                 /*<  1:  1> counter                                            */
  U8                        ackpdu[BAT_MAX_CMGC_ACKPDU_LEN]; /*<  2:176> As PDU but only RP-User-Data element of RP-ACK PDU  c_ackpdu means not present */
  U8                        _align0;                  /*<178:  1> alignment                                          */
  U8                        _align1;                  /*<179:  1> alignment                                          */
} T_BAT_res_set_plus_cmgc;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgd__
#define __T_BAT_cmd_set_plus_cmgd__
/*
 * The set command structure of the +CMGD command.
 * CCDGEN:WriteStruct_Count==2546
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Range of location numbers supported by the associated memory */
  U8                        status;                   /*<  1:  1> Delete flag                                        */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgd;
#endif

#ifndef __T_BAT_cmd_set_percent_cmgl__
#define __T_BAT_cmd_set_percent_cmgl__
/*
 * The set command structure of the %CMGL command.
 * CCDGEN:WriteStruct_Count==2547
 */
typedef struct
{
  T_BAT_percent_cmgl_stat   stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cmgl_stat Status of message */
  U8                        v_rdmode;                 /*<  4:  1> valid-flag                                         */
  U8                        rdmode;                   /*<  5:  1> Read Mode                                          */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_cmd_set_percent_cmgl;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgl__
#define __T_BAT_cmd_set_plus_cmgl__
/*
 * The set command structure of the +CMGL command.
 * CCDGEN:WriteStruct_Count==2548
 */
typedef struct
{
  T_BAT_plus_cmgl_stat      stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmgl_stat Status of message */
} T_BAT_cmd_set_plus_cmgl;
#endif

#ifndef __T_BAT_res_set_percent_cmgl__
#define __T_BAT_res_set_percent_cmgl__
/*
 * The set response structure of the %CMGL command.
 * CCDGEN:WriteStruct_Count==2549
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_percent_cmgl_stat   stat;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cmgl_stat Status of message */
  U8                        v_alpha;                  /*<  8:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  9:  1> counter                                            */
  U8                        alpha[BAT_MAX_CMGL_ALPHA]; /*< 10: 42> Alphanumeric entry corresponding to phone number   */
  T_BAT_percent_cmgl_alpha_cs alpha_cs;               /*< 52:  4> (enum=32bit)<->T_BAT_percent_cmgl_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 56:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 57:176> PDU data                                           */
  U8                        _align2;                  /*<233:  1> alignment                                          */
  U8                        _align3;                  /*<234:  1> alignment                                          */
  U8                        _align4;                  /*<235:  1> alignment                                          */
} T_BAT_res_set_percent_cmgl;
#endif

#ifndef __T_BAT_res_set_plus_cmgl__
#define __T_BAT_res_set_plus_cmgl__
/*
 * The set response structure of the +CMGL command.
 * CCDGEN:WriteStruct_Count==2550
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cmgl_stat      stat;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_cmgl_stat Status of message */
  U8                        v_alpha;                  /*<  8:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  9:  1> counter                                            */
  U8                        alpha[BAT_MAX_CMGL_ALPHA]; /*< 10: 42> Alphanumeric entry corresponding to phone number   */
  T_BAT_plus_cmgl_alpha_cs  alpha_cs;                 /*< 52:  4> (enum=32bit)<->T_BAT_plus_cmgl_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 56:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 57:176> PDU data                                           */
  U8                        _align2;                  /*<233:  1> alignment                                          */
  U8                        _align3;                  /*<234:  1> alignment                                          */
  U8                        _align4;                  /*<235:  1> alignment                                          */
} T_BAT_res_set_plus_cmgl;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgl_w__
#define __T_BAT_cmd_set_plus_cmgl_w__
/*
 * The set command structure of the +CMGL_W command.
 * CCDGEN:WriteStruct_Count==2551
 */
typedef struct
{
  T_BAT_plus_cmgl_w_stat    stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmgl_w_stat Status of message */
} T_BAT_cmd_set_plus_cmgl_w;
#endif

#ifndef __T_BAT_res_set_plus_cmgl_w__
#define __T_BAT_res_set_plus_cmgl_w__
/*
 * The set response structure of the +CMGL_W command.
 * CCDGEN:WriteStruct_Count==2552
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cmgl_w_stat    stat;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_cmgl_w_stat Status of message */
  U8                        v_alpha;                  /*<  8:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  9:  1> counter                                            */
  U16                       alpha[BAT_MAX_CMGL_ALPHA]; /*< 10: 84> Alphanumeric entry corresponding to phone number   */
  U8                        _align2;                  /*< 94:  1> alignment                                          */
  U8                        _align3;                  /*< 95:  1> alignment                                          */
  T_BAT_plus_cmgl_w_alpha_cs alpha_cs;                /*< 96:  4> (enum=32bit)<->T_BAT_plus_cmgl_w_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*<100:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<101:176> PDU data                                           */
  U8                        _align4;                  /*<277:  1> alignment                                          */
  U8                        _align5;                  /*<278:  1> alignment                                          */
  U8                        _align6;                  /*<279:  1> alignment                                          */
} T_BAT_res_set_plus_cmgl_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cmgr__
#define __T_BAT_cmd_set_percent_cmgr__
/*
 * The set command structure of the %CMGR command.
 * CCDGEN:WriteStruct_Count==2553
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        v_rdmode;                 /*<  2:  1> valid-flag                                         */
  U8                        rdmode;                   /*<  3:  1> Read Mode                                          */
} T_BAT_cmd_set_percent_cmgr;
#endif

#ifndef __T_BAT_res_set_percent_cmgr__
#define __T_BAT_res_set_percent_cmgr__
/*
 * The set response structure of the %CMGR command.
 * CCDGEN:WriteStruct_Count==2554
 */
typedef struct
{
  T_BAT_sms_stat            sms_stat;                 /*<  0:  4> (enum=32bit)<->T_BAT_sms_stat Status of message    */
  U8                        v_alpha;                  /*<  4:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  5:  1> counter                                            */
  U8                        alpha[BAT_MAX_CMGR_ALPHA]; /*<  6: 42> Alphanumeric entry corresponding to phone number   */
  T_BAT_percent_cmgr_alpha_cs alpha_cs;               /*< 48:  4> (enum=32bit)<->T_BAT_percent_cmgr_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 52:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 53:176> PDU data                                           */
  U8                        _align0;                  /*<229:  1> alignment                                          */
  U8                        _align1;                  /*<230:  1> alignment                                          */
  U8                        _align2;                  /*<231:  1> alignment                                          */
} T_BAT_res_set_percent_cmgr;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgr__
#define __T_BAT_cmd_set_plus_cmgr__
/*
 * The set command structure of the +CMGR command.
 * CCDGEN:WriteStruct_Count==2555
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgr;
#endif

#ifndef __T_BAT_res_set_plus_cmgr__
#define __T_BAT_res_set_plus_cmgr__
/*
 * The set response structure of the +CMGR command.
 * CCDGEN:WriteStruct_Count==2556
 */
typedef struct
{
  T_BAT_sms_stat            sms_stat;                 /*<  0:  4> (enum=32bit)<->T_BAT_sms_stat Status of message    */
  U8                        v_alpha;                  /*<  4:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  5:  1> counter                                            */
  U8                        alpha[BAT_MAX_CMGR_ALPHA]; /*<  6: 42> Alphanumeric entry corresponding to phone number   */
  T_BAT_plus_cmgr_alpha_cs  alpha_cs;                 /*< 48:  4> (enum=32bit)<->T_BAT_plus_cmgr_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 52:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 53:176> PDU data                                           */
  U8                        _align0;                  /*<229:  1> alignment                                          */
  U8                        _align1;                  /*<230:  1> alignment                                          */
  U8                        _align2;                  /*<231:  1> alignment                                          */
} T_BAT_res_set_plus_cmgr;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgr_w__
#define __T_BAT_cmd_set_plus_cmgr_w__
/*
 * The set command structure of the +CMGR_W command.
 * CCDGEN:WriteStruct_Count==2557
 */
typedef struct
{
  U16                       sms_index;                /*<  0:  2> Index of message                                   */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgr_w;
#endif

#ifndef __T_BAT_res_set_plus_cmgr_w__
#define __T_BAT_res_set_plus_cmgr_w__
/*
 * The set response structure of the +CMGR_W command.
 * CCDGEN:WriteStruct_Count==2558
 */
typedef struct
{
  T_BAT_sms_stat            sms_stat;                 /*<  0:  4> (enum=32bit)<->T_BAT_sms_stat Status of message    */
  U8                        v_alpha;                  /*<  4:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  5:  1> counter                                            */
  U16                       alpha[BAT_MAX_CMGR_ALPHA]; /*<  6: 84> Alphanumeric entry corresponding to phone number   */
  U8                        _align0;                  /*< 90:  1> alignment                                          */
  U8                        _align1;                  /*< 91:  1> alignment                                          */
  T_BAT_plus_cmgr_w_alpha_cs alpha_cs;                /*< 92:  4> (enum=32bit)<->T_BAT_plus_cmgr_w_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 96:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 97:176> PDU data                                           */
  U8                        _align2;                  /*<273:  1> alignment                                          */
  U8                        _align3;                  /*<274:  1> alignment                                          */
  U8                        _align4;                  /*<275:  1> alignment                                          */
} T_BAT_res_set_plus_cmgr_w;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_que_percent_cmgrs__
#define __T_BAT_res_que_percent_cmgrs__
/*
 * Query answer for %cmgrs command
 * CCDGEN:WriteStruct_Count==2559
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_percent_cmgrs_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cmgrs_mode Mode for retransmission */
} T_BAT_res_que_percent_cmgrs;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_cmd_set_percent_cmgrs__
#define __T_BAT_cmd_set_percent_cmgrs__
/*
 * The set command structure for %CMGRS
 * CCDGEN:WriteStruct_Count==2560
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_percent_cmgrs_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cmgrs_mode Mode for retransmission */
} T_BAT_cmd_set_percent_cmgrs;
#endif


// STRUCT-FF: REL99 
#ifndef __T_BAT_res_uns_percent_cmgrs__
#define __T_BAT_res_uns_percent_cmgrs__
/*
 * Unsolicited result during retransmission
 * CCDGEN:WriteStruct_Count==2561
 */
typedef struct
{
// ELEM-FF: REL99 
  T_BAT_percent_cmgrs_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cmgrs_mode Mode for retransmission */
// ELEM-FF: REL99 
  U8                        tp_mr;                    /*<  4:  1> Message reference                                  */
// ELEM-FF: REL99 
  U8                        resend_count;             /*<  5:  1> Current number of resend attempt                   */
// ELEM-FF: REL99 
  U8                        max_retrans;              /*<  6:  1> Maximum retransmission attempt                     */
  U8                        _align0;                  /*<  7:  1> alignment                                          */
} T_BAT_res_uns_percent_cmgrs;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgs__
#define __T_BAT_cmd_set_plus_cmgs__
/*
 * The set command structure of the +CMGS command.
 * CCDGEN:WriteStruct_Count==2562
 */
typedef struct
{
  U8                        length;                   /*<  0:  1> number of octets without SMSC address octets       */
  U8                        c_pdu;                    /*<  1:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<  2:176> PDU data                                           */
  U8                        _align0;                  /*<178:  1> alignment                                          */
  U8                        _align1;                  /*<179:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgs;
#endif

#ifndef __T_BAT_res_set_plus_cmgs__
#define __T_BAT_res_set_plus_cmgs__
/*
 * The set response structure of the +CMGS command.
 * CCDGEN:WriteStruct_Count==2563
 */
typedef struct
{
  U8                        mr;                       /*<  0:  1> Message reference value                            */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_set_plus_cmgs;
#endif

#ifndef __T_BAT_cmd_set_plus_cmgw__
#define __T_BAT_cmd_set_plus_cmgw__
/*
 * The set command structure of the +CMGW command.
 * CCDGEN:WriteStruct_Count==2564
 */
typedef struct
{
  U8                        length;                   /*<  0:  1> number of octets without SMSC address octets       */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_sms_stat            sms_stat;                 /*<  4:  4> (enum=32bit)<->T_BAT_sms_stat Status of message    */
  U8                        c_pdu;                    /*<  8:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<  9:176> PDU data                                           */
  U8                        _align3;                  /*<185:  1> alignment                                          */
  U8                        _align4;                  /*<186:  1> alignment                                          */
  U8                        _align5;                  /*<187:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmgw;
#endif

#ifndef __T_BAT_res_set_plus_cmgw__
#define __T_BAT_res_set_plus_cmgw__
/*
 * The set response structure of the +CMGW command.
 * CCDGEN:WriteStruct_Count==2565
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Index of written message                           */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_set_plus_cmgw;
#endif

#ifndef __T_BAT_res_que_plus_cmod__
#define __T_BAT_res_que_plus_cmod__
/*
 * The query answer structure of the +CMOD command.
 * CCDGEN:WriteStruct_Count==2566
 */
typedef struct
{
  T_BAT_plus_cmod_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmod_mode Call mode      */
} T_BAT_res_que_plus_cmod;
#endif

#ifndef __T_BAT_cmd_set_plus_cmod__
#define __T_BAT_cmd_set_plus_cmod__
/*
 * The set command structure of the +CMOD command.
 * CCDGEN:WriteStruct_Count==2567
 */
typedef struct
{
  T_BAT_plus_cmod_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmod_mode Call mode      */
} T_BAT_cmd_set_plus_cmod;
#endif

#ifndef __T_BAT_cmd_set_plus_cmss__
#define __T_BAT_cmd_set_plus_cmss__
/*
 * The set command structure of the +CMSS command.
 * CCDGEN:WriteStruct_Count==2568
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Storage area index                                 */
  U8                        v_da;                     /*<  1:  1> valid-flag                                         */
  U8                        c_da;                     /*<  2:  1> counter                                            */
  U8                        da[BAT_MAX_CMSS_DEST_ADDR_LEN]; /*<  3: 20> Destination address                                */
  U8                        _align0;                  /*< 23:  1> alignment                                          */
  S16                       toda;                     /*< 24:  2> Type of destination address                        */
  U8                        _align1;                  /*< 26:  1> alignment                                          */
  U8                        _align2;                  /*< 27:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmss;
#endif

#ifndef __T_BAT_res_set_plus_cmss__
#define __T_BAT_res_set_plus_cmss__
/*
 * The set response structure of the +CMSS command.
 * CCDGEN:WriteStruct_Count==2569
 */
typedef struct
{
  U8                        mr;                       /*<  0:  1> Message reference value                            */
  U8                        v_ackpdu;                 /*<  1:  1> valid-flag                                         */
  U8                        c_ackpdu;                 /*<  2:  1> counter                                            */
  U8                        ackpdu[BAT_MAX_CMSS_ACKPDU_LEN]; /*<  3:176> As PDU but only RP-User-Data element of RP-ACK PDU  c_ackpdu means not present */
  U8                        _align0;                  /*<179:  1> alignment                                          */
} T_BAT_res_set_plus_cmss;
#endif

#ifndef __T_BAT_res_plus_cms_error__
#define __T_BAT_res_plus_cms_error__
/*
 * The unsolicited result code structure of the +CMS_ERROR command.
 * CCDGEN:WriteStruct_Count==2570
 */
typedef struct
{
  T_BAT_plus_cms_error_err  err;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cms_error_err Error code */
} T_BAT_res_plus_cms_error;
#endif

#ifndef __T_BAT_res_uns_plus_cmt__
#define __T_BAT_res_uns_plus_cmt__
/*
 * The unsolicited result code structure of the +CMT command.
 * CCDGEN:WriteStruct_Count==2571
 */
typedef struct
{
  U8                        v_alpha;                  /*<  0:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  1:  1> counter                                            */
  U8                        alpha[BAT_MAX_CMT_ALPHA]; /*<  2: 42> Corresponding phonebook entry                      */
  T_BAT_plus_cmt_alpha_cs   alpha_cs;                 /*< 44:  4> (enum=32bit)<->T_BAT_plus_cmt_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 48:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 49:176> PDU data                                           */
  U8                        _align0;                  /*<225:  1> alignment                                          */
  U8                        _align1;                  /*<226:  1> alignment                                          */
  U8                        _align2;                  /*<227:  1> alignment                                          */
} T_BAT_res_uns_plus_cmt;
#endif

#ifndef __T_BAT_res_uns_plus_cmti__
#define __T_BAT_res_uns_plus_cmti__
/*
 * The unsolicited result code structure of the +CMTI command.
 * CCDGEN:WriteStruct_Count==2572
 */
typedef struct
{
  T_BAT_sms_mem             sms_mem;                  /*<  0:  4> (enum=32bit)<->T_BAT_sms_mem Memory area for SMS   */
  U16                       sms_index;                /*<  4:  2> Index of message                                   */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_res_uns_plus_cmti;
#endif

#ifndef __T_BAT_res_uns_plus_cmt_w__
#define __T_BAT_res_uns_plus_cmt_w__
/*
 * The unsolicited result code structure of the +CMT_W command.
 * CCDGEN:WriteStruct_Count==2573
 */
typedef struct
{
  U8                        v_alpha;                  /*<  0:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  1:  1> counter                                            */
  U16                       alpha[BAT_MAX_CMT_ALPHA]; /*<  2: 84> Corresponding phonebook entry                      */
  U8                        _align0;                  /*< 86:  1> alignment                                          */
  U8                        _align1;                  /*< 87:  1> alignment                                          */
  T_BAT_plus_cmt_w_alpha_cs alpha_cs;                 /*< 88:  4> (enum=32bit)<->T_BAT_plus_cmt_w_alpha_cs Data coding scheme for 'alpha' */
  U8                        c_pdu;                    /*< 92:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*< 93:176> PDU data                                           */
  U8                        _align2;                  /*<269:  1> alignment                                          */
  U8                        _align3;                  /*<270:  1> alignment                                          */
  U8                        _align4;                  /*<271:  1> alignment                                          */
} T_BAT_res_uns_plus_cmt_w;
#endif

#ifndef __T_BAT_res_que_plus_cmut__
#define __T_BAT_res_que_plus_cmut__
/*
 * The query answer structure of the +CMUT command.
 * CCDGEN:WriteStruct_Count==2574
 */
typedef struct
{
  T_BAT_plus_cmut_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmut_n Mute Control      */
} T_BAT_res_que_plus_cmut;
#endif

#ifndef __T_BAT_cmd_set_plus_cmut__
#define __T_BAT_cmd_set_plus_cmut__
/*
 * The set command structure of the +CMUT command.
 * CCDGEN:WriteStruct_Count==2575
 */
typedef struct
{
  T_BAT_plus_cmut_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmut_n Mute Control      */
} T_BAT_cmd_set_plus_cmut;
#endif

#ifndef __T_BAT_res_que_plus_cmux__
#define __T_BAT_res_que_plus_cmux__
/*
 * The query answer structure of the +CMUX command.
 * CCDGEN:WriteStruct_Count==2576
 */
typedef struct
{
  T_BAT_plus_cmux_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmux_mode Multiplexer transparency mechanism */
  T_BAT_plus_cmux_subset    subset;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cmux_subset Defines the way in which the multiplexer control channel is set up */
  T_BAT_plus_cmux_port_speed port_speed;              /*<  8:  4> (enum=32bit)<->T_BAT_plus_cmux_port_speed Port speed (transmission rate) */
  U16                       n1;                       /*< 12:  2> Maximum frame size                                 */
  U8                        t1;                       /*< 14:  1> Acknowledgement timer in units of ten milliseconds */
  U8                        n2;                       /*< 15:  1> Maximum number of retransmissions                  */
  U8                        t2;                       /*< 16:  1> Response timer for the multiplexer control channel in units of ten milliseconds */
  U8                        t3;                       /*< 17:  1> Wake up response timer in seconds                  */
  S16                       k;                        /*< 18:  2> Window size, for Advanced operation with Error Recovery options */
} T_BAT_res_que_plus_cmux;
#endif

#ifndef __T_BAT_cmd_set_plus_cmux__
#define __T_BAT_cmd_set_plus_cmux__
/*
 * The set command structure of the +CMUX command.
 * CCDGEN:WriteStruct_Count==2577
 */
typedef struct
{
  T_BAT_plus_cmux_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cmux_mode Multiplexer transparency mechanism */
  T_BAT_plus_cmux_subset    subset;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cmux_subset Defines the way in which the multiplexer control channel is set up */
  T_BAT_plus_cmux_port_speed port_speed;              /*<  8:  4> (enum=32bit)<->T_BAT_plus_cmux_port_speed Port speed (transmission rate) */
  S32                       n1;                       /*< 12:  4> Maximum frame size                                 */
  S16                       t1;                       /*< 16:  2> Acknowledgement timer in units of ten milliseconds */
  S16                       n2;                       /*< 18:  2> Maximum number of retransmissions                  */
  S16                       t2;                       /*< 20:  2> Response timer for the multiplexer control channel in units of ten milliseconds */
  S16                       t3;                       /*< 22:  2> Wake up response timer in seconds                  */
  S16                       k;                        /*< 24:  2> Window size, for Advanced operation with Error Recovery options */
  U8                        _align0;                  /*< 26:  1> alignment                                          */
  U8                        _align1;                  /*< 27:  1> alignment                                          */
} T_BAT_cmd_set_plus_cmux;
#endif

#ifndef __T_BAT_res_que_percent_cnap__
#define __T_BAT_res_que_percent_cnap__
/*
 * The query answer structure of the %CNAP command.
 * CCDGEN:WriteStruct_Count==2578
 */
typedef struct
{
  T_BAT_percent_cnap_status status;                   /*<  0:  4> (enum=32bit)<->T_BAT_percent_cnap_status Status of CNAP service */
} T_BAT_res_que_percent_cnap;
#endif

#ifndef __T_BAT_res_uns_percent_cnap__
#define __T_BAT_res_uns_percent_cnap__
/*
 * The unsolicited result code structure of the %CNAP command.
 * CCDGEN:WriteStruct_Count==2579
 */
typedef struct
{
  T_BAT_percent_cnap_pres_mode pres_mode;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cnap_pres_mode Presentation mode */
  S16                       dcs;                      /*<  4:  2> Data coding scheme (3GPP TS 23.038)                */
  U8                        v_name;                   /*<  6:  1> valid-flag                                         */
  U8                        c_name;                   /*<  7:  1> counter                                            */
  U8                        name[BAT_MAX_CNAP_NAME_LEN]; /*<  8:160> Calling name string                                */
} T_BAT_res_uns_percent_cnap;
#endif

#ifndef __T_BAT_cmd_set_plus_cnma__
#define __T_BAT_cmd_set_plus_cnma__
/*
 * The set command structure of the +CNMA command.
 * CCDGEN:WriteStruct_Count==2580
 */
typedef struct
{
  T_BAT_plus_cnma_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cnma_n Status            */
  U8                        v_pdu;                    /*<  4:  1> valid-flag                                         */
  U8                        c_pdu;                    /*<  5:  1> counter                                            */
  U8                        pdu[BAT_MAX_SM_LEN];      /*<  6:176> PDU data                                           */
  U8                        _align0;                  /*<182:  1> alignment                                          */
  U8                        _align1;                  /*<183:  1> alignment                                          */
} T_BAT_cmd_set_plus_cnma;
#endif

#ifndef __T_BAT_res_que_plus_cnmi__
#define __T_BAT_res_que_plus_cnmi__
/*
 * The query answer structure of the +CNMI command.
 * CCDGEN:WriteStruct_Count==2581
 */
typedef struct
{
  T_BAT_plus_cnmi_mt        mt;                       /*<  0:  4> (enum=32bit)<->T_BAT_plus_cnmi_mt Indication routing for SMS-DELIVERs */
  T_BAT_plus_cnmi_bm        bm;                       /*<  4:  4> (enum=32bit)<->T_BAT_plus_cnmi_bm Indication routing for CBMs */
  T_BAT_plus_cnmi_ds        ds;                       /*<  8:  4> (enum=32bit)<->T_BAT_plus_cnmi_ds Indication routing for SMS-STATUS */
} T_BAT_res_que_plus_cnmi;
#endif

#ifndef __T_BAT_cmd_set_plus_cnmi__
#define __T_BAT_cmd_set_plus_cnmi__
/*
 * The set command structure of the +CNMI command.
 * CCDGEN:WriteStruct_Count==2582
 */
typedef struct
{
  T_BAT_plus_cnmi_mt        mt;                       /*<  0:  4> (enum=32bit)<->T_BAT_plus_cnmi_mt Indication routing for SMS-DELIVERs */
  T_BAT_plus_cnmi_bm        bm;                       /*<  4:  4> (enum=32bit)<->T_BAT_plus_cnmi_bm Indication routing for CBMs */
  T_BAT_plus_cnmi_ds        ds;                       /*<  8:  4> (enum=32bit)<->T_BAT_plus_cnmi_ds Indication routing for SMS-STATUS */
} T_BAT_cmd_set_plus_cnmi;
#endif

#ifndef __T_BAT_res_set_plus_cnum__
#define __T_BAT_res_set_plus_cnum__
/*
 * The set response structure of the +CNUM command.
 * CCDGEN:WriteStruct_Count==2583
 */
typedef struct
{
  U8                        v_alpha;                  /*<  0:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  1:  1> counter                                            */
  U8                        alpha[BAT_MAX_CNUM_ALPHA_LEN]; /*<  2: 21> Text string associated with phone number           */
  U8                        c_number;                 /*< 23:  1> counter                                            */
  U8                        number[BAT_MAX_CNUM_NUMBER_LEN]; /*< 24: 81> Phone number                                       */
  U8                        type;                     /*<105:  1> Type of address                                    */
  U8                        index;                    /*<106:  1> Value in the range of location numbers of phonebook memory */
  U8                        _align0;                  /*<107:  1> alignment                                          */
} T_BAT_res_set_plus_cnum;
#endif

#ifndef __T_BAT_res_set_plus_cnum_w__
#define __T_BAT_res_set_plus_cnum_w__
/*
 * The set response structure of the +CNUM_W command.
 * CCDGEN:WriteStruct_Count==2584
 */
typedef struct
{
  U8                        v_alpha;                  /*<  0:  1> valid-flag                                         */
  U8                        c_alpha;                  /*<  1:  1> counter                                            */
  U16                       alpha[BAT_MAX_CNUM_ALPHA_LEN]; /*<  2: 42> Text string associated with phone number           */
  U8                        c_number;                 /*< 44:  1> counter                                            */
  U8                        number[BAT_MAX_CNUM_NUMBER_LEN]; /*< 45: 81> Phone number                                       */
  U8                        type;                     /*<126:  1> Type of address                                    */
  U8                        index;                    /*<127:  1> Value in the range of location numbers of phonebook memory */
} T_BAT_res_set_plus_cnum_w;
#endif

#ifndef __T_BAT_res_que_plus_colp__
#define __T_BAT_res_que_plus_colp__
/*
 * The query answer structure of the +COLP command.
 * CCDGEN:WriteStruct_Count==2585
 */
typedef struct
{
  T_BAT_plus_colp_m         m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_colp_m COLP status       */
} T_BAT_res_que_plus_colp;
#endif

#ifndef __T_BAT_res_uns_plus_colp__
#define __T_BAT_res_uns_plus_colp__
/*
 * The unsolicited result code structure of the +COLP command.
 * CCDGEN:WriteStruct_Count==2586
 */
typedef struct
{
  U8                        v_number;                 /*<  0:  1> valid-flag                                         */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_COLP_NUMBER_LEN]; /*<  2: 39> number                                             */
  U8                        type;                     /*< 41:  1> Type of address                                    */
  U8                        v_subaddr;                /*< 42:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 43:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 44: 20> Subaddress                                         */
  S16                       satype;                   /*< 64:  2> Type of subaddress                                 */
  U8                        v_alpha;                  /*< 66:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 67:  1> counter                                            */
  U8                        alpha[BAT_MAX_COLP_ALPHA_LEN]; /*< 68: 44> alphanumeric representation of &lt;number&gt;      */
} T_BAT_res_uns_plus_colp;
#endif

#ifndef __T_BAT_res_que_plus_colp_w__
#define __T_BAT_res_que_plus_colp_w__
/*
 * The query answer structure of the +COLP_W command.
 * CCDGEN:WriteStruct_Count==2587
 */
typedef struct
{
  T_BAT_plus_colp_w_m       m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_colp_w_m COLP status     */
} T_BAT_res_que_plus_colp_w;
#endif

#ifndef __T_BAT_res_uns_plus_colp_w__
#define __T_BAT_res_uns_plus_colp_w__
/*
 * The unsolicited result code structure of the +COLP_W command.
 * CCDGEN:WriteStruct_Count==2588
 */
typedef struct
{
  U8                        v_number;                 /*<  0:  1> valid-flag                                         */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_COLP_NUMBER_LEN]; /*<  2: 39> number                                             */
  U8                        type;                     /*< 41:  1> Type of address                                    */
  U8                        v_subaddr;                /*< 42:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 43:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 44: 20> Subaddress                                         */
  S16                       satype;                   /*< 64:  2> Type of subaddress                                 */
  U8                        v_alpha;                  /*< 66:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 67:  1> counter                                            */
  U16                       alpha[BAT_MAX_COLP_ALPHA_LEN]; /*< 68: 88> alphanumeric representation of &lt;number&gt;      */
} T_BAT_res_uns_plus_colp_w;
#endif

#ifndef __T_BAT_res_at_connect__
#define __T_BAT_res_at_connect__
/*
 * The unsolicited result code structure of the CONNECT command.
 * CCDGEN:WriteStruct_Count==2589
 */
typedef struct
{
  T_BAT_at_connect_data_rate data_rate;               /*<  0:  4> (enum=32bit)<->T_BAT_at_connect_data_rate Data rate */
} T_BAT_res_at_connect;
#endif

#ifndef __T_BAT_res_que_percent_cops__
#define __T_BAT_res_que_percent_cops__
/*
 * The query answer structure of the %COPS command.
 * CCDGEN:WriteStruct_Count==2590
 */
typedef struct
{
  T_BAT_percent_cops_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_mode Selection mode */
  T_BAT_percent_cops_format format;                   /*<  4:  4> (enum=32bit)<->T_BAT_percent_cops_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*< 10: 30> Operator name                                      */
  T_BAT_percent_cops_service service;                 /*< 40:  4> (enum=32bit)<->T_BAT_percent_cops_service Service status */
} T_BAT_res_que_percent_cops;
#endif

#ifndef __T_BAT_cmd_set_percent_cops__
#define __T_BAT_cmd_set_percent_cops__
/*
 * The set command structure of the %COPS command.
 * CCDGEN:WriteStruct_Count==2591
 */
typedef struct
{
  T_BAT_percent_cops_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_mode Selection mode */
  T_BAT_percent_cops_format format;                   /*<  4:  4> (enum=32bit)<->T_BAT_percent_cops_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*< 10: 30> Operator name                                      */
} T_BAT_cmd_set_percent_cops;
#endif

#ifndef __T_BAT_res_tst_percent_cops__
#define __T_BAT_res_tst_percent_cops__
/*
 * The test answer structure of the %COPS command.
 * CCDGEN:WriteStruct_Count==2592
 */
typedef struct
{
  T_BAT_percent_cops_status status;                   /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_status Indicating the availability of the operator */
  U8                        v_long_oper;              /*<  4:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  5:  1> counter                                            */
  U8                        long_oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*<  6: 30> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 36:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 37:  1> counter                                            */
  U8                        short_oper[BAT_MAX_COPS_SHORT_OPER_LEN]; /*< 38: 10> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 48:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 49:  1> counter                                            */
  U8                        num_oper[BAT_MAX_COPS_NUM_OPER_LEN]; /*< 50:  7> Operator name in numeric format                    */
  U8                        _align0;                  /*< 57:  1> alignment                                          */
  U8                        _align1;                  /*< 58:  1> alignment                                          */
  U8                        _align2;                  /*< 59:  1> alignment                                          */
} T_BAT_res_tst_percent_cops;
#endif

#ifndef __T_BAT_res_que_plus_cops__
#define __T_BAT_res_que_plus_cops__
/*
 * The query answer structure of the +COPS command.
 * CCDGEN:WriteStruct_Count==2593
 */
typedef struct
{
  T_BAT_plus_cops_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cops_mode Selection mode */
  T_BAT_plus_cops_format    format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cops_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_OPER_LEN]; /*< 10: 30> Operator name                                      */
} T_BAT_res_que_plus_cops;
#endif

#ifndef __T_BAT_cmd_set_plus_cops__
#define __T_BAT_cmd_set_plus_cops__
/*
 * The set command structure of the +COPS command.
 * CCDGEN:WriteStruct_Count==2594
 */
typedef struct
{
  T_BAT_plus_cops_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cops_mode Selection mode */
  T_BAT_plus_cops_format    format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cops_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_OPER_LEN]; /*< 10: 30> Operator name                                      */
} T_BAT_cmd_set_plus_cops;
#endif

#ifndef __T_BAT_res_tst_plus_cops__
#define __T_BAT_res_tst_plus_cops__
/*
 * The test answer structure of the +COPS command.
 * CCDGEN:WriteStruct_Count==2595
 */
typedef struct
{
  T_BAT_plus_cops_status    status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_cops_status Indicating the availability of the operator */
  U8                        v_long_oper;              /*<  4:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  5:  1> counter                                            */
  U8                        long_oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*<  6: 30> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 36:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 37:  1> counter                                            */
  U8                        short_oper[BAT_MAX_COPS_SHORT_OPER_LEN]; /*< 38: 10> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 48:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 49:  1> counter                                            */
  U8                        num_oper[BAT_MAX_COPS_NUM_OPER_LEN]; /*< 50:  7> Operator name in numeric format                    */
  U8                        _align0;                  /*< 57:  1> alignment                                          */
  U8                        _align1;                  /*< 58:  1> alignment                                          */
  U8                        _align2;                  /*< 59:  1> alignment                                          */
} T_BAT_res_tst_plus_cops;
#endif

#ifndef __T_BAT_res_que_percent_cops_w__
#define __T_BAT_res_que_percent_cops_w__
/*
 * The query answer structure of the %COPS_W command.
 * CCDGEN:WriteStruct_Count==2596
 */
typedef struct
{
  T_BAT_percent_cops_w_mode mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_w_mode Selection mode */
  T_BAT_percent_cops_w_format format;                 /*<  4:  4> (enum=32bit)<->T_BAT_percent_cops_w_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*< 10: 30> Operator name                                      */
  T_BAT_percent_cops_w_service service;               /*< 40:  4> (enum=32bit)<->T_BAT_percent_cops_w_service Service status */
} T_BAT_res_que_percent_cops_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cops_w__
#define __T_BAT_cmd_set_percent_cops_w__
/*
 * The set command structure of the %COPS_W command.
 * CCDGEN:WriteStruct_Count==2597
 */
typedef struct
{
  T_BAT_percent_cops_w_mode mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_w_mode Selection mode */
  T_BAT_percent_cops_w_format format;                 /*<  4:  4> (enum=32bit)<->T_BAT_percent_cops_w_format Format of the operator name */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*< 10: 30> Operator name                                      */
} T_BAT_cmd_set_percent_cops_w;
#endif

#ifndef __T_BAT_res_tst_percent_cops_w__
#define __T_BAT_res_tst_percent_cops_w__
/*
 * The test answer structure of the %COPS_W command.
 * CCDGEN:WriteStruct_Count==2598
 */
typedef struct
{
  T_BAT_percent_cops_w_status status;                 /*<  0:  4> (enum=32bit)<->T_BAT_percent_cops_w_status Indicating the availability of the operator */
  U8                        v_long_oper;              /*<  4:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  5:  1> counter                                            */
  U16                       long_oper[BAT_MAX_COPS_LONG_OPER_LEN]; /*<  6: 60> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 66:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 67:  1> counter                                            */
  U16                       short_oper[BAT_MAX_COPS_SHORT_OPER_LEN]; /*< 68: 20> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 88:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 89:  1> counter                                            */
  U8                        num_oper[BAT_MAX_COPS_NUM_OPER_LEN]; /*< 90:  7> Operator name in numeric format                    */
  U8                        _align0;                  /*< 97:  1> alignment                                          */
  U8                        _align1;                  /*< 98:  1> alignment                                          */
  U8                        _align2;                  /*< 99:  1> alignment                                          */
} T_BAT_res_tst_percent_cops_w;
#endif

#ifndef __T_BAT_res_que_percent_cpals__
#define __T_BAT_res_que_percent_cpals__
/*
 * The query answer structure of the %CPALS command.
 * CCDGEN:WriteStruct_Count==2599
 */
typedef struct
{
  T_BAT_percent_cpals_lines lines;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpals_lines Bit field */
} T_BAT_res_que_percent_cpals;
#endif

#ifndef __T_BAT_cmd_set_percent_cpals__
#define __T_BAT_cmd_set_percent_cpals__
/*
 * The set command structure of the %CPALS command.
 * CCDGEN:WriteStruct_Count==2600
 */
typedef struct
{
  U8                        call_id;                  /*<  0:  1> Call id of line being queried. This value is the same as the call id described in GSM 02.30 sub clause 4.5.5.1 */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_percent_cpals;
#endif

#ifndef __T_BAT_res_set_percent_cpals__
#define __T_BAT_res_set_percent_cpals__
/*
 * The set response structure of the %CPALS command.
 * CCDGEN:WriteStruct_Count==2601
 */
typedef struct
{
  T_BAT_percent_cpals_lines lines;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpals_lines Bit field */
  U8                        c_msisdn_id;              /*<  4:  1> counter                                            */
  U8                        msisdn_id[BAT_MAX_CPALS_MSISDN_ID_LEN]; /*<  5: 22> MSISDN identification as found on the SIM. If no MSISDN identification can be found on the SIM then the default strings 'Line 1', 'Data', 'Fax' and 'Line 2' will be applied. */
  U8                        _align0;                  /*< 27:  1> alignment                                          */
} T_BAT_res_set_percent_cpals;
#endif

#ifndef __T_BAT_res_que_percent_cpals_w__
#define __T_BAT_res_que_percent_cpals_w__
/*
 * The query answer structure of the %CPALS_W command.
 * CCDGEN:WriteStruct_Count==2602
 */
typedef struct
{
  T_BAT_percent_cpals_w_lines lines;                  /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpals_w_lines Bit field */
} T_BAT_res_que_percent_cpals_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cpals_w__
#define __T_BAT_cmd_set_percent_cpals_w__
/*
 * The set command structure of the %CPALS_W command.
 * CCDGEN:WriteStruct_Count==2603
 */
typedef struct
{
  U8                        call_id;                  /*<  0:  1> Call id of line being queried. This value is the same as the call id described in GSM 02.30 sub clause 4.5.5.1 */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_percent_cpals_w;
#endif

#ifndef __T_BAT_res_set_percent_cpals_w__
#define __T_BAT_res_set_percent_cpals_w__
/*
 * The set response structure of the %CPALS_W command.
 * CCDGEN:WriteStruct_Count==2604
 */
typedef struct
{
  T_BAT_percent_cpals_w_lines lines;                  /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpals_w_lines Bit field */
  U8                        _align0;                  /*<  4:  1> alignment                                          */
  U8                        c_msisdn_id;              /*<  5:  1> counter                                            */
  U16                       msisdn_id[BAT_MAX_CPALS_MSISDN_ID_LEN]; /*<  6: 44> MSISDN identification as found on the SIM. If no MSISDN identification can be found on the SIM then the default strings 'Line 1', 'Data', 'Fax' and 'Line 2' will be applied. */
  U8                        _align1;                  /*< 50:  1> alignment                                          */
  U8                        _align2;                  /*< 51:  1> alignment                                          */
} T_BAT_res_set_percent_cpals_w;
#endif

#ifndef __T_BAT_res_set_plus_cpas__
#define __T_BAT_res_set_plus_cpas__
/*
 * The set response structure of the +CPAS command.
 * CCDGEN:WriteStruct_Count==2605
 */
typedef struct
{
  T_BAT_plus_cpas_pas       pas;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpas_pas Phone activity status */
} T_BAT_res_set_plus_cpas;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbf__
#define __T_BAT_cmd_set_plus_cpbf__
/*
 * The set command structure of the +CPBF command.
 * CCDGEN:WriteStruct_Count==2606
 */
typedef struct
{
  U8                        c_findtext;               /*<  0:  1> counter                                            */
  U8                        findtext[BAT_MAX_CPBF_FIND_TEXT_LEN]; /*<  1: 81> Search string                                      */
  U8                        _align0;                  /*< 82:  1> alignment                                          */
  U8                        _align1;                  /*< 83:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpbf;
#endif

#ifndef __T_BAT_res_set_plus_cpbf__
#define __T_BAT_res_set_plus_cpbf__
/*
 * The set response structure of the +CPBF command.
 * CCDGEN:WriteStruct_Count==2607
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Value in the range of location numbers of phonebook memory */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_CPBF_NUMBER_LEN]; /*<  2: 81> Phone number                                       */
  U8                        type;                     /*< 83:  1> Type of address                                    */
  U8                        c_text;                   /*< 84:  1> counter                                            */
  U8                        text[BAT_MAX_CPBF_TEXT_LEN]; /*< 85: 81> Text string associated with phone number           */
  U8                        _align0;                  /*<166:  1> alignment                                          */
  U8                        _align1;                  /*<167:  1> alignment                                          */
} T_BAT_res_set_plus_cpbf;
#endif

#ifndef __T_BAT_res_tst_plus_cpbf__
#define __T_BAT_res_tst_plus_cpbf__
/*
 * The test answer structure of the +CPBF command.
 * CCDGEN:WriteStruct_Count==2608
 */
typedef struct
{
  S16                       nlength;                  /*<  0:  2> Maximum length of phone number                     */
  S16                       tlength;                  /*<  2:  2> Maximum length of associated text                  */
} T_BAT_res_tst_plus_cpbf;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbf_w__
#define __T_BAT_cmd_set_plus_cpbf_w__
/*
 * The set command structure of the +CPBF_W command.
 * CCDGEN:WriteStruct_Count==2609
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        c_findtext;               /*<  1:  1> counter                                            */
  U16                       findtext[BAT_MAX_CPBF_FIND_TEXT_LEN]; /*<  2:162> Search string                                      */
} T_BAT_cmd_set_plus_cpbf_w;
#endif

#ifndef __T_BAT_res_set_plus_cpbf_w__
#define __T_BAT_res_set_plus_cpbf_w__
/*
 * The set response structure of the +CPBF_W command.
 * CCDGEN:WriteStruct_Count==2610
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Value in the range of location numbers of phonebook memory */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_CPBF_NUMBER_LEN]; /*<  2: 81> Phone number                                       */
  U8                        type;                     /*< 83:  1> Type of address                                    */
  U8                        _align0;                  /*< 84:  1> alignment                                          */
  U8                        c_text;                   /*< 85:  1> counter                                            */
  U16                       text[BAT_MAX_CPBF_TEXT_LEN]; /*< 86:162> Text string associated with phone number           */
} T_BAT_res_set_plus_cpbf_w;
#endif

#ifndef __T_BAT_res_tst_plus_cpbf_w__
#define __T_BAT_res_tst_plus_cpbf_w__
/*
 * The test answer structure of the +CPBF_W command.
 * CCDGEN:WriteStruct_Count==2611
 */
typedef struct
{
  S16                       nlength;                  /*<  0:  2> Maximum length of phone number                     */
  S16                       tlength;                  /*<  2:  2> Maximum length of associated text                  */
} T_BAT_res_tst_plus_cpbf_w;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbr__
#define __T_BAT_cmd_set_plus_cpbr__
/*
 * The set command structure of the +CPBR command.
 * CCDGEN:WriteStruct_Count==2612
 */
typedef struct
{
  U8                        index1;                   /*<  0:  1> Index of either the single entry to be read or lower bound of list to be read */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  S16                       index2;                   /*<  2:  2> Index of upper bound of list to be read            */
} T_BAT_cmd_set_plus_cpbr;
#endif

#ifndef __T_BAT_res_set_plus_cpbr__
#define __T_BAT_res_set_plus_cpbr__
/*
 * The set response structure of the +CPBR command.
 * CCDGEN:WriteStruct_Count==2613
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Value in the range of location numbers of phonebook memory */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_CPBR_NUMBER_LEN]; /*<  2: 81> Phone number                                       */
  U8                        type;                     /*< 83:  1> Type of address                                    */
  U8                        c_text;                   /*< 84:  1> counter                                            */
  U8                        text[BAT_MAX_CPBR_TEXT_LEN]; /*< 85: 81> Text string associated with phone number           */
  U8                        _align0;                  /*<166:  1> alignment                                          */
  U8                        _align1;                  /*<167:  1> alignment                                          */
} T_BAT_res_set_plus_cpbr;
#endif

#ifndef __T_BAT_res_tst_plus_cpbr__
#define __T_BAT_res_tst_plus_cpbr__
/*
 * The test answer structure of the +CPBR command.
 * CCDGEN:WriteStruct_Count==2614
 */
typedef struct
{
  U8                        index_f;                  /*<  0:  1> First supported index                              */
  U8                        index_l;                  /*<  1:  1> Last supported index                               */
  S16                       nlength;                  /*<  2:  2> Maximum length of phone number                     */
  S16                       tlength;                  /*<  4:  2> Maximum length of associated text                  */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_res_tst_plus_cpbr;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbr_w__
#define __T_BAT_cmd_set_plus_cpbr_w__
/*
 * The set command structure of the +CPBR_W command.
 * CCDGEN:WriteStruct_Count==2615
 */
typedef struct
{
  U8                        index1;                   /*<  0:  1> Index of either the single entry to be read or lower bound of list to be read */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  S16                       index2;                   /*<  2:  2> Index of upper bound of list to be read            */
} T_BAT_cmd_set_plus_cpbr_w;
#endif

#ifndef __T_BAT_res_set_plus_cpbr_w__
#define __T_BAT_res_set_plus_cpbr_w__
/*
 * The set response structure of the +CPBR_W command.
 * CCDGEN:WriteStruct_Count==2616
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Value in the range of location numbers of phonebook memory */
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[BAT_MAX_CPBR_NUMBER_LEN]; /*<  2: 81> Phone number                                       */
  U8                        type;                     /*< 83:  1> Type of address                                    */
  U8                        _align0;                  /*< 84:  1> alignment                                          */
  U8                        c_text;                   /*< 85:  1> counter                                            */
  U16                       text[BAT_MAX_CPBR_TEXT_LEN]; /*< 86:162> Text string associated with phone number           */
} T_BAT_res_set_plus_cpbr_w;
#endif

#ifndef __T_BAT_res_tst_plus_cpbr_w__
#define __T_BAT_res_tst_plus_cpbr_w__
/*
 * The test answer structure of the +CPBR_W command.
 * CCDGEN:WriteStruct_Count==2617
 */
typedef struct
{
  U8                        index_f;                  /*<  0:  1> First supported index                              */
  U8                        index_l;                  /*<  1:  1> Last supported index                               */
  S16                       nlength;                  /*<  2:  2> Maximum length of phone number                     */
  S16                       tlength;                  /*<  4:  2> Maximum length of associated text                  */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
} T_BAT_res_tst_plus_cpbr_w;
#endif

#ifndef __T_BAT_res_que_percent_cpbs__
#define __T_BAT_res_que_percent_cpbs__
/*
 * The query answer structure of the %CPBS command.
 * CCDGEN:WriteStruct_Count==2618
 */
typedef struct
{
  T_BAT_storage             storage;                  /*<  0:  4> (enum=32bit)<->T_BAT_storage Storage area          */
  S16                       used;                     /*<  4:  2> Number of used locations in selected memory        */
  S16                       total;                    /*<  6:  2> Total number of locations in selected memory       */
  S16                       first;                    /*<  8:  2> First free location in selected memory             */
  S16                       used_ext;                 /*< 10:  2> Number of used ext records for selected memory     */
  S16                       total_ext;                /*< 12:  2> Total number of ext records for selected memory    */
  U8                        _align0;                  /*< 14:  1> alignment                                          */
  U8                        _align1;                  /*< 15:  1> alignment                                          */
} T_BAT_res_que_percent_cpbs;
#endif

#ifndef __T_BAT_res_que_plus_cpbs__
#define __T_BAT_res_que_plus_cpbs__
/*
 * The query answer structure of the +CPBS command.
 * CCDGEN:WriteStruct_Count==2619
 */
typedef struct
{
  T_BAT_storage             storage;                  /*<  0:  4> (enum=32bit)<->T_BAT_storage Storage area          */
  S16                       used;                     /*<  4:  2> Number of used locations in selected memory        */
  S16                       total;                    /*<  6:  2> Total number of locations in selected memory       */
} T_BAT_res_que_plus_cpbs;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbs__
#define __T_BAT_cmd_set_plus_cpbs__
/*
 * The set command structure of the +CPBS command.
 * CCDGEN:WriteStruct_Count==2620
 */
typedef struct
{
  T_BAT_storage             storage;                  /*<  0:  4> (enum=32bit)<->T_BAT_storage Storage area          */
} T_BAT_cmd_set_plus_cpbs;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbw__
#define __T_BAT_cmd_set_plus_cpbw__
/*
 * The set command structure of the +CPBW command.
 * CCDGEN:WriteStruct_Count==2621
 */
typedef struct
{
  S16                       index;                    /*<  0:  2> Value in the range of location numbers of phonebook memory */
  U8                        v_number;                 /*<  2:  1> valid-flag                                         */
  U8                        c_number;                 /*<  3:  1> counter                                            */
  U8                        number[BAT_MAX_CPBW_NUMBER_LEN]; /*<  4: 81> Phone number                                       */
  U8                        _align0;                  /*< 85:  1> alignment                                          */
  S16                       type;                     /*< 86:  2> Type of address                                    */
  U8                        v_text;                   /*< 88:  1> valid-flag                                         */
  U8                        c_text;                   /*< 89:  1> counter                                            */
  U8                        text[BAT_MAX_CPBW_TEXT_LEN]; /*< 90: 81> Text string associated with phone number           */
  U8                        _align1;                  /*<171:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpbw;
#endif

#ifndef __T_BAT_res_tst_plus_cpbw__
#define __T_BAT_res_tst_plus_cpbw__
/*
 * The test answer structure of the +CPBW command.
 * CCDGEN:WriteStruct_Count==2622
 */
typedef struct
{
  U8                        index1;                   /*<  0:  1> lower bound                                        */
  U8                        index2;                   /*<  1:  1> upper bound                                        */
  S16                       nlength;                  /*<  2:  2> Maximum length of phone number                     */
  U8                        c_types;                  /*<  4:  1> counter                                            */
  U8                        types[BAT_MAX_CPBW_TYPES]; /*<  5:255> List of number types                               */
  S16                       tlength;                  /*<260:  2> Maximum length of associated text                  */
  U8                        _align0;                  /*<262:  1> alignment                                          */
  U8                        _align1;                  /*<263:  1> alignment                                          */
} T_BAT_res_tst_plus_cpbw;
#endif

#ifndef __T_BAT_cmd_set_plus_cpbw_w__
#define __T_BAT_cmd_set_plus_cpbw_w__
/*
 * The set command structure of the +CPBW_W command.
 * CCDGEN:WriteStruct_Count==2623
 */
typedef struct
{
  S16                       index;                    /*<  0:  2> Value in the range of location numbers of phonebook memory */
  U8                        v_number;                 /*<  2:  1> valid-flag                                         */
  U8                        c_number;                 /*<  3:  1> counter                                            */
  U8                        number[BAT_MAX_CPBW_NUMBER_LEN]; /*<  4: 81> Phone number                                       */
  U8                        _align0;                  /*< 85:  1> alignment                                          */
  S16                       type;                     /*< 86:  2> Type of address                                    */
  U8                        v_text;                   /*< 88:  1> valid-flag                                         */
  U8                        c_text;                   /*< 89:  1> counter                                            */
  U16                       text[BAT_MAX_CPBW_TEXT_LEN]; /*< 90:162> Text string associated with phone number           */
} T_BAT_cmd_set_plus_cpbw_w;
#endif

#ifndef __T_BAT_res_tst_plus_cpbw_w__
#define __T_BAT_res_tst_plus_cpbw_w__
/*
 * The test answer structure of the +CPBW_W command.
 * CCDGEN:WriteStruct_Count==2624
 */
typedef struct
{
  U8                        index1;                   /*<  0:  1> lower bound                                        */
  U8                        index2;                   /*<  1:  1> upper bound                                        */
  S16                       nlength;                  /*<  2:  2> Maximum length of phone number                     */
  U8                        c_types;                  /*<  4:  1> counter                                            */
  U8                        types[BAT_MAX_CPBW_TYPES]; /*<  5:255> List of number types                               */
  S16                       tlength;                  /*<260:  2> Maximum length of associated text                  */
  U8                        _align0;                  /*<262:  1> alignment                                          */
  U8                        _align1;                  /*<263:  1> alignment                                          */
} T_BAT_res_tst_plus_cpbw_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cpcfu__
#define __T_BAT_cmd_set_percent_cpcfu__
/*
 * The set command structure of the %CPCFU command.
 * CCDGEN:WriteStruct_Count==2625
 */
typedef struct
{
  T_BAT_percent_cpcfu_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpcfu_mode Operation to be performed by this command */
  T_BAT_percent_cpcfu_line  line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpcfu_line Line       */
} T_BAT_cmd_set_percent_cpcfu;
#endif

#ifndef __T_BAT_res_set_percent_cpcfu__
#define __T_BAT_res_set_percent_cpcfu__
/*
 * The set response structure of the %CPCFU command.
 * CCDGEN:WriteStruct_Count==2626
 */
typedef struct
{
  T_BAT_percent_cpcfu_status status;                  /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpcfu_status Status of Call Diverted flag */
  T_BAT_percent_cpcfu_line  line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpcfu_line Line       */
} T_BAT_res_set_percent_cpcfu;
#endif

#ifndef __T_BAT_res_que_percent_cphs__
#define __T_BAT_res_que_percent_cphs__
/*
 * The query answer structure of the %CPHS command.
 * CCDGEN:WriteStruct_Count==2627
 */
typedef struct
{
  T_BAT_percent_cphs_init_mode init_mode;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cphs_init_mode Operation to be performed by this command */
} T_BAT_res_que_percent_cphs;
#endif

#ifndef __T_BAT_cmd_set_percent_cphs__
#define __T_BAT_cmd_set_percent_cphs__
/*
 * The set command structure of the %CPHS command.
 * CCDGEN:WriteStruct_Count==2628
 */
typedef struct
{
  T_BAT_percent_cphs_init_mode init_mode;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cphs_init_mode Operation to be performed by this command */
} T_BAT_cmd_set_percent_cphs;
#endif

#ifndef __T_BAT_res_uns_percent_cpi__
#define __T_BAT_res_uns_percent_cpi__
/*
 * The unsolicited result code structure of the %CPI command.
 * CCDGEN:WriteStruct_Count==2629
 */
typedef struct
{
  U8                        cid;                      /*<  0:  1> Call identity, identifies the call in the call table */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_percent_cpi_msgtype msgtype;                  /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpi_msgtype Describes the layer 3 message type that was used to transfer the call progress information */
  T_BAT_percent_cpi_ibt     ibt;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_cpi_ibt Use of in-band tones */
  T_BAT_percent_cpi_tch     tch;                      /*< 12:  4> (enum=32bit)<->T_BAT_percent_cpi_tch Traffic channel indication */
  U8                        dir;                      /*< 16:  1> Direction of Call                                  */
  U8                        _align3;                  /*< 17:  1> alignment                                          */
  S16                       mode;                     /*< 18:  2> bearer/teleservice                                 */
  T_BAT_percent_cpi_prog_desc prog_desc;              /*< 20:  4> (enum=32bit)<->T_BAT_percent_cpi_prog_desc progress description */
  U8                        v_number;                 /*< 24:  1> valid-flag                                         */
  U8                        c_number;                 /*< 25:  1> counter                                            */
  U8                        number[BAT_MAX_CPI_NUMBER_LEN]; /*< 26: 39> number                                             */
  U8                        _align4;                  /*< 65:  1> alignment                                          */
  S16                       type;                     /*< 66:  2> Type of address                                    */
  U8                        v_alpha;                  /*< 68:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 69:  1> counter                                            */
  U8                        alpha[BAT_MAX_CPI_ALPHA_LEN]; /*< 70: 44> Alphanumeric representation of &lt;number&gt; corresponding to the entry found in phonebook */
  U8                        _align5;                  /*<114:  1> alignment                                          */
  U8                        _align6;                  /*<115:  1> alignment                                          */
  S32                       cause;                    /*<116:  4> GSM specific cause values for call control defined in 3GPP specification 04.08 annex H */
  S16                       line;                     /*<120:  2> used line                                          */
  U8                        _align7;                  /*<122:  1> alignment                                          */
  U8                        _align8;                  /*<123:  1> alignment                                          */
} T_BAT_res_uns_percent_cpi;
#endif

#ifndef __T_BAT_res_que_plus_cpin__
#define __T_BAT_res_que_plus_cpin__
/*
 * The query answer structure of the +CPIN command.
 * CCDGEN:WriteStruct_Count==2630
 */
typedef struct
{
  T_BAT_plus_cpin_code      code;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpin_code Indicates whether or not a password is required */
} T_BAT_res_que_plus_cpin;
#endif

#ifndef __T_BAT_cmd_set_plus_cpin__
#define __T_BAT_cmd_set_plus_cpin__
/*
 * The set command structure of the +CPIN command.
 * CCDGEN:WriteStruct_Count==2631
 */
typedef struct
{
  U8                        c_pin;                    /*<  0:  1> counter                                            */
  U8                        pin[BAT_MAX_CPIN_PIN_LEN]; /*<  1: 32> PIN                                                */
  U8                        v_newpin;                 /*< 33:  1> valid-flag                                         */
  U8                        c_newpin;                 /*< 34:  1> counter                                            */
  U8                        newpin[BAT_MAX_CPIN_PIN_LEN]; /*< 35: 32> New PIN (for when the PUK is being sent)           */
  U8                        _align0;                  /*< 67:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpin;
#endif

#ifndef __T_BAT_res_que_percent_cpinf__
#define __T_BAT_res_que_percent_cpinf__
/*
 * The query answer structure of the %CPINF command.
 * CCDGEN:WriteStruct_Count==2632
 */
typedef struct
{
  T_BAT_percent_cpinf_phase phase;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpinf_phase CPHS phase */
  U16                       sst;                      /*<  4:  2> CPHS service table                                 */
  U8                        c_csp;                    /*<  6:  1> counter                                            */
  U8                        csp[BAT_MAX_CPINF_CSP_LEN]; /*<  7: 45> Customer Service Proile c_csp=0 means not present  */
  U8                        c_csp2;                   /*< 52:  1> counter                                            */
  U8                        csp2[BAT_MAX_CPINF_CSP_LEN]; /*< 53: 45> Customer Service Proile c_csp2=0 means not present */
  U8                        _align0;                  /*< 98:  1> alignment                                          */
  U8                        _align1;                  /*< 99:  1> alignment                                          */
} T_BAT_res_que_percent_cpinf;
#endif

#ifndef __T_BAT_cmd_set_percent_cpinf__
#define __T_BAT_cmd_set_percent_cpinf__
/*
 * customer service profile
 * CCDGEN:WriteStruct_Count==2633
 */
typedef struct
{
  U8                        c_csp;                    /*<  0:  1> counter                                            */
  U8                        csp[BAT_MAX_CPINF_CSP_LEN]; /*<  1: 45> Customer Service Proile c_csp=0 means not present  */
  U8                        _align0;                  /*< 46:  1> alignment                                          */
  U8                        _align1;                  /*< 47:  1> alignment                                          */
} T_BAT_cmd_set_percent_cpinf;
#endif

#ifndef __T_BAT_res_uns_percent_cpi_w__
#define __T_BAT_res_uns_percent_cpi_w__
/*
 * The unsolicited result code structure of the %CPI_W command.
 * CCDGEN:WriteStruct_Count==2634
 */
typedef struct
{
  U8                        cid;                      /*<  0:  1> Call identity, identifies the call in the call table */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_percent_cpi_w_msgtype msgtype;                /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpi_w_msgtype Describes the layer 3 message type that was used to transfer the call progress information */
  T_BAT_percent_cpi_w_ibt   ibt;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_cpi_w_ibt Use of in-band tones */
  T_BAT_percent_cpi_w_tch   tch;                      /*< 12:  4> (enum=32bit)<->T_BAT_percent_cpi_w_tch Traffic channel indication */
  U8                        dir;                      /*< 16:  1> Direction of Call                                  */
  U8                        _align3;                  /*< 17:  1> alignment                                          */
  S16                       mode;                     /*< 18:  2> bearer/teleservice                                 */
  T_BAT_percent_cpi_w_prog_desc prog_desc;            /*< 20:  4> (enum=32bit)<->T_BAT_percent_cpi_w_prog_desc progress description */
  U8                        v_number;                 /*< 24:  1> valid-flag                                         */
  U8                        c_number;                 /*< 25:  1> counter                                            */
  U8                        number[BAT_MAX_CPI_NUMBER_LEN]; /*< 26: 39> number                                             */
  U8                        _align4;                  /*< 65:  1> alignment                                          */
  S16                       type;                     /*< 66:  2> Type of address                                    */
  U8                        v_alpha;                  /*< 68:  1> valid-flag                                         */
  U8                        c_alpha;                  /*< 69:  1> counter                                            */
  U16                       alpha[BAT_MAX_CPI_ALPHA_LEN]; /*< 70: 88> Alphanumeric representation of &lt;number&gt; corresponding to the entry found in phonebook */
  U8                        _align5;                  /*<158:  1> alignment                                          */
  U8                        _align6;                  /*<159:  1> alignment                                          */
  S32                       cause;                    /*<160:  4> GSM specific cause values for call control defined in 3GPP specification 04.08 annex H */
  S16                       line;                     /*<164:  2> used line                                          */
  U8                        _align7;                  /*<166:  1> alignment                                          */
  U8                        _align8;                  /*<167:  1> alignment                                          */
} T_BAT_res_uns_percent_cpi_w;
#endif

#ifndef __T_BAT_res_que_percent_cpmb__
#define __T_BAT_res_que_percent_cpmb__
/*
 * The query answer structure of the %CPMB command.
 * CCDGEN:WriteStruct_Count==2635
 */
typedef struct
{
  U8                        first;                    /*<  0:  1> First free location                                */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_que_percent_cpmb;
#endif

#ifndef __T_BAT_cmd_set_percent_cpmb__
#define __T_BAT_cmd_set_percent_cpmb__
/*
 * The set command structure of the %CPMB command.
 * CCDGEN:WriteStruct_Count==2636
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
} T_BAT_cmd_set_percent_cpmb;
#endif

#ifndef __T_BAT_res_set_percent_cpmb__
#define __T_BAT_res_set_percent_cpmb__
/*
 * The set response structure of the %CPMB command.
 * CCDGEN:WriteStruct_Count==2637
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
  T_BAT_percent_cpmb_line   line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpmb_line Line        */
  U8                        v_number;                 /*<  8:  1> valid-flag                                         */
  U8                        c_number;                 /*<  9:  1> counter                                            */
  U8                        number[BAT_MAX_CPMB_NUMBER_LEN]; /*< 10: 40> Mailbox number                                     */
  S16                       type;                     /*< 50:  2> Type of address                                    */
  U8                        v_alpha_id;               /*< 52:  1> valid-flag                                         */
  U8                        c_alpha_id;               /*< 53:  1> counter                                            */
  U8                        alpha_id[BAT_MAX_CPMB_ALPHA_ID_LEN]; /*< 54: 88> Alpha identifier related to mailbox                */
  U8                        _align0;                  /*<142:  1> alignment                                          */
  U8                        _align1;                  /*<143:  1> alignment                                          */
} T_BAT_res_set_percent_cpmb;
#endif

#ifndef __T_BAT_cmd_set_percent_cpmbw__
#define __T_BAT_cmd_set_percent_cpmbw__
/*
 * The set command structure of the %CPMBW command.
 * CCDGEN:WriteStruct_Count==2638
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
  U8                        v_number;                 /*<  4:  1> valid-flag                                         */
  U8                        c_number;                 /*<  5:  1> counter                                            */
  U8                        number[BAT_MAX_CPMBW_NUMBER_LEN]; /*<  6: 40> Mailbox number                                     */
  S16                       type;                     /*< 46:  2> Type of address                                    */
  U8                        v_text;                   /*< 48:  1> valid-flag                                         */
  U8                        c_text;                   /*< 49:  1> counter                                            */
  U8                        text[BAT_MAX_CPMBW_TEXT_LEN]; /*< 50: 88> Text related to mailbox                            */
  U8                        _align0;                  /*<138:  1> alignment                                          */
  U8                        _align1;                  /*<139:  1> alignment                                          */
} T_BAT_cmd_set_percent_cpmbw;
#endif

#ifndef __T_BAT_res_tst_percent_cpmbw__
#define __T_BAT_res_tst_percent_cpmbw__
/*
 * The test answer structure of the %CPMBW command.
 * CCDGEN:WriteStruct_Count==2639
 */
typedef struct
{
  U8                        min_rec_id;               /*<  0:  1> Min record id (1)                                  */
  U8                        max_rec_id;               /*<  1:  1> Max record id                                      */
  U8                        nlength;                  /*<  2:  1> Max length of the number                           */
  U8                        c_type_range;             /*<  3:  1> counter                                            */
  U8                        type_range[BAT_MAX_CPMBW_TYPE_LEN]; /*<  4:255> List of number types                               */
  U8                        tlength;                  /*<259:  1> Max length of the text                             */
} T_BAT_res_tst_percent_cpmbw;
#endif

#ifndef __T_BAT_cmd_set_percent_cpmbw_w__
#define __T_BAT_cmd_set_percent_cpmbw_w__
/*
 * The set command structure of the %CPMBW_W command.
 * CCDGEN:WriteStruct_Count==2640
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
  U8                        v_number;                 /*<  4:  1> valid-flag                                         */
  U8                        c_number;                 /*<  5:  1> counter                                            */
  U8                        number[BAT_MAX_CPMBW_NUMBER_LEN]; /*<  6: 40> Mailbox number                                     */
  S16                       type;                     /*< 46:  2> Type of address                                    */
  U8                        v_text;                   /*< 48:  1> valid-flag                                         */
  U8                        c_text;                   /*< 49:  1> counter                                            */
  U16                       text[BAT_MAX_CPMBW_TEXT_LEN]; /*< 50:176> Text related to mailbox                            */
  U8                        _align0;                  /*<226:  1> alignment                                          */
  U8                        _align1;                  /*<227:  1> alignment                                          */
} T_BAT_cmd_set_percent_cpmbw_w;
#endif

#ifndef __T_BAT_res_tst_percent_cpmbw_w__
#define __T_BAT_res_tst_percent_cpmbw_w__
/*
 * The test answer structure of the %CPMBW_W command.
 * CCDGEN:WriteStruct_Count==2641
 */
typedef struct
{
  U8                        min_rec_id;               /*<  0:  1> Min record id (1)                                  */
  U8                        max_rec_id;               /*<  1:  1> Max record id                                      */
  U8                        nlength;                  /*<  2:  1> Max length of the number                           */
  U8                        tlength;                  /*<  3:  1> Max length of the text                             */
} T_BAT_res_tst_percent_cpmbw_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cpmb_w__
#define __T_BAT_cmd_set_percent_cpmb_w__
/*
 * The set command structure of the %CPMB_W command.
 * CCDGEN:WriteStruct_Count==2642
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
} T_BAT_cmd_set_percent_cpmb_w;
#endif

#ifndef __T_BAT_res_set_percent_cpmb_w__
#define __T_BAT_res_set_percent_cpmb_w__
/*
 * The set response structure of the %CPMB_W command.
 * CCDGEN:WriteStruct_Count==2643
 */
typedef struct
{
  T_BAT_record_id           record_id;                /*<  0:  4> (enum=32bit)<->T_BAT_record_id SIM record id of CPHS mailbox */
  T_BAT_percent_cpmb_w_line line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpmb_w_line Line      */
  U8                        v_number;                 /*<  8:  1> valid-flag                                         */
  U8                        c_number;                 /*<  9:  1> counter                                            */
  U8                        number[BAT_MAX_CPMB_NUMBER_LEN]; /*< 10: 40> Mailbox number                                     */
  S16                       type;                     /*< 50:  2> Type of address                                    */
  U8                        v_alpha_id;               /*< 52:  1> valid-flag                                         */
  U8                        c_alpha_id;               /*< 53:  1> counter                                            */
  U16                       alpha_id[BAT_MAX_CPMB_ALPHA_ID_LEN]; /*< 54:176> Alpha identifier related to mailbox                */
  U8                        _align0;                  /*<230:  1> alignment                                          */
  U8                        _align1;                  /*<231:  1> alignment                                          */
} T_BAT_res_set_percent_cpmb_w;
#endif

#ifndef __T_BAT_res_que_plus_cpms__
#define __T_BAT_res_que_plus_cpms__
/*
 * The query answer structure of the +CPMS command.
 * CCDGEN:WriteStruct_Count==2644
 */
typedef struct
{
  T_BAT_plus_cpms_mem1      mem1;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpms_mem1 Memory from which messages are read and deleted */
  U8                        used1;                    /*<  4:  1> Number of messages currently in 'mem1'             */
  U8                        total1;                   /*<  5:  1> Total number of message locations in 'mem1'        */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
  T_BAT_plus_cpms_mem2      mem2;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_cpms_mem2 Memory to which writing and sending operations are made */
  U8                        used2;                    /*< 12:  1> Number of messages currently in 'mem2'             */
  U8                        total2;                   /*< 13:  1> Total number of message locations in 'mem2'        */
  U8                        _align2;                  /*< 14:  1> alignment                                          */
  U8                        _align3;                  /*< 15:  1> alignment                                          */
  T_BAT_plus_cpms_mem3      mem3;                     /*< 16:  4> (enum=32bit)<->T_BAT_plus_cpms_mem3 Memory to which received SMSs are preferred to be stored */
  U8                        used3;                    /*< 20:  1> Number of messages currently in 'mem3'             */
  U8                        total3;                   /*< 21:  1> Total number of message locations in 'mem3'        */
  U8                        _align4;                  /*< 22:  1> alignment                                          */
  U8                        _align5;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_cpms;
#endif

#ifndef __T_BAT_cmd_set_plus_cpms__
#define __T_BAT_cmd_set_plus_cpms__
/*
 * The set command structure of the +CPMS command.
 * CCDGEN:WriteStruct_Count==2645
 */
typedef struct
{
  T_BAT_plus_cpms_mem1      mem1;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpms_mem1 Memory from which messages are read and deleted */
  T_BAT_plus_cpms_mem2      mem2;                     /*<  4:  4> (enum=32bit)<->T_BAT_plus_cpms_mem2 Memory to which writing and sending operations are made */
  T_BAT_plus_cpms_mem3      mem3;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_cpms_mem3 Memory to which received SMSs are preferred to be stored */
} T_BAT_cmd_set_plus_cpms;
#endif

#ifndef __T_BAT_res_set_plus_cpms__
#define __T_BAT_res_set_plus_cpms__
/*
 * The set response structure of the +CPMS command.
 * CCDGEN:WriteStruct_Count==2646
 */
typedef struct
{
  T_BAT_plus_cpms_mem1      mem1;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpms_mem1 Memory from which messages are read and deleted */
  U8                        used1;                    /*<  4:  1> Number of messages currently in 'mem1'             */
  U8                        total1;                   /*<  5:  1> Total number of message locations in 'mem1'        */
  U8                        _align0;                  /*<  6:  1> alignment                                          */
  U8                        _align1;                  /*<  7:  1> alignment                                          */
  T_BAT_plus_cpms_mem2      mem2;                     /*<  8:  4> (enum=32bit)<->T_BAT_plus_cpms_mem2 Memory to which writing and sending operations are made */
  S16                       used2;                    /*< 12:  2> Number of messages currently in 'mem2'             */
  S16                       total2;                   /*< 14:  2> Total number of message locations in 'mem2'        */
  T_BAT_plus_cpms_mem3      mem3;                     /*< 16:  4> (enum=32bit)<->T_BAT_plus_cpms_mem3 Memory to which received SMSs are preferred to be stored */
  S16                       used3;                    /*< 20:  2> Number of messages currently in 'mem3'             */
  S16                       total3;                   /*< 22:  2> Total number of message locations in 'mem3'        */
} T_BAT_res_set_plus_cpms;
#endif

#ifndef __T_BAT_cmd_set_percent_cpnums__
#define __T_BAT_cmd_set_percent_cpnums__
/*
 * The set command structure of the %CPNUMS command.
 * CCDGEN:WriteStruct_Count==2647
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_percent_cpnums_mode mode;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpnums_mode Indicate whether exploring or querying */
} T_BAT_cmd_set_percent_cpnums;
#endif

#ifndef __T_BAT_res_set_percent_cpnums__
#define __T_BAT_res_set_percent_cpnums__
/*
 * The set response structure of the %CPNUMS command.
 * CCDGEN:WriteStruct_Count==2648
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        c_alpha_tag;              /*<  1:  1> counter                                            */
  U8                        alpha_tag[BAT_MAX_CPNUMS_ALPHA_TAG_LEN]; /*<  2: 80> Alpha tag of element                               */
  U8                        c_number;                 /*< 82:  1> counter                                            */
  U8                        number[BAT_MAX_CPNUMS_NUMBER_LEN]; /*< 83: 81> Telephone number of element (empty string if element is a folder) */
  U8                        index_level;              /*<164:  1> Index level of element                             */
  U8                        _align0;                  /*<165:  1> alignment                                          */
  U8                        _align1;                  /*<166:  1> alignment                                          */
  U8                        _align2;                  /*<167:  1> alignment                                          */
  T_BAT_percent_cpnums_premium_flag premium_flag;     /*<168:  4> (enum=32bit)<->T_BAT_percent_cpnums_premium_flag Premium flag of element */
  T_BAT_percent_cpnums_network_flag network_flag;     /*<172:  4> (enum=32bit)<->T_BAT_percent_cpnums_network_flag Network flag of element */
} T_BAT_res_set_percent_cpnums;
#endif

#ifndef __T_BAT_res_tst_percent_cpnums__
#define __T_BAT_res_tst_percent_cpnums__
/*
 * The test answer structure of the %CPNUMS command.
 * CCDGEN:WriteStruct_Count==2649
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        index_level;              /*<  1:  1> Index level of element                             */
  U8                        c_alpha_tag;              /*<  2:  1> counter                                            */
  U8                        alpha_tag[BAT_MAX_CPNUMS_ALPHA_TAG_LEN]; /*<  3: 80> Alpha tag of element                               */
  U8                        c_number;                 /*< 83:  1> counter                                            */
  U8                        number[BAT_MAX_CPNUMS_NUMBER_LEN]; /*< 84: 81> Telephone number of element (empty string if element is a folder) */
  U8                        _align0;                  /*<165:  1> alignment                                          */
  U8                        _align1;                  /*<166:  1> alignment                                          */
  U8                        _align2;                  /*<167:  1> alignment                                          */
  T_BAT_percent_cpnums_premium_flag premium_flag;     /*<168:  4> (enum=32bit)<->T_BAT_percent_cpnums_premium_flag Premium flag of element */
  T_BAT_percent_cpnums_network_flag network_flag;     /*<172:  4> (enum=32bit)<->T_BAT_percent_cpnums_network_flag Network flag of element */
} T_BAT_res_tst_percent_cpnums;
#endif

#ifndef __T_BAT_cmd_set_percent_cpnums_w__
#define __T_BAT_cmd_set_percent_cpnums_w__
/*
 * The set command structure of the %CPNUMS_W command.
 * CCDGEN:WriteStruct_Count==2650
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_percent_cpnums_w_mode mode;                   /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpnums_w_mode Indicate whether exploring or querying */
} T_BAT_cmd_set_percent_cpnums_w;
#endif

#ifndef __T_BAT_res_set_percent_cpnums_w__
#define __T_BAT_res_set_percent_cpnums_w__
/*
 * The set response structure of the %CPNUMS_W command.
 * CCDGEN:WriteStruct_Count==2651
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        c_alpha_tag;              /*<  1:  1> counter                                            */
  U16                       alpha_tag[BAT_MAX_CPNUMS_ALPHA_TAG_LEN]; /*<  2:160> Alpha tag of element                               */
  U8                        c_number;                 /*<162:  1> counter                                            */
  U8                        number[BAT_MAX_CPNUMS_NUMBER_LEN]; /*<163: 81> Telephone number of element (empty string if element is a folder) */
  U8                        index_level;              /*<244:  1> Index level of element                             */
  U8                        _align0;                  /*<245:  1> alignment                                          */
  U8                        _align1;                  /*<246:  1> alignment                                          */
  U8                        _align2;                  /*<247:  1> alignment                                          */
  T_BAT_percent_cpnums_w_premium_flag premium_flag;   /*<248:  4> (enum=32bit)<->T_BAT_percent_cpnums_w_premium_flag Premium flag of element */
  T_BAT_percent_cpnums_w_network_flag network_flag;   /*<252:  4> (enum=32bit)<->T_BAT_percent_cpnums_w_network_flag Network flag of element */
} T_BAT_res_set_percent_cpnums_w;
#endif

#ifndef __T_BAT_res_tst_percent_cpnums_w__
#define __T_BAT_res_tst_percent_cpnums_w__
/*
 * The test answer structure of the %CPNUMS_W command.
 * CCDGEN:WriteStruct_Count==2652
 */
typedef struct
{
  U8                        element_id;               /*<  0:  1> Element ID                                         */
  U8                        index_level;              /*<  1:  1> Index level of element                             */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        c_alpha_tag;              /*<  3:  1> counter                                            */
  U16                       alpha_tag[BAT_MAX_CPNUMS_ALPHA_TAG_LEN]; /*<  4:160> Alpha tag of element                               */
  U8                        c_number;                 /*<164:  1> counter                                            */
  U8                        number[BAT_MAX_CPNUMS_NUMBER_LEN]; /*<165: 81> Telephone number of element (empty string if element is a folder) */
  U8                        _align1;                  /*<246:  1> alignment                                          */
  U8                        _align2;                  /*<247:  1> alignment                                          */
  T_BAT_percent_cpnums_w_premium_flag premium_flag;   /*<248:  4> (enum=32bit)<->T_BAT_percent_cpnums_w_premium_flag Premium flag of element */
  T_BAT_percent_cpnums_w_network_flag network_flag;   /*<252:  4> (enum=32bit)<->T_BAT_percent_cpnums_w_network_flag Network flag of element */
} T_BAT_res_tst_percent_cpnums_w;
#endif

#ifndef __T_BAT_res_que_plus_cpol__
#define __T_BAT_res_que_plus_cpol__
/*
 * The query answer structure of the +CPOL command.
 * CCDGEN:WriteStruct_Count==2653
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Index to SIM preferred list of networks            */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cpol_format    format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cpol_format Format of 'oper' parameter */
  U8                        c_oper;                   /*<  8:  1> counter                                            */
  U8                        oper[BAT_MAX_CPOL_OPER_LEN]; /*<  9: 30> Network operator                                   */
  U8                        _align3;                  /*< 39:  1> alignment                                          */
} T_BAT_res_que_plus_cpol;
#endif

#ifndef __T_BAT_cmd_set_plus_cpol__
#define __T_BAT_cmd_set_plus_cpol__
/*
 * The set command structure of the +CPOL command.
 * CCDGEN:WriteStruct_Count==2654
 */
typedef struct
{
  S16                       index;                    /*<  0:  2> Index to SIM preferred list of networks            */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cpol_format    format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cpol_format Format of 'oper' parameter */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U8                        oper[BAT_MAX_CPOL_OPER_LEN]; /*< 10: 30> Network operator                                   */
} T_BAT_cmd_set_plus_cpol;
#endif

#ifndef __T_BAT_res_tst_plus_cpol__
#define __T_BAT_res_tst_plus_cpol__
/*
 * The test answer structure of the +CPOL command.
 * CCDGEN:WriteStruct_Count==2655
 */
typedef struct
{
  S16                       index1;                   /*<  0:  2> lower bound                                        */
  S16                       index2;                   /*<  2:  2> upper bound                                        */
} T_BAT_res_tst_plus_cpol;
#endif

#ifndef __T_BAT_res_que_plus_cpol_w__
#define __T_BAT_res_que_plus_cpol_w__
/*
 * The query answer structure of the +CPOL_W command.
 * CCDGEN:WriteStruct_Count==2656
 */
typedef struct
{
  U8                        index;                    /*<  0:  1> Index to SIM preferred list of networks            */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cpol_w_format  format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cpol_w_format Format of 'oper' parameter */
  U8                        _align3;                  /*<  8:  1> alignment                                          */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U16                       oper[BAT_MAX_CPOL_OPER_LEN]; /*< 10: 60> Network operator                                   */
  U8                        _align4;                  /*< 70:  1> alignment                                          */
  U8                        _align5;                  /*< 71:  1> alignment                                          */
} T_BAT_res_que_plus_cpol_w;
#endif

#ifndef __T_BAT_cmd_set_plus_cpol_w__
#define __T_BAT_cmd_set_plus_cpol_w__
/*
 * The set command structure of the +CPOL_W command.
 * CCDGEN:WriteStruct_Count==2657
 */
typedef struct
{
  S16                       index;                    /*<  0:  2> Index to SIM preferred list of networks            */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_cpol_w_format  format;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_cpol_w_format Format of 'oper' parameter */
  U8                        v_oper;                   /*<  8:  1> valid-flag                                         */
  U8                        c_oper;                   /*<  9:  1> counter                                            */
  U16                       oper[BAT_MAX_CPOL_OPER_LEN]; /*< 10: 60> Network operator                                   */
  U8                        _align2;                  /*< 70:  1> alignment                                          */
  U8                        _align3;                  /*< 71:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpol_w;
#endif

#ifndef __T_BAT_res_tst_plus_cpol_w__
#define __T_BAT_res_tst_plus_cpol_w__
/*
 * The test answer structure of the +CPOL_W command.
 * CCDGEN:WriteStruct_Count==2658
 */
typedef struct
{
  S16                       index1;                   /*<  0:  2> lower bound                                        */
  S16                       index2;                   /*<  2:  2> upper bound                                        */
} T_BAT_res_tst_plus_cpol_w;
#endif

#ifndef __T_BAT_res_que_percent_cpopn__
#define __T_BAT_res_que_percent_cpopn__
/*
 * The query answer structure of the %CPOPN command.
 * CCDGEN:WriteStruct_Count==2659
 */
typedef struct
{
  U8                        c_long_name;              /*<  0:  1> counter                                            */
  U8                        long_name[BAT_MAX_CPOPN_LONG_NAME_LEN]; /*<  1: 30> Long operator name                                 */
  U8                        v_short_name;             /*< 31:  1> valid-flag                                         */
  U8                        c_short_name;             /*< 32:  1> counter                                            */
  U8                        short_name[BAT_MAX_CPOPN_SHORT_NAME_LEN]; /*< 33: 10> Short operator name                                */
  U8                        _align0;                  /*< 43:  1> alignment                                          */
} T_BAT_res_que_percent_cpopn;
#endif

#ifndef __T_BAT_res_uns_percent_cpri__
#define __T_BAT_res_uns_percent_cpri__
/*
 * The unsolicited result code structure of the %CPRI command.
 * CCDGEN:WriteStruct_Count==2660
 */
typedef struct
{
  T_BAT_percent_cpri_gsm_ciph gsm_ciph;               /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpri_gsm_ciph GSM cipher mode */
  T_BAT_percent_cpri_gprs_ciph gprs_ciph;             /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpri_gprs_ciph GPRS cipher mode */
} T_BAT_res_uns_percent_cpri;
#endif

#ifndef __T_BAT_res_uns_percent_cproam__
#define __T_BAT_res_uns_percent_cproam__
/*
 * The unsolicited result code structure of the %CPROAM command.
 * CCDGEN:WriteStruct_Count==2661
 */
typedef struct
{
  T_BAT_percent_cproam_roam_status roam_status;       /*<  0:  4> (enum=32bit)<->T_BAT_percent_cproam_roam_status Whether in roaming state or not */
} T_BAT_res_uns_percent_cproam;
#endif

#ifndef __T_BAT_res_que_percent_cprsm__
#define __T_BAT_res_que_percent_cprsm__
/*
 * The query answer structure of the %CPRSM command.
 * CCDGEN:WriteStruct_Count==2662
 */
typedef struct
{
  T_BAT_percent_cprsm_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cprsm_mode Whether to pause or resume */
} T_BAT_res_que_percent_cprsm;
#endif

#ifndef __T_BAT_cmd_set_percent_cprsm__
#define __T_BAT_cmd_set_percent_cprsm__
/*
 * The set command structure of the %CPRSM command.
 * CCDGEN:WriteStruct_Count==2663
 */
typedef struct
{
  T_BAT_percent_cprsm_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cprsm_mode Whether to pause or resume */
} T_BAT_cmd_set_percent_cprsm;
#endif

#ifndef __T_BAT_res_que_plus_cpuc__
#define __T_BAT_res_que_plus_cpuc__
/*
 * The query answer structure of the +CPUC command.
 * CCDGEN:WriteStruct_Count==2664
 */
typedef struct
{
  U8                        c_currency;               /*<  0:  1> counter                                            */
  U8                        currency[BAT_MAX_CPUC_CURRENCY_LEN]; /*<  1:  3> Currency                                           */
  U8                        c_ppu;                    /*<  4:  1> counter                                            */
  U8                        ppu[BAT_MAX_CPUC_PPU_LEN]; /*<  5: 20> Price per unit                                     */
  U8                        _align0;                  /*< 25:  1> alignment                                          */
  U8                        _align1;                  /*< 26:  1> alignment                                          */
  U8                        _align2;                  /*< 27:  1> alignment                                          */
} T_BAT_res_que_plus_cpuc;
#endif

#ifndef __T_BAT_cmd_set_plus_cpuc__
#define __T_BAT_cmd_set_plus_cpuc__
/*
 * The set command structure of the +CPUC command.
 * CCDGEN:WriteStruct_Count==2665
 */
typedef struct
{
  U8                        c_currency;               /*<  0:  1> counter                                            */
  U8                        currency[BAT_MAX_CPUC_CURRENCY_LEN]; /*<  1:  3> Currency                                           */
  U8                        c_ppu;                    /*<  4:  1> counter                                            */
  U8                        ppu[BAT_MAX_CPUC_PPU_LEN]; /*<  5: 20> Price per unit                                     */
  U8                        v_passwd;                 /*< 25:  1> valid-flag                                         */
  U8                        c_passwd;                 /*< 26:  1> counter                                            */
  U8                        passwd[BAT_MAX_CPUC_PASSWD_LEN]; /*< 27:  8> Password                                           */
  U8                        _align0;                  /*< 35:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpuc;
#endif

#ifndef __T_BAT_res_que_plus_cpuc_w__
#define __T_BAT_res_que_plus_cpuc_w__
/*
 * The query answer structure of the +CPUC_W command.
 * CCDGEN:WriteStruct_Count==2666
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        c_currency;               /*<  1:  1> counter                                            */
  U16                       currency[BAT_MAX_CPUC_CURRENCY_LEN]; /*<  2:  6> Currency                                           */
  U8                        c_ppu;                    /*<  8:  1> counter                                            */
  U8                        ppu[BAT_MAX_CPUC_PPU_LEN]; /*<  9: 20> Price per unit                                     */
  U8                        _align1;                  /*< 29:  1> alignment                                          */
  U8                        _align2;                  /*< 30:  1> alignment                                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
} T_BAT_res_que_plus_cpuc_w;
#endif

#ifndef __T_BAT_cmd_set_plus_cpuc_w__
#define __T_BAT_cmd_set_plus_cpuc_w__
/*
 * The set command structure of the +CPUC_W command.
 * CCDGEN:WriteStruct_Count==2667
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        c_currency;               /*<  1:  1> counter                                            */
  U16                       currency[BAT_MAX_CPUC_CURRENCY_LEN]; /*<  2:  6> Currency                                           */
  U8                        c_ppu;                    /*<  8:  1> counter                                            */
  U8                        ppu[BAT_MAX_CPUC_PPU_LEN]; /*<  9: 20> Price per unit                                     */
  U8                        v_passwd;                 /*< 29:  1> valid-flag                                         */
  U8                        c_passwd;                 /*< 30:  1> counter                                            */
  U8                        passwd[BAT_MAX_CPUC_PASSWD_LEN]; /*< 31:  8> Password                                           */
  U8                        _align1;                  /*< 39:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpuc_w;
#endif

#ifndef __T_BAT_cmd_set_percent_cpvwi__
#define __T_BAT_cmd_set_percent_cpvwi__
/*
 * The set command structure of the %CPVWI command.
 * CCDGEN:WriteStruct_Count==2668
 */
typedef struct
{
  T_BAT_percent_cpvwi_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpvwi_mode Indicate set or clear operation */
  T_BAT_percent_cpvwi_lines lines;                    /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpvwi_lines Lines (bit field) */
} T_BAT_cmd_set_percent_cpvwi;
#endif

#ifndef __T_BAT_res_set_percent_cpvwi__
#define __T_BAT_res_set_percent_cpvwi__
/*
 * The set response structure of the %CPVWI command.
 * CCDGEN:WriteStruct_Count==2669
 */
typedef struct
{
  T_BAT_percent_cpvwi_status status;                  /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpvwi_status Flag status */
  T_BAT_percent_cpvwi_lines line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpvwi_lines Lines (bit field) */
} T_BAT_res_set_percent_cpvwi;
#endif

#ifndef __T_BAT_res_uns_percent_cpvwi__
#define __T_BAT_res_uns_percent_cpvwi__
/*
 * The unsolicited result code structure of the %CPVWI command.
 * CCDGEN:WriteStruct_Count==2670
 */
typedef struct
{
  T_BAT_percent_cpvwi_status status;                  /*<  0:  4> (enum=32bit)<->T_BAT_percent_cpvwi_status Flag status */
  T_BAT_percent_cpvwi_lines line;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_cpvwi_lines Lines (bit field) */
} T_BAT_res_uns_percent_cpvwi;
#endif

#ifndef __T_BAT_cmd_set_plus_cpwd__
#define __T_BAT_cmd_set_plus_cpwd__
/*
 * The set command structure of the +CPWD command.
 * CCDGEN:WriteStruct_Count==2671
 */
typedef struct
{
  T_BAT_plus_cpwd_fac       fac;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_cpwd_fac ME or network facility */
  U8                        c_oldpwd;                 /*<  4:  1> counter                                            */
  U8                        oldpwd[BAT_MAX_CPWD_PWD_LEN]; /*<  5: 32> Old password for ME or network facility            */
  U8                        c_newpwd;                 /*< 37:  1> counter                                            */
  U8                        newpwd[BAT_MAX_CPWD_PWD_LEN]; /*< 38: 32> New password for ME or network facility            */
  U8                        _align0;                  /*< 70:  1> alignment                                          */
  U8                        _align1;                  /*< 71:  1> alignment                                          */
} T_BAT_cmd_set_plus_cpwd;
#endif

#ifndef __T_BAT_res_uns_plus_cr__
#define __T_BAT_res_uns_plus_cr__
/*
 * The unsolicited result code structure of the +CR command.
 * CCDGEN:WriteStruct_Count==2672
 */
typedef struct
{
  U8                        c_serv;                   /*<  0:  1> counter                                            */
  U8                        serv[BAT_MAX_CR_SERV_LEN]; /*<  1:  9> service                                            */
  U8                        _align0;                  /*< 10:  1> alignment                                          */
  U8                        _align1;                  /*< 11:  1> alignment                                          */
} T_BAT_res_uns_plus_cr;
#endif

#ifndef __T_BAT_res_que_percent_creg__
#define __T_BAT_res_que_percent_creg__
/*
 * The query answer structure of the %CREG command.
 * CCDGEN:WriteStruct_Count==2673
 */
typedef struct
{
  T_BAT_percent_creg_stat   stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_creg_stat Registration status */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
  T_BAT_percent_creg_gprs_ind gprs_ind;               /*< 12:  4> (enum=32bit)<->T_BAT_percent_creg_gprs_ind GPRS Indicator */
  T_BAT_percent_creg_rt     rt;                       /*< 16:  4> (enum=32bit)<->T_BAT_percent_creg_rt Radio Access Technology */
} T_BAT_res_que_percent_creg;
#endif

#ifndef __T_BAT_res_uns_percent_creg__
#define __T_BAT_res_uns_percent_creg__
/*
 * The unsolicited result code structure of the %CREG command.
 * CCDGEN:WriteStruct_Count==2674
 */
typedef struct
{
  T_BAT_percent_creg_stat   stat;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_creg_stat Registration status */
  S32                       lac;                      /*<  4:  4> Location area code                                 */
  S32                       ci;                       /*<  8:  4> Cell id                                            */
  T_BAT_percent_creg_gprs_ind gprs_ind;               /*< 12:  4> (enum=32bit)<->T_BAT_percent_creg_gprs_ind GPRS Indicator */
  T_BAT_percent_creg_rt     rt;                       /*< 16:  4> (enum=32bit)<->T_BAT_percent_creg_rt Radio Access Technology */
} T_BAT_res_uns_percent_creg;
#endif

#ifndef __T_BAT_cmd_set_plus_cres__
#define __T_BAT_cmd_set_plus_cres__
/*
 * The set command structure of the +CRES command.
 * CCDGEN:WriteStruct_Count==2675
 */
typedef struct
{
  U8                        profile;                  /*<  0:  1> Profile number from where settings are to be restored */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_cres;
#endif

#ifndef __T_BAT_res_tst_plus_cres__
#define __T_BAT_res_tst_plus_cres__
/*
 * The test answer structure of the +CRES command.
 * CCDGEN:WriteStruct_Count==2676
 */
typedef struct
{
  U8                        max;                      /*<  0:  1> Maximum value of profile number                    */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_tst_plus_cres;
#endif

#ifndef __T_BAT_res_uns_plus_cring__
#define __T_BAT_res_uns_plus_cring__
/*
 * The unsolicited result code structure of the +CRING command.
 * CCDGEN:WriteStruct_Count==2677
 */
typedef struct
{
  T_BAT_cring_type          type1;                    /*<  0:  4> (enum=32bit)<->T_BAT_cring_type Type of first teleservice */
  T_BAT_plus_cring_type2    type2;                    /*<  4:  4> (enum=32bit)<->T_BAT_plus_cring_type2 Type of second teleservice */
  T_BAT_plus_cring_alt      alt;                      /*<  8:  4> (enum=32bit)<->T_BAT_plus_cring_alt Alternating call signalling indicator */
  T_BAT_pdp_type            pdp_type;                 /*< 12:  4> (enum=32bit)<->T_BAT_pdp_type Specifies the type of packet data protocol */
  U8                        v_pdp_addr;               /*< 16:  1> valid-flag                                         */
  U8                        c_pdp_addr;               /*< 17:  1> counter                                            */
  U8                        pdp_addr[BAT_MAX_PDP_ADD]; /*< 18: 16> PDP address                                        */
  U8                        v_l2p;                    /*< 34:  1> valid-flag                                         */
  U8                        l2p[BAT_MAX_L2P_LENGTH];  /*< 35:  6> layer 2 protocol string                            */
  U8                        _align0;                  /*< 41:  1> alignment                                          */
  U8                        _align1;                  /*< 42:  1> alignment                                          */
  U8                        _align2;                  /*< 43:  1> alignment                                          */
} T_BAT_res_uns_plus_cring;
#endif

#ifndef __T_BAT_res_que_plus_crlp__
#define __T_BAT_res_que_plus_crlp__
/*
 * The query answer structure of the +CRLP command.
 * CCDGEN:WriteStruct_Count==2678
 */
typedef struct
{
  U16                       iws;                      /*<  0:  2> IWS to MS window size                              */
  U16                       mws;                      /*<  2:  2> MS to IWF window size                              */
  U16                       t1;                       /*<  4:  2> Acknowledge timer                                  */
  U16                       n2;                       /*<  6:  2> Retransmission attempts                            */
} T_BAT_res_que_plus_crlp;
#endif

#ifndef __T_BAT_cmd_set_plus_crlp__
#define __T_BAT_cmd_set_plus_crlp__
/*
 * The set command structure of the +CRLP command.
 * CCDGEN:WriteStruct_Count==2679
 */
typedef struct
{
  S32                       iws;                      /*<  0:  4> IWS to MS window size                              */
  S32                       mws;                      /*<  4:  4> MS to IWF window size                              */
  S32                       t1;                       /*<  8:  4> Acknowledge timer                                  */
  S32                       n2;                       /*< 12:  4> Retransmission attempts                            */
} T_BAT_cmd_set_plus_crlp;
#endif

#ifndef __T_BAT_cmd_set_plus_crsm__
#define __T_BAT_cmd_set_plus_crsm__
/*
 * The set command structure of the +CRSM command.
 * CCDGEN:WriteStruct_Count==2680
 */
typedef struct
{
  T_BAT_plus_crsm_command   command;                  /*<  0:  4> (enum=32bit)<->T_BAT_plus_crsm_command SIM access command */
  S32                       fileid;                   /*<  4:  4> File identifier                                    */
  S16                       p1;                       /*<  8:  2> Command parameter p1                               */
  S16                       p2;                       /*< 10:  2> Command parameter p2                               */
  S16                       p3;                       /*< 12:  2> Command parameter p3                               */
  U8                        c_data;                   /*< 14:  1> counter                                            */
  U8                        data[BAT_MAX_CRSM_DATA_LEN]; /*< 15:255> Data to be written to SIM  c_data=0 means not present */
  U8                        _align0;                  /*<270:  1> alignment                                          */
  U8                        _align1;                  /*<271:  1> alignment                                          */
} T_BAT_cmd_set_plus_crsm;
#endif

#ifndef __T_BAT_res_set_plus_crsm__
#define __T_BAT_res_set_plus_crsm__
/*
 * The set response structure of the +CRSM command.
 * CCDGEN:WriteStruct_Count==2681
 */
typedef struct
{
  U8                        sw1;                      /*<  0:  1> SIM result code 1                                  */
  U8                        sw2;                      /*<  1:  1> SIM result code 2                                  */
  U16                       c_response;               /*<  2:  2> counter                                            */
  U8                        response[BAT_MAX_CRSM_RESPONSE_LEN]; /*<  4:256> Response data  c_response=0 means not present      */
} T_BAT_res_set_plus_crsm;
#endif

#ifndef __T_BAT_cmd_set_plus_csas__
#define __T_BAT_cmd_set_plus_csas__
/*
 * The set command structure of the +CSAS command.
 * CCDGEN:WriteStruct_Count==2682
 */
typedef struct
{
  S16                       profile;                  /*<  0:  2> Profile number where settings are to be stored     */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_csas;
#endif

#ifndef __T_BAT_res_tst_plus_csas__
#define __T_BAT_res_tst_plus_csas__
/*
 * The test answer structure of the +CSAS command.
 * CCDGEN:WriteStruct_Count==2683
 */
typedef struct
{
  U8                        max;                      /*<  0:  1> Maximum value of profile number (min value = 0)    */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_tst_plus_csas;
#endif

#ifndef __T_BAT_res_que_plus_csca__
#define __T_BAT_res_que_plus_csca__
/*
 * The query answer structure of the +CSCA command.
 * CCDGEN:WriteStruct_Count==2684
 */
typedef struct
{
  U8                        c_sca;                    /*<  0:  1> counter                                            */
  U8                        sca[BAT_MAX_CSCA_SMS_ADDR_LEN]; /*<  1: 20> Service centre address                             */
  U8                        tosca;                    /*< 21:  1> Type of number                                     */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_csca;
#endif

#ifndef __T_BAT_cmd_set_plus_csca__
#define __T_BAT_cmd_set_plus_csca__
/*
 * The set command structure of the +CSCA command.
 * CCDGEN:WriteStruct_Count==2685
 */
typedef struct
{
  U8                        c_sca;                    /*<  0:  1> counter                                            */
  U8                        sca[BAT_MAX_CSCA_SMS_ADDR_LEN]; /*<  1: 20> Service centre address                             */
  U8                        _align0;                  /*< 21:  1> alignment                                          */
  S16                       tosca;                    /*< 22:  2> Type of number                                     */
} T_BAT_cmd_set_plus_csca;
#endif

#ifndef __T_BAT_res_que_plus_cscb__
#define __T_BAT_res_que_plus_cscb__
/*
 * The query answer structure of the +CSCB command.
 * CCDGEN:WriteStruct_Count==2686
 */
typedef struct
{
  T_BAT_plus_cscb_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cscb_mode Whether the message types specified are to be accepted or not */
  U8                        v_mids;                   /*<  4:  1> valid-flag                                         */
  U8                        c_mids;                   /*<  5:  1> counter                                            */
  U16                       mids[BAT_MAX_IDENTS];     /*<  6: 40> Possible combinations of CBM message identifiers   */
  U8                        v_dcss;                   /*< 46:  1> valid-flag                                         */
  U8                        c_dcss;                   /*< 47:  1> counter                                            */
  U8                        dcss[BAT_MAX_IDENTS];     /*< 48: 20> Possible combinations of CBM data coding schemes   */
} T_BAT_res_que_plus_cscb;
#endif

#ifndef __T_BAT_cmd_set_plus_cscb__
#define __T_BAT_cmd_set_plus_cscb__
/*
 * The set command structure of the +CSCB command.
 * CCDGEN:WriteStruct_Count==2687
 */
typedef struct
{
  T_BAT_plus_cscb_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_cscb_mode Whether the message types specified are to be accepted or not */
  U8                        v_mids;                   /*<  4:  1> valid-flag                                         */
  U8                        c_mids;                   /*<  5:  1> counter                                            */
  U16                       mids[BAT_MAX_IDENTS];     /*<  6: 40> Possible combinations of CBM message identifiers   */
  U8                        v_dcss;                   /*< 46:  1> valid-flag                                         */
  U8                        c_dcss;                   /*< 47:  1> counter                                            */
  U8                        dcss[BAT_MAX_IDENTS];     /*< 48: 20> Possible combinations of CBM data coding schemes   */
} T_BAT_cmd_set_plus_cscb;
#endif

#ifndef __T_BAT_res_que_plus_cscs__
#define __T_BAT_res_que_plus_cscs__
/*
 * The query answer structure of the +CSCS command.
 * CCDGEN:WriteStruct_Count==2688
 */
typedef struct
{
  T_BAT_plus_cscs_cs        cs;                       /*<  0:  4> (enum=32bit)<->T_BAT_plus_cscs_cs Character Set    */
} T_BAT_res_que_plus_cscs;
#endif

#ifndef __T_BAT_cmd_set_plus_cscs__
#define __T_BAT_cmd_set_plus_cscs__
/*
 * The set command structure of the +CSCS command.
 * CCDGEN:WriteStruct_Count==2689
 */
typedef struct
{
  T_BAT_plus_cscs_cs        cs;                       /*<  0:  4> (enum=32bit)<->T_BAT_plus_cscs_cs Character Set    */
} T_BAT_cmd_set_plus_cscs;
#endif

#ifndef __T_BAT_cmd_set_plus_csim__
#define __T_BAT_cmd_set_plus_csim__
/*
 * The set command structure of the +CSIM command.
 * CCDGEN:WriteStruct_Count==2690
 */
typedef struct
{
  U16                       c_command;                /*<  0:  2> counter                                            */
  U8                        command[BAT_MAX_CSIM_CMD_LEN]; /*<  2:260> Command passed to the SIM                          */
  U8                        _align0;                  /*<262:  1> alignment                                          */
  U8                        _align1;                  /*<263:  1> alignment                                          */
} T_BAT_cmd_set_plus_csim;
#endif

#ifndef __T_BAT_res_set_plus_csim__
#define __T_BAT_res_set_plus_csim__
/*
 * The set response structure of the +CSIM command.
 * CCDGEN:WriteStruct_Count==2691
 */
typedef struct
{
  U16                       c_response;               /*<  0:  2> counter                                            */
  U8                        response[BAT_MAX_CSIM_RESP_LEN]; /*<  2:258> Response from the SIM                              */
} T_BAT_res_set_plus_csim;
#endif

#ifndef __T_BAT_res_que_plus_csms__
#define __T_BAT_res_que_plus_csms__
/*
 * The query answer structure of the +CSMS command.
 * CCDGEN:WriteStruct_Count==2692
 */
typedef struct
{
  T_BAT_plus_csms_service   service;                  /*<  0:  4> (enum=32bit)<->T_BAT_plus_csms_service Message service */
  T_BAT_plus_csms_mt        mt;                       /*<  4:  4> (enum=32bit)<->T_BAT_plus_csms_mt Support of mobile terminated messages */
  T_BAT_plus_csms_mo        mo;                       /*<  8:  4> (enum=32bit)<->T_BAT_plus_csms_mo Support of mobile originated messages */
  T_BAT_plus_csms_bm        bm;                       /*< 12:  4> (enum=32bit)<->T_BAT_plus_csms_bm Support of broadcast type messages */
} T_BAT_res_que_plus_csms;
#endif

#ifndef __T_BAT_cmd_set_plus_csms__
#define __T_BAT_cmd_set_plus_csms__
/*
 * The set command structure of the +CSMS command.
 * CCDGEN:WriteStruct_Count==2693
 */
typedef struct
{
  T_BAT_plus_csms_service   service;                  /*<  0:  4> (enum=32bit)<->T_BAT_plus_csms_service Message service */
} T_BAT_cmd_set_plus_csms;
#endif

#ifndef __T_BAT_res_que_plus_csns__
#define __T_BAT_res_que_plus_csns__
/*
 * The query answer structure of the +CSNS command.
 * CCDGEN:WriteStruct_Count==2694
 */
typedef struct
{
  T_BAT_plus_csns_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_csns_mode Bearer or teleservice to be used with single numbering scheme */
} T_BAT_res_que_plus_csns;
#endif

#ifndef __T_BAT_cmd_set_plus_csns__
#define __T_BAT_cmd_set_plus_csns__
/*
 * The set command structure of the +CSNS command.
 * CCDGEN:WriteStruct_Count==2695
 */
typedef struct
{
  T_BAT_plus_csns_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_csns_mode Bearer or teleservice to be used with single numbering scheme */
} T_BAT_cmd_set_plus_csns;
#endif

#ifndef __T_BAT_cmd_set_percent_csq__
#define __T_BAT_cmd_set_percent_csq__
/*
 * Structure for %CSQ set command
 * CCDGEN:WriteStruct_Count==2696
 */
typedef struct
{
  T_BAT_percent_csq_mode    csq_mode;                 /*<  0:  4> (enum=32bit)<->T_BAT_percent_csq_mode Element for %CSQ command */
} T_BAT_cmd_set_percent_csq;
#endif

#ifndef __T_BAT_res_set_percent_csq__
#define __T_BAT_res_set_percent_csq__
/*
 * Structure for response of set command
 * CCDGEN:WriteStruct_Count==2697
 */
typedef struct
{
  T_BAT_percent_csq_mode    csq_mode;                 /*<  0:  4> (enum=32bit)<->T_BAT_percent_csq_mode Element for %CSQ command */
} T_BAT_res_set_percent_csq;
#endif

#ifndef __T_BAT_res_que_percent_csq__
#define __T_BAT_res_que_percent_csq__
/*
 * The query answer structure of the %CSQ command.
 * CCDGEN:WriteStruct_Count==2698
 */
typedef struct
{
  U8                        rssi;                     /*<  0:  1> A signal strength which could be mapped to dbm     */
  U8                        ber;                      /*<  1:  1> Bit error rate                                     */
  U8                        actlevel;                 /*<  2:  1> Actual signal level                                */
// ELEM-FF: FF_PS_RSSI 
  U8                        min_access_level;         /*<  3:  1> minimum access level                               */
} T_BAT_res_que_percent_csq;
#endif

#ifndef __T_BAT_res_uns_percent_csq__
#define __T_BAT_res_uns_percent_csq__
/*
 * The unsolicited result code structure of the %CSQ command.
 * CCDGEN:WriteStruct_Count==2699
 */
typedef struct
{
  S16                       rssi;                     /*<  0:  2> A signal strength which could be mapped to dbm     */
  S16                       ber;                      /*<  2:  2> Bit error rate                                     */
  S16                       actlevel;                 /*<  4:  2> Actual signal level                                */
// ELEM-FF: FF_PS_RSSI 
  S16                       min_access_level;         /*<  6:  2> Minimum access level                               */
} T_BAT_res_uns_percent_csq;
#endif

#ifndef __T_BAT_res_set_plus_csq__
#define __T_BAT_res_set_plus_csq__
/*
 * The set response structure of the +CSQ command.
 * CCDGEN:WriteStruct_Count==2700
 */
typedef struct
{
  U8                        rssi;                     /*<  0:  1> Received Signal Strength Indication                */
  U8                        ber;                      /*<  1:  1> Channel Bit Error Rate (in percent)                */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_res_set_plus_csq;
#endif

#ifndef __T_BAT_res_uns_plus_cssi__
#define __T_BAT_res_uns_plus_cssi__
/*
 * The unsolicited result code structure of the +CSSI command.
 * CCDGEN:WriteStruct_Count==2701
 */
typedef struct
{
  T_BAT_plus_cssi_code1     code1;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cssi_code1 code1         */
  S32                       index;                    /*<  4:  4> index                                              */
} T_BAT_res_uns_plus_cssi;
#endif

#ifndef __T_BAT_res_uns_percent_cssn__
#define __T_BAT_res_uns_percent_cssn__
/*
 * The unsolicited result code structure of the %CSSN command.
 * CCDGEN:WriteStruct_Count==2702
 */
typedef struct
{
  T_BAT_percent_cssn_direction direction;             /*<  0:  4> (enum=32bit)<->T_BAT_percent_cssn_direction Direction */
  T_BAT_percent_cssn_trans_type trans_type;           /*<  4:  4> (enum=32bit)<->T_BAT_percent_cssn_trans_type Part of message */
  U8                        c_facility;               /*<  8:  1> counter                                            */
  U8                        facility[BAT_MAX_CSSN_FACILITY_LEN]; /*<  9:251> Facility IE string                                 */
} T_BAT_res_uns_percent_cssn;
#endif

#ifndef __T_BAT_res_uns_plus_cssu__
#define __T_BAT_res_uns_plus_cssu__
/*
 * The unsolicited result code structure of the +CSSU command.
 * CCDGEN:WriteStruct_Count==2703
 */
typedef struct
{
  T_BAT_plus_cssu_code2     code2;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_cssu_code2 code2         */
  S32                       index;                    /*<  4:  4> index                                              */
  U8                        v_number;                 /*<  8:  1> valid-flag                                         */
  U8                        c_number;                 /*<  9:  1> counter                                            */
  U8                        number[BAT_MAX_CSSU_NUMBER_LEN]; /*< 10: 39> number                                             */
  U8                        _align0;                  /*< 49:  1> alignment                                          */
  S16                       type;                     /*< 50:  2> Type of address                                    */
  U8                        v_subaddr;                /*< 52:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 53:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 54: 20> Subaddress                                         */
  S16                       satype;                   /*< 74:  2> Type of subaddress                                 */
} T_BAT_res_uns_plus_cssu;
#endif

#ifndef __T_BAT_res_que_plus_csta__
#define __T_BAT_res_que_plus_csta__
/*
 * The query answer structure of the +CSTA command.
 * CCDGEN:WriteStruct_Count==2704
 */
typedef struct
{
  U8                        type;                     /*<  0:  1> Type of address                                    */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_que_plus_csta;
#endif

#ifndef __T_BAT_cmd_set_plus_csta__
#define __T_BAT_cmd_set_plus_csta__
/*
 * The set command structure of the +CSTA command.
 * CCDGEN:WriteStruct_Count==2705
 */
typedef struct
{
  S16                       type;                     /*<  0:  2> Type of address                                    */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_csta;
#endif

#ifndef __T_BAT_res_uns_percent_cstat__
#define __T_BAT_res_uns_percent_cstat__
/*
 * The unsolicited result code structure of the %CSTAT command.
 * CCDGEN:WriteStruct_Count==2706
 */
typedef struct
{
  T_BAT_percent_cstat_entity_id entity_id;            /*<  0:  4> (enum=32bit)<->T_BAT_percent_cstat_entity_id Entity ID */
  T_BAT_percent_cstat_status status;                  /*<  4:  4> (enum=32bit)<->T_BAT_percent_cstat_status Entity state */
} T_BAT_res_uns_percent_cstat;
#endif

#ifndef __T_BAT_res_que_plus_csvm__
#define __T_BAT_res_que_plus_csvm__
/*
 * The query answer structure of the +CSVM command.
 * CCDGEN:WriteStruct_Count==2707
 */
typedef struct
{
  T_BAT_plus_csvm_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_csvm_mode Mode to enable or disable the voice mail number */
  U8                        c_number;                 /*<  4:  1> counter                                            */
  U8                        number[BAT_MAX_CSVM_NUMBER_LEN]; /*<  5: 81> Phone number                                       */
  U8                        type;                     /*< 86:  1> Type of address                                    */
  U8                        _align0;                  /*< 87:  1> alignment                                          */
} T_BAT_res_que_plus_csvm;
#endif

#ifndef __T_BAT_cmd_set_plus_csvm__
#define __T_BAT_cmd_set_plus_csvm__
/*
 * The set command structure of the +CSVM command.
 * CCDGEN:WriteStruct_Count==2708
 */
typedef struct
{
  T_BAT_plus_csvm_mode      mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_csvm_mode Mode to enable or disable the voice mail number */
  U8                        v_number;                 /*<  4:  1> valid-flag                                         */
  U8                        c_number;                 /*<  5:  1> counter                                            */
  U8                        number[BAT_MAX_CSVM_NUMBER_LEN]; /*<  6: 81> Phone number                                       */
  U8                        _align0;                  /*< 87:  1> alignment                                          */
  S16                       type;                     /*< 88:  2> Type of address                                    */
  U8                        _align1;                  /*< 90:  1> alignment                                          */
  U8                        _align2;                  /*< 91:  1> alignment                                          */
} T_BAT_cmd_set_plus_csvm;
#endif

#ifndef __T_BAT_cmd_set_plus_ctfr__
#define __T_BAT_cmd_set_plus_ctfr__
/*
 * The set command structure of the +CTFR command.
 * CCDGEN:WriteStruct_Count==2709
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_CTFR_NUMBER_LEN]; /*<  1: 81> Forwarding address                                 */
  S16                       type;                     /*< 82:  2> Type of address                                    */
  U8                        v_subaddr;                /*< 84:  1> valid-flag                                         */
  U8                        c_subaddr;                /*< 85:  1> counter                                            */
  U8                        subaddr[BAT_MAX_SUBADDR_LENGTH]; /*< 86: 20> Subaddress                                         */
  S16                       satype;                   /*<106:  2> Type of subaddress                                 */
} T_BAT_cmd_set_plus_ctfr;
#endif

#ifndef __T_BAT_res_que_percent_ctty__
#define __T_BAT_res_que_percent_ctty__
/*
 * The query answer structure of the %CTTY command.
 * CCDGEN:WriteStruct_Count==2710
 */
typedef struct
{
  T_BAT_percent_ctty_req    req;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ctty_req How TTY handles an incoming call */
  T_BAT_percent_ctty_m      m;                        /*<  4:  4> (enum=32bit)<->T_BAT_percent_ctty_m actual state of the TTY Service */
  T_BAT_trx                 trx;                      /*<  8:  4> (enum=32bit)<->T_BAT_trx TTY activity              */
} T_BAT_res_que_percent_ctty;
#endif

#ifndef __T_BAT_cmd_set_percent_ctty__
#define __T_BAT_cmd_set_percent_ctty__
/*
 * The set command structure of the %CTTY command.
 * CCDGEN:WriteStruct_Count==2711
 */
typedef struct
{
  T_BAT_percent_ctty_req    req;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ctty_req How TTY handles an incoming call */
} T_BAT_cmd_set_percent_ctty;
#endif

#ifndef __T_BAT_res_uns_percent_ctyi__
#define __T_BAT_res_uns_percent_ctyi__
/*
 * The unsolicited result code structure of the %CTYI command.
 * CCDGEN:WriteStruct_Count==2712
 */
typedef struct
{
  T_BAT_percent_ctyi_neg    neg;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_ctyi_neg State of TTY service negotiation for the current call */
  T_BAT_trx                 trx;                      /*<  4:  4> (enum=32bit)<->T_BAT_trx TTY activity              */
} T_BAT_res_uns_percent_ctyi;
#endif

#ifndef __T_BAT_res_uns_plus_ctzr__
#define __T_BAT_res_uns_plus_ctzr__
/*
 * The unsolicited result code structure of the +CTZR command.
 * CCDGEN:WriteStruct_Count==2713
 */
typedef struct
{
  S8                        tz;                       /*<  0:  1> Timezone                                           */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_uns_plus_ctzr;
#endif

#ifndef __T_BAT_res_que_plus_ctzu__
#define __T_BAT_res_que_plus_ctzu__
/*
 * The query answer structure of the +CTZU command.
 * CCDGEN:WriteStruct_Count==2714
 */
typedef struct
{
  T_BAT_plus_ctzu_onoff     onoff;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_ctzu_onoff Enable/Disable command */
} T_BAT_res_que_plus_ctzu;
#endif

#ifndef __T_BAT_cmd_set_plus_ctzu__
#define __T_BAT_cmd_set_plus_ctzu__
/*
 * The set command structure of the +CTZU command.
 * CCDGEN:WriteStruct_Count==2715
 */
typedef struct
{
  T_BAT_plus_ctzu_onoff     onoff;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_ctzu_onoff Enable/Disable command */
} T_BAT_cmd_set_plus_ctzu;
#endif

#ifndef __T_BAT_res_uns_percent_ctzv__
#define __T_BAT_res_uns_percent_ctzv__
/*
 * The unsolicited result code structure of the %CTZV command.
 * CCDGEN:WriteStruct_Count==2716
 */
typedef struct
{
  U8                        v_long_oper;              /*<  0:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  1:  1> counter                                            */
  U8                        long_oper[BAT_MAX_CTZV_LONG_OPER]; /*<  2: 30> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 32:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 33:  1> counter                                            */
  U8                        short_oper[BAT_MAX_CTZV_SHORT_OPER]; /*< 34: 10> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 44:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 45:  1> counter                                            */
  U8                        num_oper[BAT_MAX_CTZV_NUM_OPER_LEN]; /*< 46:  7> Operator name in numeric format                    */
  U8                        add_ci;                   /*< 53:  1> add country initials                               */
  U8                        year;                     /*< 54:  1> year                                               */
  U8                        month;                    /*< 55:  1> month                                              */
  U8                        day;                      /*< 56:  1> day                                                */
  U8                        hour;                     /*< 57:  1> hour                                               */
  U8                        minutes;                  /*< 58:  1> minutes                                            */
  U8                        seconds;                  /*< 59:  1> seconds                                            */
  S8                        time_zone;                /*< 60:  1> time zone                                          */
  U8                        _align0;                  /*< 61:  1> alignment                                          */
  U8                        _align1;                  /*< 62:  1> alignment                                          */
  U8                        _align2;                  /*< 63:  1> alignment                                          */
} T_BAT_res_uns_percent_ctzv;
#endif

#ifndef __T_BAT_res_uns_plus_ctzv__
#define __T_BAT_res_uns_plus_ctzv__
/*
 * The unsolicited result code structure of the +CTZV command.
 * CCDGEN:WriteStruct_Count==2717
 */
typedef struct
{
  S8                        tz;                       /*<  0:  1> tz                                                 */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_uns_plus_ctzv;
#endif

#ifndef __T_BAT_res_uns_percent_ctzv_w__
#define __T_BAT_res_uns_percent_ctzv_w__
/*
 * The unsolicited result code structure of the %CTZV_W command.
 * CCDGEN:WriteStruct_Count==2718
 */
typedef struct
{
  U8                        v_long_oper;              /*<  0:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  1:  1> counter                                            */
  U16                       long_oper[BAT_MAX_CTZV_LONG_OPER]; /*<  2: 60> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 62:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 63:  1> counter                                            */
  U16                       short_oper[BAT_MAX_CTZV_SHORT_OPER]; /*< 64: 20> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 84:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 85:  1> counter                                            */
  U8                        num_oper[BAT_MAX_CTZV_NUM_OPER_LEN]; /*< 86:  7> Operator name in numeric format                    */
  U8                        add_ci;                   /*< 93:  1> add country initials                               */
  U8                        year;                     /*< 94:  1> year                                               */
  U8                        month;                    /*< 95:  1> month                                              */
  U8                        day;                      /*< 96:  1> day                                                */
  U8                        hour;                     /*< 97:  1> hour                                               */
  U8                        minutes;                  /*< 98:  1> minutes                                            */
  U8                        seconds;                  /*< 99:  1> seconds                                            */
  S8                        time_zone;                /*<100:  1> time zone                                          */
  U8                        _align0;                  /*<101:  1> alignment                                          */
  U8                        _align1;                  /*<102:  1> alignment                                          */
  U8                        _align2;                  /*<103:  1> alignment                                          */
} T_BAT_res_uns_percent_ctzv_w;
#endif

#ifndef __T_BAT_cmd_set_plus_cusd__
#define __T_BAT_cmd_set_plus_cusd__
/*
 * The set command structure of the +CUSD command.
 * CCDGEN:WriteStruct_Count==2719
 */
typedef struct
{
  T_BAT_plus_cusd_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cusd_n Control           */
  U8                        v_str;                    /*<  4:  1> valid-flag                                         */
  U8                        c_str;                    /*<  5:  1> counter                                            */
  U8                        str[BAT_MAX_USSD_LEN];    /*<  6:182> USSD string                                        */
  S16                       dcs;                      /*<188:  2> Data coding scheme (3GPP TS 23.038)                */
  U8                        _align0;                  /*<190:  1> alignment                                          */
  U8                        _align1;                  /*<191:  1> alignment                                          */
} T_BAT_cmd_set_plus_cusd;
#endif

#ifndef __T_BAT_res_uns_plus_cusd__
#define __T_BAT_res_uns_plus_cusd__
/*
 * The unsolicited result code structure of the +CUSD command.
 * CCDGEN:WriteStruct_Count==2720
 */
typedef struct
{
  T_BAT_plus_cusd_m         m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cusd_m USSD result       */
  U8                        v_str;                    /*<  4:  1> valid-flag                                         */
  U8                        c_str;                    /*<  5:  1> counter                                            */
  U8                        str[BAT_MAX_USSD_LEN];    /*<  6:182> USSD string                                        */
  S16                       dcs;                      /*<188:  2> Data coding scheme (3GPP TS 23.038)                */
  U8                        _align0;                  /*<190:  1> alignment                                          */
  U8                        _align1;                  /*<191:  1> alignment                                          */
} T_BAT_res_uns_plus_cusd;
#endif

#ifndef __T_BAT_cmd_set_plus_cusd_w__
#define __T_BAT_cmd_set_plus_cusd_w__
/*
 * The set command structure of the +CUSD_W command.
 * CCDGEN:WriteStruct_Count==2721
 */
typedef struct
{
  T_BAT_plus_cusd_w_n       n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cusd_w_n Control         */
  U8                        v_str;                    /*<  4:  1> valid-flag                                         */
  U8                        c_str;                    /*<  5:  1> counter                                            */
  U16                       str[BAT_MAX_CUSD_USSD_STR_LEN]; /*<  6:364> USSD string                                        */
  S16                       dcs;                      /*<370:  2> Data coding scheme (3GPP TS 23.038)                */
} T_BAT_cmd_set_plus_cusd_w;
#endif

#ifndef __T_BAT_res_uns_plus_cusd_w__
#define __T_BAT_res_uns_plus_cusd_w__
/*
 * The unsolicited result code structure of the +CUSD_W command.
 * CCDGEN:WriteStruct_Count==2722
 */
typedef struct
{
  T_BAT_plus_cusd_w_m       m;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_cusd_w_m USSD result     */
  U8                        v_str;                    /*<  4:  1> valid-flag                                         */
  U8                        c_str;                    /*<  5:  1> counter                                            */
  U16                       str[BAT_MAX_CUSD_USSD_STR_LEN]; /*<  6:364> USSD string                                        */
  S16                       dcs;                      /*<370:  2> Data coding scheme (3GPP TS 23.038)                */
} T_BAT_res_uns_plus_cusd_w;
#endif

#ifndef __T_BAT_res_que_percent_cust__
#define __T_BAT_res_que_percent_cust__
/*
 * The query answer structure of the %CUST command.
 * CCDGEN:WriteStruct_Count==2723
 */
typedef struct
{
  T_BAT_percent_cust_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cust_mode Customisation mode */
} T_BAT_res_que_percent_cust;
#endif

#ifndef __T_BAT_cmd_set_percent_cust__
#define __T_BAT_cmd_set_percent_cust__
/*
 * The set command structure of the %CUST command.
 * CCDGEN:WriteStruct_Count==2724
 */
typedef struct
{
  T_BAT_percent_cust_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cust_mode Customisation mode */
} T_BAT_cmd_set_percent_cust;
#endif

#ifndef __T_BAT_cmd_set_percent_cwup__
#define __T_BAT_cmd_set_percent_cwup__
/*
 * The set command structure of the %CWUP command.
 * CCDGEN:WriteStruct_Count==2725
 */
typedef struct
{
  T_BAT_percent_cwup_type   type;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cwup_type Part to wake up */
} T_BAT_cmd_set_percent_cwup;
#endif

#ifndef __T_BAT_cmd_at_d__
#define __T_BAT_cmd_at_d__
/*
 * The set command structure of the D command.
 * CCDGEN:WriteStruct_Count==2726
 */
typedef struct
{
  U8                        c_dial_string;            /*<  0:  1> counter                                            */
  U8                        dial_string[BAT_MAX_D_DIAL_LEN]; /*<  1:183> Dial string                                        */
} T_BAT_cmd_at_d;
#endif

#ifndef __T_BAT_res_que_percent_data__
#define __T_BAT_res_que_percent_data__
/*
 * The query answer structure of the %DATA command.
 * CCDGEN:WriteStruct_Count==2727
 */
typedef struct
{
  T_BAT_percent_data_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_data_mode DTI Redirection mode */
  T_BAT_dev_name            des_dev_name;             /*<  4:  4> (enum=32bit)<->T_BAT_dev_name device name          */
  U32                       des_devId;                /*<  8:  4> Destination Device Identifier                      */
  U8                        des_sub_no;               /*< 12:  1> Destination sub device number (e.g. will be used for devices which are multiplexed) */
  U8                        _align0;                  /*< 13:  1> alignment                                          */
  U8                        _align1;                  /*< 14:  1> alignment                                          */
  U8                        _align2;                  /*< 15:  1> alignment                                          */
  T_BAT_capability          capability;               /*< 16:  4> (enum=32bit)<->T_BAT_capability Capability of device */
  T_BAT_dev_name            src_dev_name;             /*< 20:  4> (enum=32bit)<->T_BAT_dev_name device name          */
  U32                       src_devId;                /*< 24:  4> Source Device Identifier                           */
  U8                        src_sub_no;               /*< 28:  1> Source sub device number (e.g. will be used for devices which are multiplexed) */
  U8                        _align3;                  /*< 29:  1> alignment                                          */
  U8                        _align4;                  /*< 30:  1> alignment                                          */
  U8                        _align5;                  /*< 31:  1> alignment                                          */
  T_BAT_pdp_cid             cid;                      /*< 32:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_res_que_percent_data;
#endif

#ifndef __T_BAT_cmd_set_percent_data__
#define __T_BAT_cmd_set_percent_data__
/*
 * The set command structure of the %DATA command.
 * CCDGEN:WriteStruct_Count==2728
 */
typedef struct
{
  T_BAT_percent_data_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_data_mode DTI Redirection mode */
  T_BAT_dev_name            des_dev_name;             /*<  4:  4> (enum=32bit)<->T_BAT_dev_name device name          */
  U32                       des_devId;                /*<  8:  4> Destination device identifier                      */
  S16                       des_sub_no;               /*< 12:  2> Destination sub device number (e.g. will be used for devices which are multiplexed) */
  U8                        _align0;                  /*< 14:  1> alignment                                          */
  U8                        _align1;                  /*< 15:  1> alignment                                          */
  T_BAT_capability          capability;               /*< 16:  4> (enum=32bit)<->T_BAT_capability Capability of device */
  T_BAT_dev_name            src_dev_name;             /*< 20:  4> (enum=32bit)<->T_BAT_dev_name device name          */
  U32                       src_devId;                /*< 24:  4> Source device identifier                           */
  S16                       src_sub_no;               /*< 28:  2> Source sub device number (e.g. will be used for devices which are multiplexed) */
  U8                        _align2;                  /*< 30:  1> alignment                                          */
  U8                        _align3;                  /*< 31:  1> alignment                                          */
  T_BAT_pdp_cid             cid;                      /*< 32:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
} T_BAT_cmd_set_percent_data;
#endif

#ifndef __T_BAT_cmd_set_percent_dinf__
#define __T_BAT_cmd_set_percent_dinf__
/*
 * The set command structure of the %DINF command.
 * CCDGEN:WriteStruct_Count==2729
 */
typedef struct
{
  T_BAT_percent_dinf_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_dinf_mode Kind of information */
} T_BAT_cmd_set_percent_dinf;
#endif

#ifndef __T_BAT_res_set_percent_dinf__
#define __T_BAT_res_set_percent_dinf__
/*
 * The set response structure of the %DINF command.
 * CCDGEN:WriteStruct_Count==2730
 */
typedef struct
{
  T_BAT_dev_name            dev_name;                 /*<  0:  4> (enum=32bit)<->T_BAT_dev_name device name          */
  U32                       dev_Id;                   /*<  4:  4> Device number                                      */
  U8                        sub_no;                   /*<  8:  1> Sub device number (e.g. will be used for devices which are multiplexed) */
  U8                        _align0;                  /*<  9:  1> alignment                                          */
  U8                        _align1;                  /*< 10:  1> alignment                                          */
  U8                        _align2;                  /*< 11:  1> alignment                                          */
  T_BAT_capability          cap;                      /*< 12:  4> (enum=32bit)<->T_BAT_capability Capability of device */
  U8                        src_id;                   /*< 16:  1> AT command source                                  */
  U8                        _align3;                  /*< 17:  1> alignment                                          */
  U8                        _align4;                  /*< 18:  1> alignment                                          */
  U8                        _align5;                  /*< 19:  1> alignment                                          */
  T_BAT_capability          cur_cap;                  /*< 20:  4> (enum=32bit)<->T_BAT_capability Capability of device */
} T_BAT_res_set_percent_dinf;
#endif

#ifndef __T_BAT_res_que_plus_ds__
#define __T_BAT_res_que_plus_ds__
/*
 * The query answer structure of the +DS command.
 * CCDGEN:WriteStruct_Count==2731
 */
typedef struct
{
  T_BAT_plus_ds_dir         dir;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_ds_dir Desired direction of data compression */
  T_BAT_plus_ds_neg         neg;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_ds_neg Compression negotiation */
  S32                       p1;                       /*<  8:  4> Maximum number of dictionary entries               */
  S16                       p2;                       /*< 12:  2> Maximum string length                              */
  U8                        _align0;                  /*< 14:  1> alignment                                          */
  U8                        _align1;                  /*< 15:  1> alignment                                          */
} T_BAT_res_que_plus_ds;
#endif

#ifndef __T_BAT_cmd_set_plus_ds__
#define __T_BAT_cmd_set_plus_ds__
/*
 * The set command structure of the +DS command.
 * CCDGEN:WriteStruct_Count==2732
 */
typedef struct
{
  T_BAT_plus_ds_dir         dir;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_ds_dir Desired direction of data compression */
  T_BAT_plus_ds_neg         neg;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_ds_neg Compression negotiation */
  S32                       p1;                       /*<  8:  4> Maximum number of dictionary entries               */
  S16                       p2;                       /*< 12:  2> Maximum string length                              */
  U8                        _align0;                  /*< 14:  1> alignment                                          */
  U8                        _align1;                  /*< 15:  1> alignment                                          */
} T_BAT_cmd_set_plus_ds;
#endif

#ifndef __T_BAT_cmd_at_d_w__
#define __T_BAT_cmd_at_d_w__
/*
 * The set command structure of the D_W command.
 * CCDGEN:WriteStruct_Count==2733
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        c_dial_string;            /*<  1:  1> counter                                            */
  U16                       dial_string[BAT_MAX_D_DIAL_LEN]; /*<  2:366> Dial string                                        */
} T_BAT_cmd_at_d_w;
#endif


// STRUCT-FF: TI_PS_FF_AT_CMD_P_ECC 
#ifndef __T_BAT_cmd_set_percent_ecc__
#define __T_BAT_cmd_set_percent_ecc__
/*
 * The set command structure of %ECC command
 * CCDGEN:WriteStruct_Count==2734
 */
typedef struct
{
// ELEM-FF: TI_PS_FF_AT_CMD_P_ECC 
  U8                        index;                    /*<  0:  1> Value of index varies from 0-7                     */
// ELEM-FF: TI_PS_FF_AT_CMD_P_ECC 
  U8                        c_number;                 /*<  1:  1> counter                                            */
  U8                        number[3];                /*<  2:  3> ECC number example 123                             */
  U8                        _align0;                  /*<  5:  1> alignment                                          */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_cmd_set_percent_ecc;
#endif

#ifndef __T_BAT_cmd_set_percent_efrslt__
#define __T_BAT_cmd_set_percent_efrslt__
/*
 * The set command structure of the %EFRSLT command.
 * CCDGEN:WriteStruct_Count==2735
 */
typedef struct
{
  T_BAT_percent_efrslt_result result;                 /*<  0:  4> (enum=32bit)<->T_BAT_percent_efrslt_result Result of update */
} T_BAT_cmd_set_percent_efrslt;
#endif

#ifndef __T_BAT_cmd_set_percent_simef__
#define __T_BAT_cmd_set_percent_simef__
/*
 * The set command structure of the %SIMEF command.
 * CCDGEN:WriteStruct_Count==2736
 */
typedef struct
{
  T_BAT_percent_simef_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_simef_mode Update Indication */
} T_BAT_cmd_set_percent_simef;
#endif

#ifndef __T_BAT_cmd_set_percent_em__
#define __T_BAT_cmd_set_percent_em__
/*
 * The set command structure of the %EM command.
 * CCDGEN:WriteStruct_Count==2737
 */
typedef struct
{
  T_BAT_percent_em_mode     mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_em_mode Reporting mode */
  T_BAT_percent_em_sin_type sin_type;                 /*<  4:  4> (enum=32bit)<->T_BAT_percent_em_sin_type Type of information (mode=SIN) */
  T_BAT_percent_em_pco_type pco_type;                 /*<  8:  4> (enum=32bit)<->T_BAT_percent_em_pco_type Type of information (mode=PCO, bitmap) */
} T_BAT_cmd_set_percent_em;
#endif

#ifndef __T_BAT_res_plus_ext_error__
#define __T_BAT_res_plus_ext_error__
/*
 * The result code structure of the +EXT_ERROR command.
 * CCDGEN:WriteStruct_Count==2738
 */
typedef struct
{
  T_BAT_plus_ext_error_err  err;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_ext_error_err Error code */
} T_BAT_res_plus_ext_error;
#endif

#ifndef __T_BAT_res_que_plus_fap__
#define __T_BAT_res_que_plus_fap__
/*
 * The query answer structure of the +FAP command.
 * CCDGEN:WriteStruct_Count==2739
 */
typedef struct
{
  T_BAT_plus_fap_sub        sub;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_fap_sub sub              */
  T_BAT_plus_fap_sep        sep;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_fap_sep sep              */
  T_BAT_plus_fap_pwd        pwd;                      /*<  8:  4> (enum=32bit)<->T_BAT_plus_fap_pwd pwd              */
} T_BAT_res_que_plus_fap;
#endif

#ifndef __T_BAT_cmd_set_plus_fap__
#define __T_BAT_cmd_set_plus_fap__
/*
 * The set command structure of the +FAP command.
 * CCDGEN:WriteStruct_Count==2740
 */
typedef struct
{
  T_BAT_plus_fap_sub        sub;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_fap_sub sub              */
  T_BAT_plus_fap_sep        sep;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_fap_sep sep              */
  T_BAT_plus_fap_pwd        pwd;                      /*<  8:  4> (enum=32bit)<->T_BAT_plus_fap_pwd pwd              */
} T_BAT_cmd_set_plus_fap;
#endif

#ifndef __T_BAT_res_que_plus_fbo__
#define __T_BAT_res_que_plus_fbo__
/*
 * The query answer structure of the +FBO command.
 * CCDGEN:WriteStruct_Count==2741
 */
typedef struct
{
  T_BAT_plus_fbo_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fbo_value value          */
} T_BAT_res_que_plus_fbo;
#endif

#ifndef __T_BAT_cmd_set_plus_fbo__
#define __T_BAT_cmd_set_plus_fbo__
/*
 * The set command structure of the +FBO command.
 * CCDGEN:WriteStruct_Count==2742
 */
typedef struct
{
  T_BAT_plus_fbo_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fbo_value value          */
} T_BAT_cmd_set_plus_fbo;
#endif

#ifndef __T_BAT_res_que_plus_fbs__
#define __T_BAT_res_que_plus_fbs__
/*
 * The query answer structure of the +FBS command.
 * CCDGEN:WriteStruct_Count==2743
 */
typedef struct
{
  U16                       tbs;                      /*<  0:  2> transmit buffer size                               */
  U16                       rbs;                      /*<  2:  2> receive buffer size                                */
} T_BAT_res_que_plus_fbs;
#endif

#ifndef __T_BAT_res_que_plus_fbu__
#define __T_BAT_res_que_plus_fbu__
/*
 * The query answer structure of the +FBU command.
 * CCDGEN:WriteStruct_Count==2744
 */
typedef struct
{
  T_BAT_plus_fbu_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fbu_value value          */
} T_BAT_res_que_plus_fbu;
#endif

#ifndef __T_BAT_cmd_set_plus_fbu__
#define __T_BAT_cmd_set_plus_fbu__
/*
 * The set command structure of the +FBU command.
 * CCDGEN:WriteStruct_Count==2745
 */
typedef struct
{
  T_BAT_plus_fbu_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fbu_value value          */
} T_BAT_cmd_set_plus_fbu;
#endif

#ifndef __T_BAT_res_que_plus_fcc__
#define __T_BAT_res_que_plus_fcc__
/*
 * The query answer structure of the +FCC command.
 * CCDGEN:WriteStruct_Count==2746
 */
typedef struct
{
  T_BAT_fax_vr              vr;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_vr Resolution             */
  T_BAT_fax_br              br;                       /*<  4:  4> (enum=32bit)<->T_BAT_fax_br Bit rate               */
  T_BAT_fax_wd              wd;                       /*<  8:  4> (enum=32bit)<->T_BAT_fax_wd Page width in pixels   */
  T_BAT_fax_ln              ln;                       /*< 12:  4> (enum=32bit)<->T_BAT_fax_ln Page length            */
  T_BAT_fax_df              df;                       /*< 16:  4> (enum=32bit)<->T_BAT_fax_df Data compression format */
  T_BAT_fax_ec              ec;                       /*< 20:  4> (enum=32bit)<->T_BAT_fax_ec Error correction       */
  T_BAT_fax_bf              bf;                       /*< 24:  4> (enum=32bit)<->T_BAT_fax_bf File transfer          */
  T_BAT_fax_st              st;                       /*< 28:  4> (enum=32bit)<->T_BAT_fax_st Scan time/line         */
  T_BAT_fax_jp              jp;                       /*< 32:  4> (enum=32bit)<->T_BAT_fax_jp JPEG for colour and B&W */
} T_BAT_res_que_plus_fcc;
#endif

#ifndef __T_BAT_cmd_set_plus_fcc__
#define __T_BAT_cmd_set_plus_fcc__
/*
 * The set command structure of the +FCC command.
 * CCDGEN:WriteStruct_Count==2747
 */
typedef struct
{
  T_BAT_fax_vr              vr;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_vr Resolution             */
  T_BAT_fax_br              br;                       /*<  4:  4> (enum=32bit)<->T_BAT_fax_br Bit rate               */
  T_BAT_fax_wd              wd;                       /*<  8:  4> (enum=32bit)<->T_BAT_fax_wd Page width in pixels   */
  T_BAT_fax_ln              ln;                       /*< 12:  4> (enum=32bit)<->T_BAT_fax_ln Page length            */
  T_BAT_fax_df              df;                       /*< 16:  4> (enum=32bit)<->T_BAT_fax_df Data compression format */
  T_BAT_fax_ec              ec;                       /*< 20:  4> (enum=32bit)<->T_BAT_fax_ec Error correction       */
  T_BAT_fax_bf              bf;                       /*< 24:  4> (enum=32bit)<->T_BAT_fax_bf File transfer          */
  T_BAT_fax_st              st;                       /*< 28:  4> (enum=32bit)<->T_BAT_fax_st Scan time/line         */
  T_BAT_fax_jp              jp;                       /*< 32:  4> (enum=32bit)<->T_BAT_fax_jp JPEG for colour and B&W */
} T_BAT_cmd_set_plus_fcc;
#endif

#ifndef __T_BAT_res_que_plus_fclass__
#define __T_BAT_res_que_plus_fclass__
/*
 * The query answer structure of the +FCLASS command.
 * CCDGEN:WriteStruct_Count==2748
 */
typedef struct
{
  T_BAT_plus_fclass_n       n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_fclass_n Mode            */
} T_BAT_res_que_plus_fclass;
#endif

#ifndef __T_BAT_cmd_set_plus_fclass__
#define __T_BAT_cmd_set_plus_fclass__
/*
 * The set command structure of the +FCLASS command.
 * CCDGEN:WriteStruct_Count==2749
 */
typedef struct
{
  T_BAT_plus_fclass_n       n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_fclass_n Mode            */
} T_BAT_cmd_set_plus_fclass;
#endif

#ifndef __T_BAT_res_que_plus_fcq__
#define __T_BAT_res_que_plus_fcq__
/*
 * The query answer structure of the +FCQ command.
 * CCDGEN:WriteStruct_Count==2750
 */
typedef struct
{
  T_BAT_fax_cq              rq;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_cq Copy quality checking  */
  T_BAT_plus_fcq_tq         tq;                       /*<  4:  4> (enum=32bit)<->T_BAT_plus_fcq_tq Copy quality checking */
} T_BAT_res_que_plus_fcq;
#endif

#ifndef __T_BAT_cmd_set_plus_fcq__
#define __T_BAT_cmd_set_plus_fcq__
/*
 * The set command structure of the +FCQ command.
 * CCDGEN:WriteStruct_Count==2751
 */
typedef struct
{
  T_BAT_fax_cq              rq;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_cq Copy quality checking  */
  T_BAT_plus_fcq_tq         tq;                       /*<  4:  4> (enum=32bit)<->T_BAT_plus_fcq_tq Copy quality checking */
} T_BAT_cmd_set_plus_fcq;
#endif

#ifndef __T_BAT_res_que_plus_fcr__
#define __T_BAT_res_que_plus_fcr__
/*
 * The query answer structure of the +FCR command.
 * CCDGEN:WriteStruct_Count==2752
 */
typedef struct
{
  T_BAT_plus_fcr_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fcr_value value          */
} T_BAT_res_que_plus_fcr;
#endif

#ifndef __T_BAT_cmd_set_plus_fcr__
#define __T_BAT_cmd_set_plus_fcr__
/*
 * The set command structure of the +FCR command.
 * CCDGEN:WriteStruct_Count==2753
 */
typedef struct
{
  T_BAT_plus_fcr_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fcr_value value          */
} T_BAT_cmd_set_plus_fcr;
#endif

#ifndef __T_BAT_res_que_plus_fcs__
#define __T_BAT_res_que_plus_fcs__
/*
 * The query answer structure of the +FCS command.
 * CCDGEN:WriteStruct_Count==2754
 */
typedef struct
{
  T_BAT_fax_vr              vr;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_vr Resolution             */
  T_BAT_fax_br              br;                       /*<  4:  4> (enum=32bit)<->T_BAT_fax_br Bit rate               */
  T_BAT_fax_wd              wd;                       /*<  8:  4> (enum=32bit)<->T_BAT_fax_wd Page width in pixels   */
  T_BAT_fax_ln              ln;                       /*< 12:  4> (enum=32bit)<->T_BAT_fax_ln Page length            */
  T_BAT_fax_df              df;                       /*< 16:  4> (enum=32bit)<->T_BAT_fax_df Data compression format */
  T_BAT_fax_ec              ec;                       /*< 20:  4> (enum=32bit)<->T_BAT_fax_ec Error correction       */
  T_BAT_fax_bf              bf;                       /*< 24:  4> (enum=32bit)<->T_BAT_fax_bf File transfer          */
  T_BAT_fax_st              st;                       /*< 28:  4> (enum=32bit)<->T_BAT_fax_st Scan time/line         */
  T_BAT_fax_jp              jp;                       /*< 32:  4> (enum=32bit)<->T_BAT_fax_jp JPEG for colour and B&W */
} T_BAT_res_que_plus_fcs;
#endif

#ifndef __T_BAT_res_que_plus_fct__
#define __T_BAT_res_que_plus_fct__
/*
 * The query answer structure of the +FCT command.
 * CCDGEN:WriteStruct_Count==2755
 */
typedef struct
{
  U8                        value;                    /*<  0:  1> Timer value (Default 30 seconds)                   */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_res_que_plus_fct;
#endif

#ifndef __T_BAT_cmd_set_plus_fct__
#define __T_BAT_cmd_set_plus_fct__
/*
 * The set command structure of the +FCT command.
 * CCDGEN:WriteStruct_Count==2756
 */
typedef struct
{
  U8                        value;                    /*<  0:  1> Timer value (Default 30 seconds)                   */
  U8                        _align0;                  /*<  1:  1> alignment                                          */
  U8                        _align1;                  /*<  2:  1> alignment                                          */
  U8                        _align2;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_fct;
#endif

#ifndef __T_BAT_res_que_plus_fea__
#define __T_BAT_res_que_plus_fea__
/*
 * The query answer structure of the +FEA command.
 * CCDGEN:WriteStruct_Count==2757
 */
typedef struct
{
  T_BAT_plus_fea_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fea_value value          */
} T_BAT_res_que_plus_fea;
#endif

#ifndef __T_BAT_cmd_set_plus_fea__
#define __T_BAT_cmd_set_plus_fea__
/*
 * The set command structure of the +FEA command.
 * CCDGEN:WriteStruct_Count==2758
 */
typedef struct
{
  T_BAT_plus_fea_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fea_value value          */
} T_BAT_cmd_set_plus_fea;
#endif

#ifndef __T_BAT_res_que_plus_ffc__
#define __T_BAT_res_que_plus_ffc__
/*
 * The query answer structure of the +FFC command.
 * CCDGEN:WriteStruct_Count==2759
 */
typedef struct
{
  T_BAT_plus_ffc_vrc        vrc;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_ffc_vrc vrc              */
  T_BAT_plus_ffc_dfc        dfc;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_ffc_dfc dfc              */
  T_BAT_plus_ffc_lnc        lnc;                      /*<  8:  4> (enum=32bit)<->T_BAT_plus_ffc_lnc lnc              */
  T_BAT_plus_ffc_wdc        wdc;                      /*< 12:  4> (enum=32bit)<->T_BAT_plus_ffc_wdc wdc              */
} T_BAT_res_que_plus_ffc;
#endif

#ifndef __T_BAT_cmd_set_plus_ffc__
#define __T_BAT_cmd_set_plus_ffc__
/*
 * The set command structure of the +FFC command.
 * CCDGEN:WriteStruct_Count==2760
 */
typedef struct
{
  T_BAT_plus_ffc_vrc        vrc;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_ffc_vrc vrc              */
  T_BAT_plus_ffc_dfc        dfc;                      /*<  4:  4> (enum=32bit)<->T_BAT_plus_ffc_dfc dfc              */
  T_BAT_plus_ffc_lnc        lnc;                      /*<  8:  4> (enum=32bit)<->T_BAT_plus_ffc_lnc lnc              */
  T_BAT_plus_ffc_wdc        wdc;                      /*< 12:  4> (enum=32bit)<->T_BAT_plus_ffc_wdc wdc              */
} T_BAT_cmd_set_plus_ffc;
#endif

#ifndef __T_BAT_res_que_plus_fhs__
#define __T_BAT_res_que_plus_fhs__
/*
 * The query answer structure of the +FHS command.
 * CCDGEN:WriteStruct_Count==2761
 */
typedef struct
{
  T_BAT_plus_fhs_status     status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_fhs_status status        */
} T_BAT_res_que_plus_fhs;
#endif

#ifndef __T_BAT_res_uns_plus_fhs__
#define __T_BAT_res_uns_plus_fhs__
/*
 * The unsolicited result code structure of the +FHS command.
 * CCDGEN:WriteStruct_Count==2762
 */
typedef struct
{
  T_BAT_plus_fhs_status     status;                   /*<  0:  4> (enum=32bit)<->T_BAT_plus_fhs_status status        */
} T_BAT_res_uns_plus_fhs;
#endif

#ifndef __T_BAT_res_que_plus_fie__
#define __T_BAT_res_que_plus_fie__
/*
 * The query answer structure of the +FIE command.
 * CCDGEN:WriteStruct_Count==2763
 */
typedef struct
{
  T_BAT_plus_fie_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fie_value value          */
} T_BAT_res_que_plus_fie;
#endif

#ifndef __T_BAT_cmd_set_plus_fie__
#define __T_BAT_cmd_set_plus_fie__
/*
 * The set command structure of the +FIE command.
 * CCDGEN:WriteStruct_Count==2764
 */
typedef struct
{
  T_BAT_plus_fie_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fie_value value          */
} T_BAT_cmd_set_plus_fie;
#endif

#ifndef __T_BAT_res_que_plus_fis__
#define __T_BAT_res_que_plus_fis__
/*
 * The query answer structure of the +FIS command.
 * CCDGEN:WriteStruct_Count==2765
 */
typedef struct
{
  T_BAT_fax_vr              vr;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_vr Resolution             */
  T_BAT_fax_br              br;                       /*<  4:  4> (enum=32bit)<->T_BAT_fax_br Bit rate               */
  T_BAT_fax_wd              wd;                       /*<  8:  4> (enum=32bit)<->T_BAT_fax_wd Page width in pixels   */
  T_BAT_fax_ln              ln;                       /*< 12:  4> (enum=32bit)<->T_BAT_fax_ln Page length            */
  T_BAT_fax_df              df;                       /*< 16:  4> (enum=32bit)<->T_BAT_fax_df Data compression format */
  T_BAT_fax_ec              ec;                       /*< 20:  4> (enum=32bit)<->T_BAT_fax_ec Error correction       */
  T_BAT_fax_bf              bf;                       /*< 24:  4> (enum=32bit)<->T_BAT_fax_bf File transfer          */
  T_BAT_fax_st              st;                       /*< 28:  4> (enum=32bit)<->T_BAT_fax_st Scan time/line         */
  T_BAT_fax_jp              jp;                       /*< 32:  4> (enum=32bit)<->T_BAT_fax_jp JPEG for colour and B&W */
} T_BAT_res_que_plus_fis;
#endif

#ifndef __T_BAT_cmd_set_plus_fis__
#define __T_BAT_cmd_set_plus_fis__
/*
 * The set command structure of the +FIS command.
 * CCDGEN:WriteStruct_Count==2766
 */
typedef struct
{
  T_BAT_fax_vr              vr;                       /*<  0:  4> (enum=32bit)<->T_BAT_fax_vr Resolution             */
  T_BAT_fax_br              br;                       /*<  4:  4> (enum=32bit)<->T_BAT_fax_br Bit rate               */
  T_BAT_fax_wd              wd;                       /*<  8:  4> (enum=32bit)<->T_BAT_fax_wd Page width in pixels   */
  T_BAT_fax_ln              ln;                       /*< 12:  4> (enum=32bit)<->T_BAT_fax_ln Page length            */
  T_BAT_fax_df              df;                       /*< 16:  4> (enum=32bit)<->T_BAT_fax_df Data compression format */
  T_BAT_fax_ec              ec;                       /*< 20:  4> (enum=32bit)<->T_BAT_fax_ec Error correction       */
  T_BAT_fax_bf              bf;                       /*< 24:  4> (enum=32bit)<->T_BAT_fax_bf File transfer          */
  T_BAT_fax_st              st;                       /*< 28:  4> (enum=32bit)<->T_BAT_fax_st Scan time/line         */
  T_BAT_fax_jp              jp;                       /*< 32:  4> (enum=32bit)<->T_BAT_fax_jp JPEG for colour and B&W */
} T_BAT_cmd_set_plus_fis;
#endif

#ifndef __T_BAT_res_que_plus_fit__
#define __T_BAT_res_que_plus_fit__
/*
 * The query answer structure of the +FIT command.
 * CCDGEN:WriteStruct_Count==2767
 */
typedef struct
{
  U16                       time;                     /*<  0:  2> Inactivity timeout in seconds                      */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_fit_action     action;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_fit_action Action taken upon timeout */
} T_BAT_res_que_plus_fit;
#endif

#ifndef __T_BAT_cmd_set_plus_fit__
#define __T_BAT_cmd_set_plus_fit__
/*
 * The set command structure of the +FIT command.
 * CCDGEN:WriteStruct_Count==2768
 */
typedef struct
{
  U16                       time;                     /*<  0:  2> Inactivity timeout in seconds                      */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
  T_BAT_plus_fit_action     action;                   /*<  4:  4> (enum=32bit)<->T_BAT_plus_fit_action Action taken upon timeout */
} T_BAT_cmd_set_plus_fit;
#endif

#ifndef __T_BAT_res_que_plus_fli__
#define __T_BAT_res_que_plus_fli__
/*
 * The query answer structure of the +FLI command.
 * CCDGEN:WriteStruct_Count==2769
 */
typedef struct
{
  U8                        c_id_str;                 /*<  0:  1> counter                                            */
  U8                        id_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Local ID string                                    */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_fli;
#endif

#ifndef __T_BAT_cmd_set_plus_fli__
#define __T_BAT_cmd_set_plus_fli__
/*
 * The set command structure of the +FLI command.
 * CCDGEN:WriteStruct_Count==2770
 */
typedef struct
{
  U8                        c_id_str;                 /*<  0:  1> counter                                            */
  U8                        id_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Local ID string                                    */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_plus_fli;
#endif

#ifndef __T_BAT_res_que_plus_flo__
#define __T_BAT_res_que_plus_flo__
/*
 * The query answer structure of the +FLO command.
 * CCDGEN:WriteStruct_Count==2771
 */
typedef struct
{
  T_BAT_plus_flo_flo_q      flo_q;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_flo_flo_q value          */
} T_BAT_res_que_plus_flo;
#endif

#ifndef __T_BAT_cmd_set_plus_flo__
#define __T_BAT_cmd_set_plus_flo__
/*
 * The set command structure of the +FLO command.
 * CCDGEN:WriteStruct_Count==2772
 */
typedef struct
{
  T_BAT_plus_flo_flo_c      flo_c;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_flo_flo_c value          */
} T_BAT_cmd_set_plus_flo;
#endif

#ifndef __T_BAT_res_que_plus_flp__
#define __T_BAT_res_que_plus_flp__
/*
 * The query answer structure of the +FLP command.
 * CCDGEN:WriteStruct_Count==2773
 */
typedef struct
{
  T_BAT_plus_flp_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_flp_value Whether the DTE has a document ready for polling */
} T_BAT_res_que_plus_flp;
#endif

#ifndef __T_BAT_cmd_set_plus_flp__
#define __T_BAT_cmd_set_plus_flp__
/*
 * The set command structure of the +FLP command.
 * CCDGEN:WriteStruct_Count==2774
 */
typedef struct
{
  T_BAT_plus_flp_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_flp_value Whether the DTE has a document ready for polling */
} T_BAT_cmd_set_plus_flp;
#endif

#ifndef __T_BAT_res_que_plus_fms__
#define __T_BAT_res_que_plus_fms__
/*
 * The query answer structure of the +FMS command.
 * CCDGEN:WriteStruct_Count==2775
 */
typedef struct
{
  T_BAT_plus_fms_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fms_value Lowest negotiable speed for a session */
} T_BAT_res_que_plus_fms;
#endif

#ifndef __T_BAT_cmd_set_plus_fms__
#define __T_BAT_cmd_set_plus_fms__
/*
 * The set command structure of the +FMS command.
 * CCDGEN:WriteStruct_Count==2776
 */
typedef struct
{
  T_BAT_plus_fms_value      value;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_fms_value Lowest negotiable speed for a session */
} T_BAT_cmd_set_plus_fms;
#endif

#ifndef __T_BAT_res_que_plus_fns__
#define __T_BAT_res_que_plus_fns__
/*
 * The query answer structure of the +FNS command.
 * CCDGEN:WriteStruct_Count==2777
 */
typedef struct
{
  U8                        v_nsf;                    /*<  0:  1> valid-flag                                         */
  U8                        c_nsf;                    /*<  1:  1> counter                                            */
  U8                        nsf[BAT_MAX_FNS_NSF];     /*<  2: 89> String of hexadecimal coded octets                 */
  U8                        _align0;                  /*< 91:  1> alignment                                          */
} T_BAT_res_que_plus_fns;
#endif

#ifndef __T_BAT_cmd_set_plus_fns__
#define __T_BAT_cmd_set_plus_fns__
/*
 * The set command structure of the +FNS command.
 * CCDGEN:WriteStruct_Count==2778
 */
typedef struct
{
  U8                        v_nsf;                    /*<  0:  1> valid-flag                                         */
  U8                        c_nsf;                    /*<  1:  1> counter                                            */
  U8                        nsf[BAT_MAX_FNS_NSF];     /*<  2: 89> String of hexadecimal coded octets                 */
  U8                        _align0;                  /*< 91:  1> alignment                                          */
} T_BAT_cmd_set_plus_fns;
#endif

#ifndef __T_BAT_res_que_plus_fpa__
#define __T_BAT_res_que_plus_fpa__
/*
 * The query answer structure of the +FPA command.
 * CCDGEN:WriteStruct_Count==2779
 */
typedef struct
{
  U8                        c_spa_str;                /*<  0:  1> counter                                            */
  U8                        spa_str[BAT_MAX_ID_CHAR]; /*<  1: 21> Selective polling address string                   */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_fpa;
#endif

#ifndef __T_BAT_cmd_set_plus_fpa__
#define __T_BAT_cmd_set_plus_fpa__
/*
 * The set command structure of the +FPA command.
 * CCDGEN:WriteStruct_Count==2780
 */
typedef struct
{
  U8                        c_spa_str;                /*<  0:  1> counter                                            */
  U8                        spa_str[BAT_MAX_ID_CHAR]; /*<  1: 21> Selective polling address string                   */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_plus_fpa;
#endif

#ifndef __T_BAT_res_que_plus_fpi__
#define __T_BAT_res_que_plus_fpi__
/*
 * The query answer structure of the +FPI command.
 * CCDGEN:WriteStruct_Count==2781
 */
typedef struct
{
  U8                        c_id_str;                 /*<  0:  1> counter                                            */
  U8                        id_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Local polling ID string                            */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_fpi;
#endif

#ifndef __T_BAT_cmd_set_plus_fpi__
#define __T_BAT_cmd_set_plus_fpi__
/*
 * The set command structure of the +FPI command.
 * CCDGEN:WriteStruct_Count==2782
 */
typedef struct
{
  U8                        c_id_str;                 /*<  0:  1> counter                                            */
  U8                        id_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Local polling ID string                            */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_plus_fpi;
#endif

#ifndef __T_BAT_res_que_plus_fps__
#define __T_BAT_res_que_plus_fps__
/*
 * The query answer structure of the +FPS command.
 * CCDGEN:WriteStruct_Count==2783
 */
typedef struct
{
  T_BAT_plus_fps_ppr        ppr;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_fps_ppr Post page response */
} T_BAT_res_que_plus_fps;
#endif

#ifndef __T_BAT_cmd_set_plus_fps__
#define __T_BAT_cmd_set_plus_fps__
/*
 * The set command structure of the +FPS command.
 * CCDGEN:WriteStruct_Count==2784
 */
typedef struct
{
  T_BAT_plus_fps_ppr        ppr;                      /*<  0:  4> (enum=32bit)<->T_BAT_plus_fps_ppr Post page response */
} T_BAT_cmd_set_plus_fps;
#endif

#ifndef __T_BAT_res_que_plus_fpw__
#define __T_BAT_res_que_plus_fpw__
/*
 * The query answer structure of the +FPW command.
 * CCDGEN:WriteStruct_Count==2785
 */
typedef struct
{
  U8                        c_pw_str;                 /*<  0:  1> counter                                            */
  U8                        pw_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Password string                                    */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_fpw;
#endif

#ifndef __T_BAT_cmd_set_plus_fpw__
#define __T_BAT_cmd_set_plus_fpw__
/*
 * The set command structure of the +FPW command.
 * CCDGEN:WriteStruct_Count==2786
 */
typedef struct
{
  U8                        c_pw_str;                 /*<  0:  1> counter                                            */
  U8                        pw_str[BAT_MAX_ID_CHAR];  /*<  1: 21> Password string                                    */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_plus_fpw;
#endif

#ifndef __T_BAT_res_que_plus_frq__
#define __T_BAT_res_que_plus_frq__
/*
 * The query answer structure of the +FRQ command.
 * CCDGEN:WriteStruct_Count==2787
 */
typedef struct
{
  U8                        pgl;                      /*<  0:  1> Percentage of good lines required for a page to be considered acceptable */
  U8                        cbl;                      /*<  1:  1> Maximum tolerable number of consecutive bad lines  */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_res_que_plus_frq;
#endif

#ifndef __T_BAT_cmd_set_plus_frq__
#define __T_BAT_cmd_set_plus_frq__
/*
 * The set command structure of the +FRQ command.
 * CCDGEN:WriteStruct_Count==2788
 */
typedef struct
{
  U8                        pgl;                      /*<  0:  1> Percentage of good lines required for a page to be considered acceptable */
  U8                        cbl;                      /*<  1:  1> Maximum tolerable number of consecutive bad lines  */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        _align1;                  /*<  3:  1> alignment                                          */
} T_BAT_cmd_set_plus_frq;
#endif

#ifndef __T_BAT_res_que_plus_fsa__
#define __T_BAT_res_que_plus_fsa__
/*
 * The query answer structure of the +FSA command.
 * CCDGEN:WriteStruct_Count==2789
 */
typedef struct
{
  U8                        c_sub_str;                /*<  0:  1> counter                                            */
  U8                        sub_str[BAT_MAX_ID_CHAR]; /*<  1: 21> Destination sub-address string                     */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_plus_fsa;
#endif

#ifndef __T_BAT_cmd_set_plus_fsa__
#define __T_BAT_cmd_set_plus_fsa__
/*
 * The set command structure of the +FSA command.
 * CCDGEN:WriteStruct_Count==2790
 */
typedef struct
{
  U8                        c_sub_str;                /*<  0:  1> counter                                            */
  U8                        sub_str[BAT_MAX_ID_CHAR]; /*<  1: 21> Destination sub-address string                     */
  U8                        _align0;                  /*< 22:  1> alignment                                          */
  U8                        _align1;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_plus_fsa;
#endif

#ifndef __T_BAT_res_que_plus_fsp__
#define __T_BAT_res_que_plus_fsp__
/*
 * The query answer structure of the +FSP command.
 * CCDGEN:WriteStruct_Count==2791
 */
typedef struct
{
  T_BAT_plus_fsp_poll       poll;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_fsp_poll Enable/disable polling */
} T_BAT_res_que_plus_fsp;
#endif

#ifndef __T_BAT_cmd_set_plus_fsp__
#define __T_BAT_cmd_set_plus_fsp__
/*
 * The set command structure of the +FSP command.
 * CCDGEN:WriteStruct_Count==2792
 */
typedef struct
{
  T_BAT_plus_fsp_poll       poll;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_fsp_poll Enable/disable polling */
} T_BAT_cmd_set_plus_fsp;
#endif

#ifndef __T_BAT_res_que_plus_icf__
#define __T_BAT_res_que_plus_icf__
/*
 * The query answer structure of the +ICF command.
 * CCDGEN:WriteStruct_Count==2793
 */
typedef struct
{
  T_BAT_framing_format      framing_format;           /*<  0:  4> (enum=32bit)<->T_BAT_framing_format Format (number of data, parity and stop bits) */
  T_BAT_framing_parity      framing_parity;           /*<  4:  4> (enum=32bit)<->T_BAT_framing_parity Parity type    */
} T_BAT_res_que_plus_icf;
#endif

#ifndef __T_BAT_cmd_set_plus_icf__
#define __T_BAT_cmd_set_plus_icf__
/*
 * The set command structure of the +ICF command.
 * CCDGEN:WriteStruct_Count==2794
 */
typedef struct
{
  T_BAT_framing_format      framing_format;           /*<  0:  4> (enum=32bit)<->T_BAT_framing_format Format (number of data, parity and stop bits) */
  T_BAT_framing_parity      framing_parity;           /*<  4:  4> (enum=32bit)<->T_BAT_framing_parity Parity type    */
} T_BAT_cmd_set_plus_icf;
#endif

#ifndef __T_BAT_res_que_plus_ifc__
#define __T_BAT_res_que_plus_ifc__
/*
 * The query answer structure of the +IFC command.
 * CCDGEN:WriteStruct_Count==2795
 */
typedef struct
{
  T_BAT_plus_ifc_by_te      by_te;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_ifc_by_te Flow control of TA by TE (RX) */
  T_BAT_plus_ifc_by_ta      by_ta;                    /*<  4:  4> (enum=32bit)<->T_BAT_plus_ifc_by_ta Flow control of TE by TA (TX) */
} T_BAT_res_que_plus_ifc;
#endif

#ifndef __T_BAT_cmd_set_plus_ifc__
#define __T_BAT_cmd_set_plus_ifc__
/*
 * The set command structure of the +IFC command.
 * CCDGEN:WriteStruct_Count==2796
 */
typedef struct
{
  T_BAT_plus_ifc_by_te      by_te;                    /*<  0:  4> (enum=32bit)<->T_BAT_plus_ifc_by_te Flow control of TA by TE (RX) */
  T_BAT_plus_ifc_by_ta      by_ta;                    /*<  4:  4> (enum=32bit)<->T_BAT_plus_ifc_by_ta Flow control of TE by TA (TX) */
} T_BAT_cmd_set_plus_ifc;
#endif

#ifndef __T_BAT_res_uns_plus_ilrr__
#define __T_BAT_res_uns_plus_ilrr__
/*
 * The unsolicited result code structure of the +ILRR command.
 * CCDGEN:WriteStruct_Count==2797
 */
typedef struct
{
  T_BAT_plus_ilrr_rate      rate;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_ilrr_rate Rate (bps)     */
  T_BAT_framing_format      framing_format;           /*<  4:  4> (enum=32bit)<->T_BAT_framing_format Format (number of data, parity and stop bits) */
  T_BAT_framing_parity      framing_parity;           /*<  8:  4> (enum=32bit)<->T_BAT_framing_parity Parity type    */
} T_BAT_res_uns_plus_ilrr;
#endif

#ifndef __T_BAT_res_que_percent_imei__
#define __T_BAT_res_que_percent_imei__
/*
 * The query answer structure of the %IMEI command.
 * CCDGEN:WriteStruct_Count==2798
 */
typedef struct
{
  U8                        tac1;                     /*<  0:  1> type approval country code                         */
  U8                        tac2;                     /*<  1:  1> type approval assembly code                        */
  U8                        tac3;                     /*<  2:  1> type approval assembly code                        */
  U8                        fac;                      /*<  3:  1> manufacturer code                                  */
  U8                        snr1;                     /*<  4:  1> serial number                                      */
  U8                        snr2;                     /*<  5:  1> serial number                                      */
  U8                        snr3;                     /*<  6:  1> serial number                                      */
  U8                        svn;                      /*<  7:  1> software version number                            */
  U8                        cd;                       /*<  8:  1> Luhn Check Digit                                   */
  U8                        _align0;                  /*<  9:  1> alignment                                          */
  U8                        _align1;                  /*< 10:  1> alignment                                          */
  U8                        _align2;                  /*< 11:  1> alignment                                          */
} T_BAT_res_que_percent_imei;
#endif

#ifndef __T_BAT_res_que_plus_ipr__
#define __T_BAT_res_que_plus_ipr__
/*
 * The query answer structure of the +IPR command.
 * CCDGEN:WriteStruct_Count==2799
 */
typedef struct
{
  T_BAT_plus_ipr_rate       rate;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_ipr_rate Data rate       */
} T_BAT_res_que_plus_ipr;
#endif

#ifndef __T_BAT_cmd_set_plus_ipr__
#define __T_BAT_cmd_set_plus_ipr__
/*
 * The set command structure of the +IPR command.
 * CCDGEN:WriteStruct_Count==2800
 */
typedef struct
{
  T_BAT_plus_ipr_rate       rate;                     /*<  0:  4> (enum=32bit)<->T_BAT_plus_ipr_rate Data rate       */
} T_BAT_cmd_set_plus_ipr;
#endif

#ifndef __T_BAT_res_que_percent_pbcf__
#define __T_BAT_res_que_percent_pbcf__
/*
 * The query answer structure of the %PBCF command.
 * CCDGEN:WriteStruct_Count==2801
 */
typedef struct
{
  T_BAT_percent_pbcf_ldn    ldn;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_pbcf_ldn Last Dialled Number */
  T_BAT_percent_pbcf_lrn    lrn;                      /*<  4:  4> (enum=32bit)<->T_BAT_percent_pbcf_lrn Last Received Number */
  T_BAT_percent_pbcf_lmn    lmn;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_pbcf_lmn Last Missed Number */
} T_BAT_res_que_percent_pbcf;
#endif

#ifndef __T_BAT_cmd_set_percent_pbcf__
#define __T_BAT_cmd_set_percent_pbcf__
/*
 * The set command structure of the %PBCF command.
 * CCDGEN:WriteStruct_Count==2802
 */
typedef struct
{
  T_BAT_percent_pbcf_ldn    ldn;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_pbcf_ldn Last Dialled Number */
  T_BAT_percent_pbcf_lrn    lrn;                      /*<  4:  4> (enum=32bit)<->T_BAT_percent_pbcf_lrn Last Received Number */
  T_BAT_percent_pbcf_lmn    lmn;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_pbcf_lmn Last Missed Number */
} T_BAT_cmd_set_percent_pbcf;
#endif

#ifndef __T_BAT_res_que_percent_ppp__
#define __T_BAT_res_que_percent_ppp__
/*
 * The query answer structure of the %PPP command.
 * CCDGEN:WriteStruct_Count==2803
 */
typedef struct
{
  S32                       ipaddr;                   /*<  0:  4> IP ddress of the mobile as negotiated with the network (valid only during PPP connection) */
  S32                       dns1;                     /*<  4:  4> IP address of first DNS server to use (valid only during PPP connection) */
  S32                       dns2;                     /*<  8:  4> IP address of second DNS server to use (valid only during PPP connection) */
} T_BAT_res_que_percent_ppp;
#endif

#ifndef __T_BAT_cmd_set_percent_ppp__
#define __T_BAT_cmd_set_percent_ppp__
/*
 * The set command structure of the %PPP command.
 * CCDGEN:WriteStruct_Count==2804
 */
typedef struct
{
  T_BAT_percent_ppp_authprot authprot;                /*<  0:  4> (enum=32bit)<->T_BAT_percent_ppp_authprot Authentication protocol to use with PPP */
  U8                        v_user;                   /*<  4:  1> valid-flag                                         */
  U8                        c_user;                   /*<  5:  1> counter                                            */
  U8                        user[BAT_MAX_PPP_USER_LEN]; /*<  6: 25> User login name                                    */
  U8                        v_password;               /*< 31:  1> valid-flag                                         */
  U8                        c_password;               /*< 32:  1> counter                                            */
  U8                        password[BAT_MAX_PPP_PASSW_LEN]; /*< 33: 25> User password                                      */
  U8                        _align0;                  /*< 58:  1> alignment                                          */
  U8                        _align1;                  /*< 59:  1> alignment                                          */
  T_BAT_percent_ppp_conn_type conn_type;              /*< 60:  4> (enum=32bit)<->T_BAT_percent_ppp_conn_type Connection type */
} T_BAT_cmd_set_percent_ppp;
#endif

#ifndef __T_BAT_res_que_percent_pvrf__
#define __T_BAT_res_que_percent_pvrf__
/*
 * The query answer structure of the %PVRF command.
 * CCDGEN:WriteStruct_Count==2805
 */
typedef struct
{
  S16                       pn1cnt;                   /*<  0:  2> PIN1 Counter                                       */
  S16                       pn2cnt;                   /*<  2:  2> PIN2 Counter                                       */
  S16                       pk1cnt;                   /*<  4:  2> PUK1 Counter                                       */
  S16                       pk2cnt;                   /*<  6:  2> PUK2 Counter                                       */
  T_BAT_percent_pvrf_ps1    ps1;                      /*<  8:  4> (enum=32bit)<->T_BAT_percent_pvrf_ps1 PIN1 Status  */
  T_BAT_percent_pvrf_ps2    ps2;                      /*< 12:  4> (enum=32bit)<->T_BAT_percent_pvrf_ps2 PIN2 Status  */
} T_BAT_res_que_percent_pvrf;
#endif

#ifndef __T_BAT_cmd_set_percent_pvrf__
#define __T_BAT_cmd_set_percent_pvrf__
/*
 * The set command structure of the %PVRF command.
 * CCDGEN:WriteStruct_Count==2806
 */
typedef struct
{
  T_BAT_percent_pvrf_type   type;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_pvrf_type PIN/PUK Type */
  U8                        c_pin;                    /*<  4:  1> counter                                            */
  U8                        pin[BAT_MAX_PVRF_PIN_LEN]; /*<  5:  8> PIN/PUK characters.                                */
  U8                        v_newpin;                 /*< 13:  1> valid-flag                                         */
  U8                        c_newpin;                 /*< 14:  1> counter                                            */
  U8                        newpin[BAT_MAX_PVRF_NEW_PIN_LEN]; /*< 15:  8> New PIN (if type is PUK1/2).                       */
  U8                        _align0;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_percent_pvrf;
#endif

#ifndef __T_BAT_res_que_percent_rdl__
#define __T_BAT_res_que_percent_rdl__
/*
 * The query answer structure of the %RDL command.
 * CCDGEN:WriteStruct_Count==2807
 */
typedef struct
{
  T_BAT_percent_rdl_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_rdl_mode Automatic calling repeat Mode */
} T_BAT_res_que_percent_rdl;
#endif

#ifndef __T_BAT_cmd_set_percent_rdl__
#define __T_BAT_cmd_set_percent_rdl__
/*
 * The set command structure of the %RDL command.
 * CCDGEN:WriteStruct_Count==2808
 */
typedef struct
{
  T_BAT_percent_rdl_mode    mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_rdl_mode Automatic calling repeat Mode */
} T_BAT_cmd_set_percent_rdl;
#endif

#ifndef __T_BAT_res_uns_percent_rdl__
#define __T_BAT_res_uns_percent_rdl__
/*
 * The unsolicited result code structure of the %RDL command.
 * CCDGEN:WriteStruct_Count==2809
 */
typedef struct
{
  T_BAT_percent_rdl_state   state;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_rdl_state Automatic calling repeat state */
} T_BAT_res_uns_percent_rdl;
#endif

#ifndef __T_BAT_res_que_percent_rdlb__
#define __T_BAT_res_que_percent_rdlb__
/*
 * The query answer structure of the %RDLB command.
 * CCDGEN:WriteStruct_Count==2810
 */
typedef struct
{
  U8                        c_number;                 /*<  0:  1> counter                                            */
  U8                        number[BAT_MAX_RDLB_NUMBER_LEN]; /*<  1: 81> Telephone number                                   */
  U8                        type;                     /*< 82:  1> Type of address                                    */
  U8                        _align0;                  /*< 83:  1> alignment                                          */
} T_BAT_res_que_percent_rdlb;
#endif

#ifndef __T_BAT_cmd_set_percent_rdlb__
#define __T_BAT_cmd_set_percent_rdlb__
/*
 * The set command structure of the %RDLB command.
 * CCDGEN:WriteStruct_Count==2811
 */
typedef struct
{
  T_BAT_percent_rdlb_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_rdlb_mode Blacklist mode */
} T_BAT_cmd_set_percent_rdlb;
#endif

#ifndef __T_BAT_res_uns_percent_rdlb__
#define __T_BAT_res_uns_percent_rdlb__
/*
 * The unsolicited result code structure of the %RDLB command.
 * CCDGEN:WriteStruct_Count==2812
 */
typedef struct
{
  T_BAT_percent_rdlb_state  state;                    /*<  0:  4> (enum=32bit)<->T_BAT_percent_rdlb_state Blacklist state */
} T_BAT_res_uns_percent_rdlb;
#endif

#ifndef __T_BAT_res_uns_percent_sata__
#define __T_BAT_res_uns_percent_sata__
/*
 * The unsolicited result code structure of the %SATA command.
 * CCDGEN:WriteStruct_Count==2813
 */
typedef struct
{
  S32                       redial_timeout;           /*<  0:  4> Redial timeout in ms                               */
} T_BAT_res_uns_percent_sata;
#endif

#ifndef __T_BAT_res_que_percent_satc__
#define __T_BAT_res_que_percent_satc__
/*
 * The query answer structure of the %SATC command.
 * CCDGEN:WriteStruct_Count==2814
 */
typedef struct
{
  U8                        c_satprfl;                /*<  0:  1> counter                                            */
  U8                        satprfl[BAT_MAX_STK_PRF]; /*<  1: 20> SATK profile                                       */
  U8                        _align0;                  /*< 21:  1> alignment                                          */
  U8                        _align1;                  /*< 22:  1> alignment                                          */
  U8                        _align2;                  /*< 23:  1> alignment                                          */
} T_BAT_res_que_percent_satc;
#endif

#ifndef __T_BAT_cmd_set_percent_satc__
#define __T_BAT_cmd_set_percent_satc__
/*
 * The set command structure of the %SATC command.
 * CCDGEN:WriteStruct_Count==2815
 */
typedef struct
{
  U8                        c_satprfl;                /*<  0:  1> counter                                            */
  U8                        satprfl[BAT_MAX_STK_PRF]; /*<  1: 20> SATK profile                                       */
  U8                        _align0;                  /*< 21:  1> alignment                                          */
  U8                        _align1;                  /*< 22:  1> alignment                                          */
  U8                        _align2;                  /*< 23:  1> alignment                                          */
} T_BAT_cmd_set_percent_satc;
#endif

#ifndef __T_BAT_res_que_percent_satcc__
#define __T_BAT_res_que_percent_satcc__
/*
 * The query answer structure of the %SATCC command.
 * CCDGEN:WriteStruct_Count==2816
 */
typedef struct
{
  T_BAT_percent_satcc_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_satcc_mode Short message SIM Contol mode */
} T_BAT_res_que_percent_satcc;
#endif

#ifndef __T_BAT_cmd_set_percent_satcc__
#define __T_BAT_cmd_set_percent_satcc__
/*
 * The set command structure of the %SATCC command.
 * CCDGEN:WriteStruct_Count==2817
 */
typedef struct
{
  T_BAT_percent_satcc_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_satcc_mode Short message SIM Contol mode */
} T_BAT_cmd_set_percent_satcc;
#endif

#ifndef __T_BAT_cmd_set_percent_sate__
#define __T_BAT_cmd_set_percent_sate__
/*
 * The set command structure of the %SATE command.
 * CCDGEN:WriteStruct_Count==2818
 */
typedef struct
{
  U16                       c_satcmd;                 /*<  0:  2> counter                                            */
  U8                        satcmd[BAT_MAX_STK_CMD];  /*<  2:256> SATK envelope command                              */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_cmd_set_percent_sate;
#endif

#ifndef __T_BAT_res_set_percent_sate__
#define __T_BAT_res_set_percent_sate__
/*
 * The set response structure of the %SATE command.
 * CCDGEN:WriteStruct_Count==2819
 */
typedef struct
{
  U16                       c_satrsp;                 /*<  0:  2> counter                                            */
  U8                        satrsp[BAT_MAX_SATE_SAT_RSP_LEN]; /*<  2:256> SAT envelope response                              */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_res_set_percent_sate;
#endif

#ifndef __T_BAT_res_uns_percent_sati__
#define __T_BAT_res_uns_percent_sati__
/*
 * The unsolicited result code structure of the %SATI command.
 * CCDGEN:WriteStruct_Count==2820
 */
typedef struct
{
  U16                       c_satcmd;                 /*<  0:  2> counter                                            */
  U8                        satcmd[BAT_MAX_SATI_SAT_CMD_LEN]; /*<  2:256> SIM Application Toolkit command                    */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_res_uns_percent_sati;
#endif

#ifndef __T_BAT_res_uns_percent_satn__
#define __T_BAT_res_uns_percent_satn__
/*
 * The unsolicited result code structure of the %SATN command.
 * CCDGEN:WriteStruct_Count==2821
 */
typedef struct
{
  U16                       c_satcmd;                 /*<  0:  2> counter                                            */
  U8                        satcmd[BAT_MAX_SATN_SAT_CMD_LEN]; /*<  2:256> SIM Application Toolkit command                    */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_res_uns_percent_satn;
#endif

#ifndef __T_BAT_cmd_set_percent_satr__
#define __T_BAT_cmd_set_percent_satr__
/*
 * The set command structure of the %SATR command.
 * CCDGEN:WriteStruct_Count==2822
 */
typedef struct
{
  U16                       c_satrsp;                 /*<  0:  2> counter                                            */
  U8                        satrsp[BAT_MAX_STK_CMD];  /*<  2:256> Response to SATK command                           */
  U8                        _align0;                  /*<258:  1> alignment                                          */
  U8                        _align1;                  /*<259:  1> alignment                                          */
} T_BAT_cmd_set_percent_satr;
#endif

#ifndef __T_BAT_cmd_set_percent_satt__
#define __T_BAT_cmd_set_percent_satt__
/*
 * The set command structure of the %SATT command.
 * CCDGEN:WriteStruct_Count==2823
 */
typedef struct
{
  T_BAT_percent_satt_cs     cs;                       /*<  0:  4> (enum=32bit)<->T_BAT_percent_satt_cs Cause for termination of SIM Application Toolkit */
} T_BAT_cmd_set_percent_satt;
#endif

#ifndef __T_BAT_path_info__
#define __T_BAT_path_info__
/*
 * path information
 * CCDGEN:WriteStruct_Count==2824
 */
typedef struct
{
  U16                       df_level1;                /*<  0:  2> Path Information DF level 1                        */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        v_df_level2;              /*<  3:  1> valid-flag                                         */
  U16                       df_level2;                /*<  4:  2> Path Information DF level 2                        */
  U8                        _align1;                  /*<  6:  1> alignment                                          */
  U8                        _align2;                  /*<  7:  1> alignment                                          */
} T_BAT_path_info;
#endif

#ifndef __T_BAT_file_info__
#define __T_BAT_file_info__
/*
 * File Information for FILE UPDATE
 * CCDGEN:WriteStruct_Count==2825
 */
typedef struct
{
  U16                       datafield;                /*<  0:  2> data field identification                          */
  U8                        _align0;                  /*<  2:  1> alignment                                          */
  U8                        v_path_info;              /*<  3:  1> valid-flag                                         */
  T_BAT_path_info           path_info;                /*<  4:  8> path information                                   */
} T_BAT_file_info;
#endif

#ifndef __T_BAT_res_uns_percent_simef__
#define __T_BAT_res_uns_percent_simef__
/*
 * The unsolicited result code structure of the %SIMEF command.
 * CCDGEN:WriteStruct_Count==2826
 */
typedef struct
{
  U8                        _align0;                  /*<  0:  1> alignment                                          */
  U8                        _align1;                  /*<  1:  1> alignment                                          */
  U8                        _align2;                  /*<  2:  1> alignment                                          */
  U8                        c_ef;                     /*<  3:  1> counter                                            */
  T_BAT_file_info           ef[BAT_MAX_SIMEF_EF_LEN]; /*<  4:768> File Information for FILE UPDATE                   */
} T_BAT_res_uns_percent_simef;
#endif

#ifndef __T_BAT_res_uns_percent_simins__
#define __T_BAT_res_uns_percent_simins__
/*
 * The unsolicited result code structure of the %SIMINS command.
 * CCDGEN:WriteStruct_Count==2827
 */
typedef struct
{
  T_BAT_percent_simins_n    n;                        /*<  0:  4> (enum=32bit)<->T_BAT_percent_simins_n Result code  */
} T_BAT_res_uns_percent_simins;
#endif

#ifndef __T_BAT_res_uns_percent_simrem__
#define __T_BAT_res_uns_percent_simrem__
/*
 * The unsolicited result code structure of the %SIMREM command.
 * CCDGEN:WriteStruct_Count==2828
 */
typedef struct
{
  T_BAT_percent_simrem_m    m;                        /*<  0:  4> (enum=32bit)<->T_BAT_percent_simrem_m Type of SIM removal */
} T_BAT_res_uns_percent_simrem;
#endif

#ifndef __T_BAT_res_uns_percent_sncnt__
#define __T_BAT_res_uns_percent_sncnt__
/*
 * The unsolicited result code structure of the %SNCNT command.
 * CCDGEN:WriteStruct_Count==2829
 */
typedef struct
{
  T_BAT_pdp_cid             cid;                      /*<  0:  4> (enum=32bit)<->T_BAT_pdp_cid specifies a particular PDP context */
  U32                       oct_up;                   /*<  4:  4> Octets Uplink Count                                */
  U32                       oct_down;                 /*<  8:  4> Octets Downlink Count                              */
  U32                       pkt_up;                   /*< 12:  4> Packets Uplink Count                               */
  U32                       pkt_down;                 /*< 16:  4> Packets Downlink Count                             */
} T_BAT_res_uns_percent_sncnt;
#endif

#ifndef __T_BAT_cmd_set_percent_sncnt__
#define __T_BAT_cmd_set_percent_sncnt__
/*
 * The set command structure of the %SNCNT command.
 * CCDGEN:WriteStruct_Count==2830
 */
typedef struct
{
  T_BAT_percent_sncnt_rst   rst;                      /*<  0:  4> (enum=32bit)<->T_BAT_percent_sncnt_rst Reset the SNDCP Counter */
} T_BAT_cmd_set_percent_sncnt;
#endif

#ifndef __T_BAT_cmd_set_percent_vts__
#define __T_BAT_cmd_set_percent_vts__
/*
 * The set command structure of the %VTS command.
 * CCDGEN:WriteStruct_Count==2831
 */
typedef struct
{
  T_BAT_dtmf                dtmf;                     /*<  0:  4> (enum=32bit)<->T_BAT_dtmf DTMF character           */
  T_BAT_percent_vts_mode    mode;                     /*<  4:  4> (enum=32bit)<->T_BAT_percent_vts_mode DTMF Mode    */
} T_BAT_cmd_set_percent_vts;
#endif

#ifndef __T_BAT_cmd_set_plus_vts__
#define __T_BAT_cmd_set_plus_vts__
/*
 * The set command structure of the +VTS command.
 * CCDGEN:WriteStruct_Count==2832
 */
typedef struct
{
  T_BAT_dtmf                dtmf;                     /*<  0:  4> (enum=32bit)<->T_BAT_dtmf DTMF character           */
} T_BAT_cmd_set_plus_vts;
#endif

#ifndef __T_BAT_res_que_plus_ws46__
#define __T_BAT_res_que_plus_ws46__
/*
 * The query answer structure of the +WS46 command.
 * CCDGEN:WriteStruct_Count==2833
 */
typedef struct
{
  T_BAT_plus_ws46_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_ws46_n Wireless Network Mode */
} T_BAT_res_que_plus_ws46;
#endif

#ifndef __T_BAT_cmd_set_plus_ws46__
#define __T_BAT_cmd_set_plus_ws46__
/*
 * The set command structure of the +WS46 command.
 * CCDGEN:WriteStruct_Count==2834
 */
typedef struct
{
  T_BAT_plus_ws46_n         n;                        /*<  0:  4> (enum=32bit)<->T_BAT_plus_ws46_n Wireless Network Mode */
} T_BAT_cmd_set_plus_ws46;
#endif

#ifndef __T_BAT_custom__
#define __T_BAT_custom__
/*
 * for sending / receiving of customer AT command / response
 * CCDGEN:WriteStruct_Count==2835
 */
typedef struct
{
  U16                       c_buf;                    /*<  0:  2> counter                                            */
  U8                        buf[BAT_MAX_CUSTOM_CMD_LEN]; /*<  2:290> customer command / response                        */
} T_BAT_custom;
#endif

#ifndef __T_BAT_cmd_set_percent_ctzv__
#define __T_BAT_cmd_set_percent_ctzv__
/*
 * The set command structure of the %CTZV command
 * CCDGEN:WriteStruct_Count==2836
 */
typedef struct
{
  T_BAT_percent_ctzv_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_ctzv_mode %CTZV command (time and date report) */
} T_BAT_cmd_set_percent_ctzv;
#endif

#ifndef __T_BAT_cmd_set_percent_cuscfg__
#define __T_BAT_cmd_set_percent_cuscfg__
/*
 * The set command structure of the %CUSCFG command
 * CCDGEN:WriteStruct_Count==2837
 */
typedef struct
{
  U8                        c_Facility;               /*<  0:  1> counter                                            */
  U8                        Facility[BAT_MAX_CUSCFG_FAC_STR_LEN]; /*<  1: 20> Element for %CUSCFG command                        */
  U8                        _align0;                  /*< 21:  1> alignment                                          */
  U8                        _align1;                  /*< 22:  1> alignment                                          */
  U8                        _align2;                  /*< 23:  1> alignment                                          */
  T_BAT_percent_cuscfg_mod  Mode;                     /*< 24:  4> (enum=32bit)<->T_BAT_percent_cuscfg_mod Element for %CUSCFG command */
  U8                        v_Value;                  /*< 28:  1> valid-flag                                         */
  U8                        c_Value;                  /*< 29:  1> counter                                            */
  U8                        Value[BAT_MAX_CUSCFG_VALUE_LEN]; /*< 30: 20> Element for %CUSCFG command                        */
  U8                        _align3;                  /*< 50:  1> alignment                                          */
  U8                        _align4;                  /*< 51:  1> alignment                                          */
} T_BAT_cmd_set_percent_cuscfg;
#endif

#ifndef __T_BAT_res_percent_cuscfg__
#define __T_BAT_res_percent_cuscfg__
/*
 * Structure of response for %CUSCFG command
 * CCDGEN:WriteStruct_Count==2838
 */
typedef struct
{
  T_BAT_percent_cuscfg_stat cuscfg_stat;              /*<  0:  4> (enum=32bit)<->T_BAT_percent_cuscfg_stat Element for %CUSCFG command */
} T_BAT_res_percent_cuscfg;
#endif

#ifndef __T_BAT_cmd_set_percent_cniv__
#define __T_BAT_cmd_set_percent_cniv__
/*
 * The set command structure of the %CNIV command
 * CCDGEN:WriteStruct_Count==2839
 */
typedef struct
{
  T_BAT_percent_cniv_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cniv_mode %CNIV command (nertwork name report) */
} T_BAT_cmd_set_percent_cniv;
#endif

#ifndef __T_BAT_res_uns_percent_cniv__
#define __T_BAT_res_uns_percent_cniv__
/*
 * The unsolicited result code structure of the %CNIV command.
 * CCDGEN:WriteStruct_Count==2840
 */
typedef struct
{
  U8                        v_long_oper;              /*<  0:  1> valid-flag                                         */
  U8                        c_long_oper;              /*<  1:  1> counter                                            */
  U8                        long_oper[BAT_MAX_CNIV_LONG_OPER]; /*<  2: 40> Operator name in long alphanumeric format          */
  U8                        v_short_oper;             /*< 42:  1> valid-flag                                         */
  U8                        c_short_oper;             /*< 43:  1> counter                                            */
  U8                        short_oper[BAT_MAX_CNIV_SHORT_OPER]; /*< 44: 40> Operator name in short alphanumeric format         */
  U8                        v_num_oper;               /*< 84:  1> valid-flag                                         */
  U8                        c_num_oper;               /*< 85:  1> counter                                            */
  U8                        num_oper[BAT_MAX_CNIV_NUM_OPER_LEN]; /*< 86:  7> Operator name in numeric format                    */
  U8                        dcs_short_oper;           /*< 93:  1> DCS of short oper name                             */
  U8                        dcs_long_oper;            /*< 94:  1> DCS of long oper name                              */
  U8                        add_ci;                   /*< 95:  1> add country initials                               */
} T_BAT_res_uns_percent_cniv;
#endif

#ifndef __T_BAT_res_que_percent_cniv__
#define __T_BAT_res_que_percent_cniv__
/*
 * The query answer structure of the %CNIV command.
 * CCDGEN:WriteStruct_Count==2841
 */
typedef struct
{
  T_BAT_percent_cniv_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_cniv_mode %CNIV command (nertwork name report) */
} T_BAT_res_que_percent_cniv;
#endif

#ifndef __T_BAT_cmd_set_percent_pbci__
#define __T_BAT_cmd_set_percent_pbci__
/*
 * The set command structure of the %PBCI command
 * CCDGEN:WriteStruct_Count==2842
 */
typedef struct
{
  T_BAT_percent_pbci_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_pbci_mode %PBCI command (phonebook change indication report) */
} T_BAT_cmd_set_percent_pbci;
#endif

#ifndef __T_BAT_params__
#define __T_BAT_params__
/*
 * Structured Element
 * CCDGEN:WriteStruct_Count==2843
 */
typedef union
{
  T_BAT_cmd_set_percent_als *ptr_set_percent_als;     /*<  0:  4> pointer to The set command structure of the %ALS command. */
  T_BAT_cmd_set_percent_band *ptr_set_percent_band;   /*<  0:  4> pointer to The set command structure of the %BAND command. */
  T_BAT_cmd_andc            *ptr_andc;                /*<  0:  4> pointer to The set command structure of the &C command. */
  T_BAT_cmd_set_plus_cacm   *ptr_set_plus_cacm;       /*<  0:  4> pointer to The set command structure of the +CACM command. */
  T_BAT_cmd_set_plus_camm   *ptr_set_plus_camm;       /*<  0:  4> pointer to The set command structure of the +CAMM command. */
  T_BAT_cmd_set_plus_caoc   *ptr_set_plus_caoc;       /*<  0:  4> pointer to The set command structure of the +CAOC command. */
  T_BAT_cmd_set_percent_cbhz *ptr_set_percent_cbhz;   /*<  0:  4> pointer to The set command structure of the %CBHZ command. */
  T_BAT_cmd_set_plus_cbst   *ptr_set_plus_cbst;       /*<  0:  4> pointer to The set command structure of the +CBST command. */
  T_BAT_cmd_set_percent_ccbs *ptr_set_percent_ccbs;   /*<  0:  4> pointer to The set command structure of the %CCBS command. */
  T_BAT_cmd_set_plus_ccfc   *ptr_set_plus_ccfc;       /*<  0:  4> pointer to The set command structure of the +CCFC command. */
  T_BAT_cmd_set_plus_cclk   *ptr_set_plus_cclk;       /*<  0:  4> pointer to The set command structure of the +CCLK command. */
  T_BAT_cmd_set_plus_ccug   *ptr_set_plus_ccug;       /*<  0:  4> pointer to The set command structure of the +CCUG command. */
  T_BAT_cmd_set_plus_ccwa   *ptr_set_plus_ccwa;       /*<  0:  4> pointer to The set command structure of the +CCWA command. */
  T_BAT_cmd_set_plus_ccwa_w *ptr_set_plus_ccwa_w;     /*<  0:  4> pointer to The set command structure of the +CCWA_W command. */
  T_BAT_cmd_set_plus_cfun   *ptr_set_plus_cfun;       /*<  0:  4> pointer to The set command structure of the +CFUN command. */
  T_BAT_cmd_set_percent_cgaatt *ptr_set_percent_cgaatt; /*<  0:  4> pointer to The set command structure of the %CGAATT command. */
  T_BAT_cmd_set_plus_cgact  *ptr_set_plus_cgact;      /*<  0:  4> pointer to The set command structure of the +CGACT command. */
  T_BAT_cmd_set_plus_cgans  *ptr_set_plus_cgans;      /*<  0:  4> pointer to The set command structure of the +CGANS command. */
  T_BAT_cmd_set_plus_cgatt  *ptr_set_plus_cgatt;      /*<  0:  4> pointer to The set command structure of the +CGATT command. */
  T_BAT_cmd_set_percent_cgclass *ptr_set_percent_cgclass; /*<  0:  4> pointer to The set command structure of the %CGCLASS command. */
  T_BAT_cmd_set_plus_cgclass *ptr_set_plus_cgclass;   /*<  0:  4> pointer to The set command structure of the +CGCLASS command. */
  T_BAT_cmd_set_plus_cgdata *ptr_set_plus_cgdata;     /*<  0:  4> pointer to The set command structure of the +CGDATA command. */
  T_BAT_cmd_set_plus_cgdcont *ptr_set_plus_cgdcont;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command. */
  T_BAT_cmd_set_percent_cgmm *ptr_set_percent_cgmm;   /*<  0:  4> pointer to The set command structure of the %CGMM command. */
  T_BAT_cmd_set_plus_cgpaddr *ptr_set_plus_cgpaddr;   /*<  0:  4> pointer to The set command structure of the +CGPADDR command. */
  T_BAT_cmd_set_percent_cgpco *ptr_set_percent_cgpco; /*<  0:  4> pointer to The set command structure of the %CGPCO command. */
  T_BAT_cmd_set_percent_cgppp *ptr_set_percent_cgppp; /*<  0:  4> pointer to The set command structure of the %CGPPP command. */
  T_BAT_cmd_set_plus_cgqmin *ptr_set_plus_cgqmin;     /*<  0:  4> pointer to The set command structure of the +CGQMIN command. */
  T_BAT_cmd_set_plus_cgqreq *ptr_set_plus_cgqreq;     /*<  0:  4> pointer to The set command structure of the +CGQREQ command. */
  T_BAT_cmd_set_plus_cgsms  *ptr_set_plus_cgsms;      /*<  0:  4> pointer to The set command structure of the +CGSMS command. */
  T_BAT_cmd_set_percent_chld *ptr_set_percent_chld;   /*<  0:  4> pointer to The set command structure of the %CHLD command. */
  T_BAT_cmd_set_percent_chpl *ptr_set_percent_chpl;   /*<  0:  4> pointer to The set command structure of the %CHPL command. */
  T_BAT_cmd_set_percent_chpl_w *ptr_set_percent_chpl_w; /*<  0:  4> pointer to The set command structure of the %CHPL_W command. */
  T_BAT_cmd_set_plus_cind   *ptr_set_plus_cind;       /*<  0:  4> pointer to The set command structure of the +CIND command. */
  T_BAT_cmd_set_plus_clan   *ptr_set_plus_clan;       /*<  0:  4> pointer to The set command structure of the +CLAN command. */
  T_BAT_cmd_set_plus_clck   *ptr_set_plus_clck;       /*<  0:  4> pointer to The set command structure of the +CLCK command. */
  T_BAT_cmd_set_plus_clir   *ptr_set_plus_clir;       /*<  0:  4> pointer to The set command structure of the +CLIR command. */
  T_BAT_cmd_set_plus_clvl   *ptr_set_plus_clvl;       /*<  0:  4> pointer to The set command structure of the +CLVL command. */
  T_BAT_cmd_set_plus_cmer   *ptr_set_plus_cmer;       /*<  0:  4> pointer to The set command structure of the +CMER command. */
  T_BAT_cmd_set_plus_cmgc   *ptr_set_plus_cmgc;       /*<  0:  4> pointer to The set command structure of the +CMGC command. */
  T_BAT_cmd_set_plus_cmgd   *ptr_set_plus_cmgd;       /*<  0:  4> pointer to The set command structure of the +CMGD command. */
  T_BAT_cmd_set_plus_cmgl   *ptr_set_plus_cmgl;       /*<  0:  4> pointer to The set command structure of the +CMGL command. */
  T_BAT_cmd_set_plus_cmgl_w *ptr_set_plus_cmgl_w;     /*<  0:  4> pointer to The set command structure of the +CMGL_W command. */
  T_BAT_cmd_set_plus_cmgr   *ptr_set_plus_cmgr;       /*<  0:  4> pointer to The set command structure of the +CMGR command. */
  T_BAT_cmd_set_plus_cmgr_w *ptr_set_plus_cmgr_w;     /*<  0:  4> pointer to The set command structure of the +CMGR_W command. */
  T_BAT_cmd_set_plus_cmgs   *ptr_set_plus_cmgs;       /*<  0:  4> pointer to The set command structure of the +CMGS command. */
  T_BAT_cmd_set_plus_cmgw   *ptr_set_plus_cmgw;       /*<  0:  4> pointer to The set command structure of the +CMGW command. */
  T_BAT_cmd_set_plus_cmod   *ptr_set_plus_cmod;       /*<  0:  4> pointer to The set command structure of the +CMOD command. */
  T_BAT_cmd_set_plus_cmss   *ptr_set_plus_cmss;       /*<  0:  4> pointer to The set command structure of the +CMSS command. */
  T_BAT_cmd_set_plus_cmut   *ptr_set_plus_cmut;       /*<  0:  4> pointer to The set command structure of the +CMUT command. */
  T_BAT_cmd_set_plus_cmux   *ptr_set_plus_cmux;       /*<  0:  4> pointer to The set command structure of the +CMUX command. */
  T_BAT_cmd_set_plus_cnma   *ptr_set_plus_cnma;       /*<  0:  4> pointer to The set command structure of the +CNMA command. */
  T_BAT_cmd_set_plus_cnmi   *ptr_set_plus_cnmi;       /*<  0:  4> pointer to The set command structure of the +CNMI command. */
  T_BAT_cmd_set_percent_cops *ptr_set_percent_cops;   /*<  0:  4> pointer to The set command structure of the %COPS command. */
  T_BAT_cmd_set_plus_cops   *ptr_set_plus_cops;       /*<  0:  4> pointer to The set command structure of the +COPS command. */
  T_BAT_cmd_set_percent_cops_w *ptr_set_percent_cops_w; /*<  0:  4> pointer to The set command structure of the %COPS_W command. */
  T_BAT_cmd_set_percent_cpals *ptr_set_percent_cpals; /*<  0:  4> pointer to The set command structure of the %CPALS command. */
  T_BAT_cmd_set_percent_cpals_w *ptr_set_percent_cpals_w; /*<  0:  4> pointer to The set command structure of the %CPALS_W command. */
  T_BAT_cmd_set_plus_cpbf   *ptr_set_plus_cpbf;       /*<  0:  4> pointer to The set command structure of the +CPBF command. */
  T_BAT_cmd_set_plus_cpbf_w *ptr_set_plus_cpbf_w;     /*<  0:  4> pointer to The set command structure of the +CPBF_W command. */
  T_BAT_cmd_set_plus_cpbr   *ptr_set_plus_cpbr;       /*<  0:  4> pointer to The set command structure of the +CPBR command. */
  T_BAT_cmd_set_plus_cpbr_w *ptr_set_plus_cpbr_w;     /*<  0:  4> pointer to The set command structure of the +CPBR_W command. */
  T_BAT_cmd_set_plus_cpbs   *ptr_set_plus_cpbs;       /*<  0:  4> pointer to The set command structure of the +CPBS command. */
  T_BAT_cmd_set_plus_cpbw   *ptr_set_plus_cpbw;       /*<  0:  4> pointer to The set command structure of the +CPBW command. */
  T_BAT_cmd_set_plus_cpbw_w *ptr_set_plus_cpbw_w;     /*<  0:  4> pointer to The set command structure of the +CPBW_W command. */
  T_BAT_cmd_set_percent_cpcfu *ptr_set_percent_cpcfu; /*<  0:  4> pointer to The set command structure of the %CPCFU command. */
  T_BAT_cmd_set_percent_cphs *ptr_set_percent_cphs;   /*<  0:  4> pointer to The set command structure of the %CPHS command. */
  T_BAT_cmd_set_plus_cpin   *ptr_set_plus_cpin;       /*<  0:  4> pointer to The set command structure of the +CPIN command. */
  T_BAT_cmd_set_percent_cpmb *ptr_set_percent_cpmb;   /*<  0:  4> pointer to The set command structure of the %CPMB command. */
  T_BAT_cmd_set_percent_cpmbw *ptr_set_percent_cpmbw; /*<  0:  4> pointer to The set command structure of the %CPMBW command. */
  T_BAT_cmd_set_percent_cpmbw_w *ptr_set_percent_cpmbw_w; /*<  0:  4> pointer to The set command structure of the %CPMBW_W command. */
  T_BAT_cmd_set_percent_cpmb_w *ptr_set_percent_cpmb_w; /*<  0:  4> pointer to The set command structure of the %CPMB_W command. */
  T_BAT_cmd_set_plus_cpms   *ptr_set_plus_cpms;       /*<  0:  4> pointer to The set command structure of the +CPMS command. */
  T_BAT_cmd_set_percent_cpnums *ptr_set_percent_cpnums; /*<  0:  4> pointer to The set command structure of the %CPNUMS command. */
  T_BAT_cmd_set_percent_cpnums_w *ptr_set_percent_cpnums_w; /*<  0:  4> pointer to The set command structure of the %CPNUMS_W command. */
  T_BAT_cmd_set_plus_cpol   *ptr_set_plus_cpol;       /*<  0:  4> pointer to The set command structure of the +CPOL command. */
  T_BAT_cmd_set_plus_cpol_w *ptr_set_plus_cpol_w;     /*<  0:  4> pointer to The set command structure of the +CPOL_W command. */
  T_BAT_cmd_set_percent_cprsm *ptr_set_percent_cprsm; /*<  0:  4> pointer to The set command structure of the %CPRSM command. */
  T_BAT_cmd_set_plus_cpuc   *ptr_set_plus_cpuc;       /*<  0:  4> pointer to The set command structure of the +CPUC command. */
  T_BAT_cmd_set_plus_cpuc_w *ptr_set_plus_cpuc_w;     /*<  0:  4> pointer to The set command structure of the +CPUC_W command. */
  T_BAT_cmd_set_percent_cpvwi *ptr_set_percent_cpvwi; /*<  0:  4> pointer to The set command structure of the %CPVWI command. */
  T_BAT_cmd_set_plus_cpwd   *ptr_set_plus_cpwd;       /*<  0:  4> pointer to The set command structure of the +CPWD command. */
  T_BAT_cmd_set_plus_cres   *ptr_set_plus_cres;       /*<  0:  4> pointer to The set command structure of the +CRES command. */
  T_BAT_cmd_set_plus_crlp   *ptr_set_plus_crlp;       /*<  0:  4> pointer to The set command structure of the +CRLP command. */
  T_BAT_cmd_set_plus_crsm   *ptr_set_plus_crsm;       /*<  0:  4> pointer to The set command structure of the +CRSM command. */
  T_BAT_cmd_set_plus_csas   *ptr_set_plus_csas;       /*<  0:  4> pointer to The set command structure of the +CSAS command. */
  T_BAT_cmd_set_plus_csca   *ptr_set_plus_csca;       /*<  0:  4> pointer to The set command structure of the +CSCA command. */
  T_BAT_cmd_set_plus_cscb   *ptr_set_plus_cscb;       /*<  0:  4> pointer to The set command structure of the +CSCB command. */
  T_BAT_cmd_set_plus_cscs   *ptr_set_plus_cscs;       /*<  0:  4> pointer to The set command structure of the +CSCS command. */
  T_BAT_cmd_set_plus_csim   *ptr_set_plus_csim;       /*<  0:  4> pointer to The set command structure of the +CSIM command. */
  T_BAT_cmd_set_plus_csms   *ptr_set_plus_csms;       /*<  0:  4> pointer to The set command structure of the +CSMS command. */
  T_BAT_cmd_set_plus_csns   *ptr_set_plus_csns;       /*<  0:  4> pointer to The set command structure of the +CSNS command. */
  T_BAT_cmd_set_plus_csta   *ptr_set_plus_csta;       /*<  0:  4> pointer to The set command structure of the +CSTA command. */
  T_BAT_cmd_set_plus_csvm   *ptr_set_plus_csvm;       /*<  0:  4> pointer to The set command structure of the +CSVM command. */
  T_BAT_cmd_set_plus_ctfr   *ptr_set_plus_ctfr;       /*<  0:  4> pointer to The set command structure of the +CTFR command. */
  T_BAT_cmd_set_percent_ctty *ptr_set_percent_ctty;   /*<  0:  4> pointer to The set command structure of the %CTTY command. */
  T_BAT_cmd_set_plus_ctzu   *ptr_set_plus_ctzu;       /*<  0:  4> pointer to The set command structure of the +CTZU command. */
  T_BAT_cmd_set_plus_cusd   *ptr_set_plus_cusd;       /*<  0:  4> pointer to The set command structure of the +CUSD command. */
  T_BAT_cmd_set_plus_cusd_w *ptr_set_plus_cusd_w;     /*<  0:  4> pointer to The set command structure of the +CUSD_W command. */
  T_BAT_cmd_set_percent_cust *ptr_set_percent_cust;   /*<  0:  4> pointer to The set command structure of the %CUST command. */
  T_BAT_cmd_set_percent_cwup *ptr_set_percent_cwup;   /*<  0:  4> pointer to The set command structure of the %CWUP command. */
  T_BAT_cmd_at_d            *ptr_at_d;                /*<  0:  4> pointer to The set command structure of the D command. */
  T_BAT_cmd_set_percent_data *ptr_set_percent_data;   /*<  0:  4> pointer to The set command structure of the %DATA command. */
  T_BAT_cmd_set_percent_dinf *ptr_set_percent_dinf;   /*<  0:  4> pointer to The set command structure of the %DINF command. */
  T_BAT_cmd_set_plus_ds     *ptr_set_plus_ds;         /*<  0:  4> pointer to The set command structure of the +DS command. */
  T_BAT_cmd_at_d_w          *ptr_at_d_w;              /*<  0:  4> pointer to The set command structure of the D_W command. */
  T_BAT_cmd_set_percent_efrslt *ptr_set_percent_efrslt; /*<  0:  4> pointer to The set command structure of the %EFRSLT command. */
  T_BAT_cmd_set_percent_em  *ptr_set_percent_em;      /*<  0:  4> pointer to The set command structure of the %EM command. */
  T_BAT_cmd_set_plus_fap    *ptr_set_plus_fap;        /*<  0:  4> pointer to The set command structure of the +FAP command. */
  T_BAT_cmd_set_plus_fbo    *ptr_set_plus_fbo;        /*<  0:  4> pointer to The set command structure of the +FBO command. */
  T_BAT_cmd_set_plus_fbu    *ptr_set_plus_fbu;        /*<  0:  4> pointer to The set command structure of the +FBU command. */
  T_BAT_cmd_set_plus_fcc    *ptr_set_plus_fcc;        /*<  0:  4> pointer to The set command structure of the +FCC command. */
  T_BAT_cmd_set_plus_fclass *ptr_set_plus_fclass;     /*<  0:  4> pointer to The set command structure of the +FCLASS command. */
  T_BAT_cmd_set_plus_fcq    *ptr_set_plus_fcq;        /*<  0:  4> pointer to The set command structure of the +FCQ command. */
  T_BAT_cmd_set_plus_fcr    *ptr_set_plus_fcr;        /*<  0:  4> pointer to The set command structure of the +FCR command. */
  T_BAT_cmd_set_plus_fct    *ptr_set_plus_fct;        /*<  0:  4> pointer to The set command structure of the +FCT command. */
  T_BAT_cmd_set_plus_fea    *ptr_set_plus_fea;        /*<  0:  4> pointer to The set command structure of the +FEA command. */
  T_BAT_cmd_set_plus_ffc    *ptr_set_plus_ffc;        /*<  0:  4> pointer to The set command structure of the +FFC command. */
  T_BAT_cmd_set_plus_fie    *ptr_set_plus_fie;        /*<  0:  4> pointer to The set command structure of the +FIE command. */
  T_BAT_cmd_set_plus_fis    *ptr_set_plus_fis;        /*<  0:  4> pointer to The set command structure of the +FIS command. */
  T_BAT_cmd_set_plus_fit    *ptr_set_plus_fit;        /*<  0:  4> pointer to The set command structure of the +FIT command. */
  T_BAT_cmd_set_plus_fli    *ptr_set_plus_fli;        /*<  0:  4> pointer to The set command structure of the +FLI command. */
  T_BAT_cmd_set_plus_flo    *ptr_set_plus_flo;        /*<  0:  4> pointer to The set command structure of the +FLO command. */
  T_BAT_cmd_set_plus_flp    *ptr_set_plus_flp;        /*<  0:  4> pointer to The set command structure of the +FLP command. */
  T_BAT_cmd_set_plus_fms    *ptr_set_plus_fms;        /*<  0:  4> pointer to The set command structure of the +FMS command. */
  T_BAT_cmd_set_plus_fns    *ptr_set_plus_fns;        /*<  0:  4> pointer to The set command structure of the +FNS command. */
  T_BAT_cmd_set_plus_fpa    *ptr_set_plus_fpa;        /*<  0:  4> pointer to The set command structure of the +FPA command. */
  T_BAT_cmd_set_plus_fpi    *ptr_set_plus_fpi;        /*<  0:  4> pointer to The set command structure of the +FPI command. */
  T_BAT_cmd_set_plus_fps    *ptr_set_plus_fps;        /*<  0:  4> pointer to The set command structure of the +FPS command. */
  T_BAT_cmd_set_plus_fpw    *ptr_set_plus_fpw;        /*<  0:  4> pointer to The set command structure of the +FPW command. */
  T_BAT_cmd_set_plus_frq    *ptr_set_plus_frq;        /*<  0:  4> pointer to The set command structure of the +FRQ command. */
  T_BAT_cmd_set_plus_fsa    *ptr_set_plus_fsa;        /*<  0:  4> pointer to The set command structure of the +FSA command. */
  T_BAT_cmd_set_plus_fsp    *ptr_set_plus_fsp;        /*<  0:  4> pointer to The set command structure of the +FSP command. */
  T_BAT_cmd_set_plus_icf    *ptr_set_plus_icf;        /*<  0:  4> pointer to The set command structure of the +ICF command. */
  T_BAT_cmd_set_plus_ifc    *ptr_set_plus_ifc;        /*<  0:  4> pointer to The set command structure of the +IFC command. */
  T_BAT_cmd_set_plus_ipr    *ptr_set_plus_ipr;        /*<  0:  4> pointer to The set command structure of the +IPR command. */
  T_BAT_cmd_set_percent_pbcf *ptr_set_percent_pbcf;   /*<  0:  4> pointer to The set command structure of the %PBCF command. */
  T_BAT_cmd_set_percent_ppp *ptr_set_percent_ppp;     /*<  0:  4> pointer to The set command structure of the %PPP command. */
  T_BAT_cmd_set_percent_pvrf *ptr_set_percent_pvrf;   /*<  0:  4> pointer to The set command structure of the %PVRF command. */
  T_BAT_cmd_set_percent_rdl *ptr_set_percent_rdl;     /*<  0:  4> pointer to The set command structure of the %RDL command. */
  T_BAT_cmd_set_percent_rdlb *ptr_set_percent_rdlb;   /*<  0:  4> pointer to The set command structure of the %RDLB command. */
  T_BAT_cmd_set_percent_satc *ptr_set_percent_satc;   /*<  0:  4> pointer to The set command structure of the %SATC command. */
  T_BAT_cmd_set_percent_satcc *ptr_set_percent_satcc; /*<  0:  4> pointer to The set command structure of the %SATCC command. */
  T_BAT_cmd_set_percent_sate *ptr_set_percent_sate;   /*<  0:  4> pointer to The set command structure of the %SATE command. */
  T_BAT_cmd_set_percent_satr *ptr_set_percent_satr;   /*<  0:  4> pointer to The set command structure of the %SATR command. */
  T_BAT_cmd_set_percent_satt *ptr_set_percent_satt;   /*<  0:  4> pointer to The set command structure of the %SATT command. */
  T_BAT_cmd_set_percent_sncnt *ptr_set_percent_sncnt; /*<  0:  4> pointer to The set command structure of the %SNCNT command. */
  T_BAT_cmd_set_percent_vts *ptr_set_percent_vts;     /*<  0:  4> pointer to The set command structure of the %VTS command. */
  T_BAT_cmd_set_plus_vts    *ptr_set_plus_vts;        /*<  0:  4> pointer to The set command structure of the +VTS command. */
  T_BAT_cmd_set_plus_ws46   *ptr_set_plus_ws46;       /*<  0:  4> pointer to The set command structure of the +WS46 command. */
  T_BAT_cmd_set_percent_cpinf *ptr_set_percent_cpinf; /*<  0:  4> pointer to customer service profile                */
  T_BAT_cmd_set_percent_cmgr *ptr_set_percent_cmgr;   /*<  0:  4> pointer to The set command structure of the %CMGR command. */
  T_BAT_cmd_set_percent_cmgl *ptr_set_percent_cmgl;   /*<  0:  4> pointer to The set command structure of the %CMGL command. */
  T_BAT_cmd_set_percent_ctzv *ptr_set_percent_ctzv;   /*<  0:  4> pointer to The set command structure of the %CTZV command */
// ELEM-FF: TI_PS_FF_AT_CMD_P_ECC 
  T_BAT_cmd_set_percent_ecc *ptr_set_percent_ecc;     /*<  0:  4> pointer to The set command structure of %ECC command */
// ELEM-FF: SIM_PERS 
  T_BAT_cmd_set_percent_mepd *ptr_set_percent_mepd;   /*<  0:  4> pointer to The structure for %MEPD set comand      */
  T_BAT_cmd_set_percent_csq *ptr_set_percent_csq;     /*<  0:  4> pointer to Structure for %CSQ set command          */
  T_BAT_cmd_set_percent_cniv *ptr_set_percent_cniv;   /*<  0:  4> pointer to The set command structure of the %CNIV command */
// ELEM-FF: REL99 
  T_BAT_cmd_set_percent_cmgrs *ptr_set_percent_cmgrs; /*<  0:  4> pointer to The set command structure for %CMGRS    */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgcmod *ptr_set_plus_cgcmod;     /*<  0:  4> pointer to The set command structure of the +CGCMOD command. */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgdscont *ptr_set_plus_cgdscont; /*<  0:  4> pointer to The set command structure of the +CGDSCONT command. */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgeqreq *ptr_set_plus_cgeqreq;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgeqmin *ptr_set_plus_cgeqmin;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgeqneg *ptr_set_plus_cgeqneg;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_cmd_set_plus_cgtft  *ptr_set_plus_cgtft;      /*<  0:  4> pointer to The set command structure of the +CGTFT command. */
  T_BAT_cmd_set_percent_cuscfg *ptr_set_percent_cuscfg; /*<  0:  4> pointer to The set command structure of the %CUSCFG command */
  T_BAT_cmd_set_percent_pbci *ptr_set_percent_pbci;   /*<  0:  4> pointer to The set command structure of the %PBCI command */
  T_BAT_cmd_set_percent_simef *ptr_set_percent_simef; /*<  0:  4> pointer to The set command structure of the %SIMEF command. */
  T_BAT_no_parameter        *ptr_at_a;                /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cbc;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_ceer;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cimi;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cnum;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cnum_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cpas;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_csq;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_andf;                /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_at_h;                /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_at_o;                /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_at_z;                /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_als;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_als;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_atr;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_band;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_band;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cacm;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_camm;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cbhz;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cbhz;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cbst;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_ccbs;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cclk;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ccug;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cfun;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cgaatt;  /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgact;      /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgatt;      /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cgclass; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgclass;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgdcont;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cgpaddr;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cgppp;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgqmin;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgqreq;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cgreg;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgreg;      /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cgsms;      /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cind;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clan;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_clan;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clcc;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clip;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clip_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clir;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_clvl;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cmer;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cmod;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cmut;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cmux;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cnap;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cnmi;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_colp;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_colp_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cops;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cops;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cops;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cops;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cops_w;  /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cops_w;  /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpals;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpals_w; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbf;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbf_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbr;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbr_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpbs;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpbs;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbw;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpbw_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cphs;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpin;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpinf;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpmb;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cpmbw;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cpmbw_w; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpms;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cpnums;  /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_percent_cpnums_w; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpol;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpol;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpol_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cpol_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cpopn;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cprsm;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpuc;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cpuc_w;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_creg;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_cres;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_crlp;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_tst_plus_csas;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_csca;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cscb;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cscs;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_csms;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_csns;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_csq;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_csta;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_csvm;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_ctty;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ctzu;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cust;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_data;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ds;         /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fap;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fbo;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fbs;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fbu;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fcc;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fclass;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fcq;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fcr;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fcs;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fct;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fea;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ffc;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fhs;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fie;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fis;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fit;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fli;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_flo;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_flp;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fms;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fns;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fpa;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fpi;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fps;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fpw;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_frq;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fsa;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_fsp;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_icf;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ifc;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_imei;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ipr;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_pbcf;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_ppp;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_pvrf;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_rdl;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_rdlb;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_satc;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_satcc;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_sncnt;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_ws46;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_plus_cdip;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cgmi;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cgmm;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cgmr;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_cgsn;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_cniv;    /*<  0:  4> pointer to Dummy structure                         */
// ELEM-FF: REL99 
  T_BAT_no_parameter        *ptr_que_percent_cmgrs;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_pbci;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_que_percent_simef;   /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_set_plus_chup;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_custom              *ptr_custom;              /*<  0:  4> pointer to for sending / receiving of customer AT command / response */
} T_BAT_params;
#endif

#ifndef __T_BAT_cmd_send__
#define __T_BAT_cmd_send__
/*
 * Structure for sending BAT commands
 * CCDGEN:WriteStruct_Count==2844
 */
typedef struct
{
  T_BAT_ctrl_params         ctrl_params;              /*<  0:  4> (enum=32bit) controller for union                  */
  T_BAT_params              params;                   /*<  4:  4> Structured Element                                 */
} T_BAT_cmd_send;
#endif

#ifndef __T_BAT_res_que_percent_pbci__
#define __T_BAT_res_que_percent_pbci__
/*
 * The query answer structure of the %PBCI command.
 * CCDGEN:WriteStruct_Count==2845
 */
typedef struct
{
  T_BAT_percent_pbci_mode   mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_pbci_mode %PBCI command (phonebook change indication report) */
} T_BAT_res_que_percent_pbci;
#endif

#ifndef __T_BAT_res_que_percent_simef__
#define __T_BAT_res_que_percent_simef__
/*
 * The query answer structure of the %SIMEF command.
 * CCDGEN:WriteStruct_Count==2846
 */
typedef struct
{
  T_BAT_percent_simef_mode  mode;                     /*<  0:  4> (enum=32bit)<->T_BAT_percent_simef_mode Update Indication */
} T_BAT_res_que_percent_simef;
#endif

#ifndef __T_BAT_res_uns_percent_pbci__
#define __T_BAT_res_uns_percent_pbci__
/*
 * The unsolicited result code structure of the %PBCI command.
 * CCDGEN:WriteStruct_Count==2847
 */
typedef struct
{
  U16                       ef_id;                    /*<  0:  2> elementary file id                                 */
  U16                       rec_num;                  /*<  2:  2> record number                                      */
  T_BAT_percent_pbci_update_type update_type;         /*<  4:  4> (enum=32bit)<->T_BAT_percent_pbci_update_type type of operation in the elementary file */
} T_BAT_res_uns_percent_pbci;
#endif

#ifndef __T_BAT_response__
#define __T_BAT_response__
/*
 * Structured Element
 * CCDGEN:WriteStruct_Count==2848
 */
typedef union
{
  T_BAT_no_parameter        *ptr_at_ok;               /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_at_connect      *ptr_at_connect;          /*<  0:  4> pointer to The unsolicited result code structure of the CONNECT command. */
  T_BAT_no_parameter        *ptr_at_no_carrier_final; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_plus_cme_error  *ptr_plus_cme_error;      /*<  0:  4> pointer to The unsolicited result code structure of the +CME_ERROR command. */
  T_BAT_res_plus_cms_error  *ptr_plus_cms_error;      /*<  0:  4> pointer to The unsolicited result code structure of the +CMS_ERROR command. */
  T_BAT_no_parameter        *ptr_at_busy;             /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_at_channel_busy;     /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_at_no_answer;        /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_plus_ext_error  *ptr_plus_ext_error;      /*<  0:  4> pointer to The result code structure of the +EXT_ERROR command. */
  T_BAT_res_que_percent_als *ptr_que_percent_als;     /*<  0:  4> pointer to The query answer structure of the %ALS command. */
  T_BAT_res_tst_percent_als *ptr_tst_percent_als;     /*<  0:  4> pointer to The test answer structure of the %ALS command. */
  T_BAT_res_que_percent_atr *ptr_que_percent_atr;     /*<  0:  4> pointer to The query answer structure of the %ATR command. */
  T_BAT_res_que_percent_band *ptr_que_percent_band;   /*<  0:  4> pointer to The query answer structure of the %BAND command. */
  T_BAT_res_tst_percent_band *ptr_tst_percent_band;   /*<  0:  4> pointer to The test answer structure of the %BAND command. */
  T_BAT_res_que_plus_cacm   *ptr_que_plus_cacm;       /*<  0:  4> pointer to The query answer structure of the +CACM command. */
  T_BAT_res_que_plus_camm   *ptr_que_plus_camm;       /*<  0:  4> pointer to The query answer structure of the +CAMM command. */
  T_BAT_res_set_plus_caoc   *ptr_set_plus_caoc;       /*<  0:  4> pointer to The set response structure of the +CAOC command. */
  T_BAT_res_set_plus_cbc    *ptr_set_plus_cbc;        /*<  0:  4> pointer to The set response structure of the +CBC command. */
  T_BAT_res_que_percent_cbhz *ptr_que_percent_cbhz;   /*<  0:  4> pointer to The query answer structure of the %CBHZ command. */
  T_BAT_res_tst_percent_cbhz *ptr_tst_percent_cbhz;   /*<  0:  4> pointer to The test answer structure of the %CBHZ command. */
  T_BAT_res_que_plus_cbst   *ptr_que_plus_cbst;       /*<  0:  4> pointer to The query answer structure of the +CBST command. */
  T_BAT_res_que_percent_ccbs *ptr_que_percent_ccbs;   /*<  0:  4> pointer to The query answer structure of the %CCBS command. */
  T_BAT_res_set_plus_ccfc   *ptr_set_plus_ccfc;       /*<  0:  4> pointer to The set response structure of the +CCFC command. */
  T_BAT_res_que_plus_cclk   *ptr_que_plus_cclk;       /*<  0:  4> pointer to The query answer structure of the +CCLK command. */
  T_BAT_res_que_plus_ccug   *ptr_que_plus_ccug;       /*<  0:  4> pointer to The query answer structure of the +CCUG command. */
  T_BAT_res_set_plus_ccwa   *ptr_set_plus_ccwa;       /*<  0:  4> pointer to The set response structure of the +CCWA command. */
  T_BAT_res_set_plus_ccwa_w *ptr_set_plus_ccwa_w;     /*<  0:  4> pointer to The set response structure of the +CCWA_W command. */
  T_BAT_res_set_plus_ceer   *ptr_set_plus_ceer;       /*<  0:  4> pointer to The set response structure of the +CEER command. */
  T_BAT_res_que_plus_cfun   *ptr_que_plus_cfun;       /*<  0:  4> pointer to The query answer structure of the +CFUN command. */
  T_BAT_res_que_percent_cgaatt *ptr_que_percent_cgaatt; /*<  0:  4> pointer to The query answer structure of the %CGAATT command. */
  T_BAT_res_que_plus_cgact  *ptr_que_plus_cgact;      /*<  0:  4> pointer to The query answer structure of the +CGACT command. */
  T_BAT_res_que_plus_cgatt  *ptr_que_plus_cgatt;      /*<  0:  4> pointer to The query answer structure of the +CGATT command. */
  T_BAT_res_que_percent_cgclass *ptr_que_percent_cgclass; /*<  0:  4> pointer to The query answer structure of the %CGCLASS command. */
  T_BAT_res_que_plus_cgclass *ptr_que_plus_cgclass;   /*<  0:  4> pointer to The query answer structure of the +CGCLASS command. */
  T_BAT_res_que_plus_cgdcont *ptr_que_plus_cgdcont;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command. */
  T_BAT_res_set_plus_cgpaddr *ptr_set_plus_cgpaddr;   /*<  0:  4> pointer to The set response structure of the +CGPADDR command. */
  T_BAT_res_tst_plus_cgpaddr *ptr_tst_plus_cgpaddr;   /*<  0:  4> pointer to The test answer structure of the +CGPADDR command. */
  T_BAT_res_set_percent_cgpco *ptr_set_percent_cgpco; /*<  0:  4> pointer to The set response structure of the %CGPCO command. */
  T_BAT_res_que_percent_cgppp *ptr_que_percent_cgppp; /*<  0:  4> pointer to The query answer structure of the %CGPPP command. */
  T_BAT_res_que_plus_cgqmin *ptr_que_plus_cgqmin;     /*<  0:  4> pointer to The query answer structure of the +CGQMIN command. */
  T_BAT_res_que_plus_cgqreq *ptr_que_plus_cgqreq;     /*<  0:  4> pointer to The query answer structure of the +CGQREQ command. */
  T_BAT_res_que_percent_cgreg *ptr_que_percent_cgreg; /*<  0:  4> pointer to The query answer structure of the %CGREG command. */
  T_BAT_res_que_plus_cgreg  *ptr_que_plus_cgreg;      /*<  0:  4> pointer to The query answer structure of the +CGREG command. */
  T_BAT_res_que_plus_cgsms  *ptr_que_plus_cgsms;      /*<  0:  4> pointer to The query answer structure of the +CGSMS command. */
  T_BAT_res_set_percent_chpl *ptr_set_percent_chpl;   /*<  0:  4> pointer to The set response structure of the %CHPL command. */
  T_BAT_res_set_percent_chpl_w *ptr_set_percent_chpl_w; /*<  0:  4> pointer to The set response structure of the %CHPL_W command. */
  T_BAT_res_set_plus_cimi   *ptr_set_plus_cimi;       /*<  0:  4> pointer to The set response structure of the +CIMI command. */
  T_BAT_res_que_plus_cind   *ptr_que_plus_cind;       /*<  0:  4> pointer to The query answer structure of the +CIND command. */
  T_BAT_res_que_plus_clan   *ptr_que_plus_clan;       /*<  0:  4> pointer to The query answer structure of the +CLAN command. */
  T_BAT_res_tst_plus_clan   *ptr_tst_plus_clan;       /*<  0:  4> pointer to The test answer structure of the +CLAN command. */
  T_BAT_res_que_plus_clcc   *ptr_que_plus_clcc;       /*<  0:  4> pointer to The query answer structure of the +CLCC command. */
  T_BAT_res_set_plus_clck   *ptr_set_plus_clck;       /*<  0:  4> pointer to The set response structure of the +CLCK command. */
  T_BAT_res_que_plus_clip   *ptr_que_plus_clip;       /*<  0:  4> pointer to The query answer structure of the +CLIP command. */
  T_BAT_res_que_plus_clip_w *ptr_que_plus_clip_w;     /*<  0:  4> pointer to The query answer structure of the +CLIP_W command. */
  T_BAT_res_que_plus_clir   *ptr_que_plus_clir;       /*<  0:  4> pointer to The query answer structure of the +CLIR command. */
  T_BAT_no_parameter        *ptr_set_plus_clvl;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_que_plus_clvl   *ptr_que_plus_clvl;       /*<  0:  4> pointer to The query answer structure of the +CLVL command. */
  T_BAT_res_que_plus_cmer   *ptr_que_plus_cmer;       /*<  0:  4> pointer to The query answer structure of the +CMER command. */
  T_BAT_res_set_plus_cmgc   *ptr_set_plus_cmgc;       /*<  0:  4> pointer to The set response structure of the +CMGC command. */
  T_BAT_res_set_plus_cmgl   *ptr_set_plus_cmgl;       /*<  0:  4> pointer to The set response structure of the +CMGL command. */
  T_BAT_res_set_plus_cmgl_w *ptr_set_plus_cmgl_w;     /*<  0:  4> pointer to The set response structure of the +CMGL_W command. */
  T_BAT_res_set_plus_cmgr   *ptr_set_plus_cmgr;       /*<  0:  4> pointer to The set response structure of the +CMGR command. */
  T_BAT_res_set_plus_cmgr_w *ptr_set_plus_cmgr_w;     /*<  0:  4> pointer to The set response structure of the +CMGR_W command. */
  T_BAT_res_set_plus_cmgs   *ptr_set_plus_cmgs;       /*<  0:  4> pointer to The set response structure of the +CMGS command. */
  T_BAT_res_set_plus_cmgw   *ptr_set_plus_cmgw;       /*<  0:  4> pointer to The set response structure of the +CMGW command. */
  T_BAT_res_que_plus_cmod   *ptr_que_plus_cmod;       /*<  0:  4> pointer to The query answer structure of the +CMOD command. */
  T_BAT_res_que_plus_cmut   *ptr_que_plus_cmut;       /*<  0:  4> pointer to The query answer structure of the +CMUT command. */
  T_BAT_res_que_plus_cmux   *ptr_que_plus_cmux;       /*<  0:  4> pointer to The query answer structure of the +CMUX command. */
  T_BAT_res_que_percent_cnap *ptr_que_percent_cnap;   /*<  0:  4> pointer to The query answer structure of the %CNAP command. */
  T_BAT_res_que_plus_cnmi   *ptr_que_plus_cnmi;       /*<  0:  4> pointer to The query answer structure of the +CNMI command. */
  T_BAT_res_set_plus_cnum   *ptr_set_plus_cnum;       /*<  0:  4> pointer to The set response structure of the +CNUM command. */
  T_BAT_res_set_plus_cnum_w *ptr_set_plus_cnum_w;     /*<  0:  4> pointer to The set response structure of the +CNUM_W command. */
  T_BAT_res_que_plus_colp   *ptr_que_plus_colp;       /*<  0:  4> pointer to The query answer structure of the +COLP command. */
  T_BAT_res_que_plus_colp_w *ptr_que_plus_colp_w;     /*<  0:  4> pointer to The query answer structure of the +COLP_W command. */
  T_BAT_res_que_percent_cops *ptr_que_percent_cops;   /*<  0:  4> pointer to The query answer structure of the %COPS command. */
  T_BAT_res_tst_percent_cops *ptr_tst_percent_cops;   /*<  0:  4> pointer to The test answer structure of the %COPS command. */
  T_BAT_res_que_plus_cops   *ptr_que_plus_cops;       /*<  0:  4> pointer to The query answer structure of the +COPS command. */
  T_BAT_res_tst_plus_cops   *ptr_tst_plus_cops;       /*<  0:  4> pointer to The test answer structure of the +COPS command. */
  T_BAT_res_que_percent_cops_w *ptr_que_percent_cops_w; /*<  0:  4> pointer to The query answer structure of the %COPS_W command. */
  T_BAT_res_tst_percent_cops_w *ptr_tst_percent_cops_w; /*<  0:  4> pointer to The test answer structure of the %COPS_W command. */
  T_BAT_res_set_percent_cpals *ptr_set_percent_cpals; /*<  0:  4> pointer to The set response structure of the %CPALS command. */
  T_BAT_res_que_percent_cpals *ptr_que_percent_cpals; /*<  0:  4> pointer to The query answer structure of the %CPALS command. */
  T_BAT_res_set_percent_cpals_w *ptr_set_percent_cpals_w; /*<  0:  4> pointer to The set response structure of the %CPALS_W command. */
  T_BAT_res_que_percent_cpals_w *ptr_que_percent_cpals_w; /*<  0:  4> pointer to The query answer structure of the %CPALS_W command. */
  T_BAT_res_set_plus_cpas   *ptr_set_plus_cpas;       /*<  0:  4> pointer to The set response structure of the +CPAS command. */
  T_BAT_res_set_plus_cpbf   *ptr_set_plus_cpbf;       /*<  0:  4> pointer to The set response structure of the +CPBF command. */
  T_BAT_res_tst_plus_cpbf   *ptr_tst_plus_cpbf;       /*<  0:  4> pointer to The test answer structure of the +CPBF command. */
  T_BAT_res_set_plus_cpbf_w *ptr_set_plus_cpbf_w;     /*<  0:  4> pointer to The set response structure of the +CPBF_W command. */
  T_BAT_res_tst_plus_cpbf_w *ptr_tst_plus_cpbf_w;     /*<  0:  4> pointer to The test answer structure of the +CPBF_W command. */
  T_BAT_res_set_plus_cpbr   *ptr_set_plus_cpbr;       /*<  0:  4> pointer to The set response structure of the +CPBR command. */
  T_BAT_res_tst_plus_cpbr   *ptr_tst_plus_cpbr;       /*<  0:  4> pointer to The test answer structure of the +CPBR command. */
  T_BAT_res_set_plus_cpbr_w *ptr_set_plus_cpbr_w;     /*<  0:  4> pointer to The set response structure of the +CPBR_W command. */
  T_BAT_res_tst_plus_cpbr_w *ptr_tst_plus_cpbr_w;     /*<  0:  4> pointer to The test answer structure of the +CPBR_W command. */
  T_BAT_res_que_percent_cpbs *ptr_que_percent_cpbs;   /*<  0:  4> pointer to The query answer structure of the %CPBS command. */
  T_BAT_res_que_plus_cpbs   *ptr_que_plus_cpbs;       /*<  0:  4> pointer to The query answer structure of the +CPBS command. */
  T_BAT_res_tst_plus_cpbw   *ptr_tst_plus_cpbw;       /*<  0:  4> pointer to The test answer structure of the +CPBW command. */
  T_BAT_res_tst_plus_cpbw_w *ptr_tst_plus_cpbw_w;     /*<  0:  4> pointer to The test answer structure of the +CPBW_W command. */
  T_BAT_res_set_percent_cpcfu *ptr_set_percent_cpcfu; /*<  0:  4> pointer to The set response structure of the %CPCFU command. */
  T_BAT_res_que_percent_cphs *ptr_que_percent_cphs;   /*<  0:  4> pointer to The query answer structure of the %CPHS command. */
  T_BAT_res_que_plus_cpin   *ptr_que_plus_cpin;       /*<  0:  4> pointer to The query answer structure of the +CPIN command. */
  T_BAT_res_que_percent_cpinf *ptr_que_percent_cpinf; /*<  0:  4> pointer to The query answer structure of the %CPINF command. */
  T_BAT_res_set_percent_cpmb *ptr_set_percent_cpmb;   /*<  0:  4> pointer to The set response structure of the %CPMB command. */
  T_BAT_res_que_percent_cpmb *ptr_que_percent_cpmb;   /*<  0:  4> pointer to The query answer structure of the %CPMB command. */
  T_BAT_res_tst_percent_cpmbw *ptr_tst_percent_cpmbw; /*<  0:  4> pointer to The test answer structure of the %CPMBW command. */
  T_BAT_res_tst_percent_cpmbw_w *ptr_tst_percent_cpmbw_w; /*<  0:  4> pointer to The test answer structure of the %CPMBW_W command. */
  T_BAT_res_set_percent_cpmb_w *ptr_set_percent_cpmb_w; /*<  0:  4> pointer to The set response structure of the %CPMB_W command. */
  T_BAT_res_set_plus_cpms   *ptr_set_plus_cpms;       /*<  0:  4> pointer to The set response structure of the +CPMS command. */
  T_BAT_res_que_plus_cpms   *ptr_que_plus_cpms;       /*<  0:  4> pointer to The query answer structure of the +CPMS command. */
  T_BAT_res_set_percent_cpnums *ptr_set_percent_cpnums; /*<  0:  4> pointer to The set response structure of the %CPNUMS command. */
  T_BAT_res_tst_percent_cpnums *ptr_tst_percent_cpnums; /*<  0:  4> pointer to The test answer structure of the %CPNUMS command. */
  T_BAT_res_set_percent_cpnums_w *ptr_set_percent_cpnums_w; /*<  0:  4> pointer to The set response structure of the %CPNUMS_W command. */
  T_BAT_res_tst_percent_cpnums_w *ptr_tst_percent_cpnums_w; /*<  0:  4> pointer to The test answer structure of the %CPNUMS_W command. */
  T_BAT_res_que_plus_cpol   *ptr_que_plus_cpol;       /*<  0:  4> pointer to The query answer structure of the +CPOL command. */
  T_BAT_res_tst_plus_cpol   *ptr_tst_plus_cpol;       /*<  0:  4> pointer to The test answer structure of the +CPOL command. */
  T_BAT_res_que_plus_cpol_w *ptr_que_plus_cpol_w;     /*<  0:  4> pointer to The query answer structure of the +CPOL_W command. */
  T_BAT_res_tst_plus_cpol_w *ptr_tst_plus_cpol_w;     /*<  0:  4> pointer to The test answer structure of the +CPOL_W command. */
  T_BAT_res_que_percent_cpopn *ptr_que_percent_cpopn; /*<  0:  4> pointer to The query answer structure of the %CPOPN command. */
  T_BAT_res_que_percent_cprsm *ptr_que_percent_cprsm; /*<  0:  4> pointer to The query answer structure of the %CPRSM command. */
  T_BAT_res_que_plus_cpuc   *ptr_que_plus_cpuc;       /*<  0:  4> pointer to The query answer structure of the +CPUC command. */
  T_BAT_res_que_plus_cpuc_w *ptr_que_plus_cpuc_w;     /*<  0:  4> pointer to The query answer structure of the +CPUC_W command. */
  T_BAT_res_set_percent_cpvwi *ptr_set_percent_cpvwi; /*<  0:  4> pointer to The set response structure of the %CPVWI command. */
  T_BAT_res_que_percent_creg *ptr_que_percent_creg;   /*<  0:  4> pointer to The query answer structure of the %CREG command. */
  T_BAT_res_tst_plus_cres   *ptr_tst_plus_cres;       /*<  0:  4> pointer to The test answer structure of the +CRES command. */
  T_BAT_res_que_plus_crlp   *ptr_que_plus_crlp;       /*<  0:  4> pointer to The query answer structure of the +CRLP command. */
  T_BAT_res_set_plus_crsm   *ptr_set_plus_crsm;       /*<  0:  4> pointer to The set response structure of the +CRSM command. */
  T_BAT_res_tst_plus_csas   *ptr_tst_plus_csas;       /*<  0:  4> pointer to The test answer structure of the +CSAS command. */
  T_BAT_res_que_plus_csca   *ptr_que_plus_csca;       /*<  0:  4> pointer to The query answer structure of the +CSCA command. */
  T_BAT_res_que_plus_cscb   *ptr_que_plus_cscb;       /*<  0:  4> pointer to The query answer structure of the +CSCB command. */
  T_BAT_res_que_plus_cscs   *ptr_que_plus_cscs;       /*<  0:  4> pointer to The query answer structure of the +CSCS command. */
  T_BAT_res_set_plus_csim   *ptr_set_plus_csim;       /*<  0:  4> pointer to The set response structure of the +CSIM command. */
  T_BAT_res_que_plus_csms   *ptr_que_plus_csms;       /*<  0:  4> pointer to The query answer structure of the +CSMS command. */
  T_BAT_res_que_plus_csns   *ptr_que_plus_csns;       /*<  0:  4> pointer to The query answer structure of the +CSNS command. */
  T_BAT_res_que_percent_csq *ptr_que_percent_csq;     /*<  0:  4> pointer to The query answer structure of the %CSQ command. */
  T_BAT_res_set_plus_csq    *ptr_set_plus_csq;        /*<  0:  4> pointer to The set response structure of the +CSQ command. */
  T_BAT_res_que_plus_csta   *ptr_que_plus_csta;       /*<  0:  4> pointer to The query answer structure of the +CSTA command. */
  T_BAT_res_que_plus_csvm   *ptr_que_plus_csvm;       /*<  0:  4> pointer to The query answer structure of the +CSVM command. */
  T_BAT_res_que_percent_ctty *ptr_que_percent_ctty;   /*<  0:  4> pointer to The query answer structure of the %CTTY command. */
  T_BAT_res_que_plus_ctzu   *ptr_que_plus_ctzu;       /*<  0:  4> pointer to The query answer structure of the +CTZU command. */
  T_BAT_res_que_percent_cust *ptr_que_percent_cust;   /*<  0:  4> pointer to The query answer structure of the %CUST command. */
  T_BAT_res_que_percent_data *ptr_que_percent_data;   /*<  0:  4> pointer to The query answer structure of the %DATA command. */
  T_BAT_res_set_percent_dinf *ptr_set_percent_dinf;   /*<  0:  4> pointer to The set response structure of the %DINF command. */
  T_BAT_res_que_plus_ds     *ptr_que_plus_ds;         /*<  0:  4> pointer to The query answer structure of the +DS command. */
  T_BAT_res_que_plus_fap    *ptr_que_plus_fap;        /*<  0:  4> pointer to The query answer structure of the +FAP command. */
  T_BAT_res_que_plus_fbo    *ptr_que_plus_fbo;        /*<  0:  4> pointer to The query answer structure of the +FBO command. */
  T_BAT_res_que_plus_fbs    *ptr_que_plus_fbs;        /*<  0:  4> pointer to The query answer structure of the +FBS command. */
  T_BAT_res_que_plus_fbu    *ptr_que_plus_fbu;        /*<  0:  4> pointer to The query answer structure of the +FBU command. */
  T_BAT_res_que_plus_fcc    *ptr_que_plus_fcc;        /*<  0:  4> pointer to The query answer structure of the +FCC command. */
  T_BAT_res_que_plus_fclass *ptr_que_plus_fclass;     /*<  0:  4> pointer to The query answer structure of the +FCLASS command. */
  T_BAT_res_que_plus_fcq    *ptr_que_plus_fcq;        /*<  0:  4> pointer to The query answer structure of the +FCQ command. */
  T_BAT_res_que_plus_fcr    *ptr_que_plus_fcr;        /*<  0:  4> pointer to The query answer structure of the +FCR command. */
  T_BAT_res_que_plus_fcs    *ptr_que_plus_fcs;        /*<  0:  4> pointer to The query answer structure of the +FCS command. */
  T_BAT_res_que_plus_fct    *ptr_que_plus_fct;        /*<  0:  4> pointer to The query answer structure of the +FCT command. */
  T_BAT_res_que_plus_fea    *ptr_que_plus_fea;        /*<  0:  4> pointer to The query answer structure of the +FEA command. */
  T_BAT_res_que_plus_ffc    *ptr_que_plus_ffc;        /*<  0:  4> pointer to The query answer structure of the +FFC command. */
  T_BAT_res_que_plus_fhs    *ptr_que_plus_fhs;        /*<  0:  4> pointer to The query answer structure of the +FHS command. */
  T_BAT_res_que_plus_fie    *ptr_que_plus_fie;        /*<  0:  4> pointer to The query answer structure of the +FIE command. */
  T_BAT_res_que_plus_fis    *ptr_que_plus_fis;        /*<  0:  4> pointer to The query answer structure of the +FIS command. */
  T_BAT_res_que_plus_fit    *ptr_que_plus_fit;        /*<  0:  4> pointer to The query answer structure of the +FIT command. */
  T_BAT_res_que_plus_fli    *ptr_que_plus_fli;        /*<  0:  4> pointer to The query answer structure of the +FLI command. */
  T_BAT_res_que_plus_flo    *ptr_que_plus_flo;        /*<  0:  4> pointer to The query answer structure of the +FLO command. */
  T_BAT_res_que_plus_flp    *ptr_que_plus_flp;        /*<  0:  4> pointer to The query answer structure of the +FLP command. */
  T_BAT_res_que_plus_fms    *ptr_que_plus_fms;        /*<  0:  4> pointer to The query answer structure of the +FMS command. */
  T_BAT_res_que_plus_fns    *ptr_que_plus_fns;        /*<  0:  4> pointer to The query answer structure of the +FNS command. */
  T_BAT_res_que_plus_fpa    *ptr_que_plus_fpa;        /*<  0:  4> pointer to The query answer structure of the +FPA command. */
  T_BAT_res_que_plus_fpi    *ptr_que_plus_fpi;        /*<  0:  4> pointer to The query answer structure of the +FPI command. */
  T_BAT_res_que_plus_fps    *ptr_que_plus_fps;        /*<  0:  4> pointer to The query answer structure of the +FPS command. */
  T_BAT_res_que_plus_fpw    *ptr_que_plus_fpw;        /*<  0:  4> pointer to The query answer structure of the +FPW command. */
  T_BAT_res_que_plus_frq    *ptr_que_plus_frq;        /*<  0:  4> pointer to The query answer structure of the +FRQ command. */
  T_BAT_res_que_plus_fsa    *ptr_que_plus_fsa;        /*<  0:  4> pointer to The query answer structure of the +FSA command. */
  T_BAT_res_que_plus_fsp    *ptr_que_plus_fsp;        /*<  0:  4> pointer to The query answer structure of the +FSP command. */
  T_BAT_res_que_plus_icf    *ptr_que_plus_icf;        /*<  0:  4> pointer to The query answer structure of the +ICF command. */
  T_BAT_res_que_plus_ifc    *ptr_que_plus_ifc;        /*<  0:  4> pointer to The query answer structure of the +IFC command. */
  T_BAT_res_que_percent_imei *ptr_que_percent_imei;   /*<  0:  4> pointer to The query answer structure of the %IMEI command. */
  T_BAT_res_que_plus_ipr    *ptr_que_plus_ipr;        /*<  0:  4> pointer to The query answer structure of the +IPR command. */
  T_BAT_res_que_percent_pbcf *ptr_que_percent_pbcf;   /*<  0:  4> pointer to The query answer structure of the %PBCF command. */
  T_BAT_res_que_percent_ppp *ptr_que_percent_ppp;     /*<  0:  4> pointer to The query answer structure of the %PPP command. */
  T_BAT_res_que_percent_pvrf *ptr_que_percent_pvrf;   /*<  0:  4> pointer to The query answer structure of the %PVRF command. */
  T_BAT_res_que_percent_rdl *ptr_que_percent_rdl;     /*<  0:  4> pointer to The query answer structure of the %RDL command. */
  T_BAT_res_que_percent_rdlb *ptr_que_percent_rdlb;   /*<  0:  4> pointer to The query answer structure of the %RDLB command. */
  T_BAT_res_que_percent_satc *ptr_que_percent_satc;   /*<  0:  4> pointer to The query answer structure of the %SATC command. */
  T_BAT_res_que_percent_satcc *ptr_que_percent_satcc; /*<  0:  4> pointer to The query answer structure of the %SATCC command. */
  T_BAT_res_set_percent_sate *ptr_set_percent_sate;   /*<  0:  4> pointer to The set response structure of the %SATE command. */
  T_BAT_res_que_plus_ws46   *ptr_que_plus_ws46;       /*<  0:  4> pointer to The query answer structure of the +WS46 command. */
  T_BAT_res_que_plus_cdip   *ptr_que_plus_cdip;       /*<  0:  4> pointer to The query answer structure of the +CDIP command */
  T_BAT_res_set_percent_cmgr *ptr_set_percent_cmgr;   /*<  0:  4> pointer to The set response structure of the %CMGR command. */
  T_BAT_res_set_percent_cmgl *ptr_set_percent_cmgl;   /*<  0:  4> pointer to The set response structure of the %CMGL command. */
  T_BAT_res_set_plus_cmss   *ptr_set_plus_cmss;       /*<  0:  4> pointer to The set response structure of the +CMSS command. */
  T_BAT_res_set_plus_cgmi   *ptr_set_plus_cgmi;       /*<  0:  4> pointer to The set response structure of the +CGMI command. */
  T_BAT_res_set_plus_cgmm   *ptr_set_plus_cgmm;       /*<  0:  4> pointer to The set response structure of the +CGMM command. */
  T_BAT_res_set_plus_cgmr   *ptr_set_plus_cgmr;       /*<  0:  4> pointer to The set response structure of the +CGMR command. */
  T_BAT_res_set_plus_cgsn   *ptr_set_plus_cgsn;       /*<  0:  4> pointer to The set response structure of the +CGSN command. */
// ELEM-FF: SIM_PERS 
  T_BAT_res_set_percent_mepd *ptr_set_percent_mepd;   /*<  0:  4> pointer to The set response structure of the %MEPD command */
  T_BAT_res_set_percent_csq *ptr_set_percent_csq;     /*<  0:  4> pointer to Structure for response of set command   */
  T_BAT_res_que_percent_cniv *ptr_que_percent_cniv;   /*<  0:  4> pointer to The query answer structure of the %CNIV command. */
// ELEM-FF: REL99 
  T_BAT_res_que_percent_cmgrs *ptr_que_percent_cmgrs; /*<  0:  4> pointer to Query answer for %cmgrs command         */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgcmod *ptr_que_plus_cgcmod;     /*<  0:  4> pointer to The query answer structure of the +CGCMODcommand. */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgdscont *ptr_que_plus_cgdscont; /*<  0:  4> pointer to The query answer structure of the +CGDSCONT command. */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgeqreq *ptr_que_plus_cgeqreq;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgeqmin *ptr_que_plus_cgeqmin;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgeqneg *ptr_que_plus_cgeqneg;   /*<  0:  4> pointer to The query answer structure of the +CGDCONT command */
// ELEM-FF: REL99 
  T_BAT_res_que_plus_cgtft  *ptr_que_plus_cgtft;      /*<  0:  4> pointer to The query answer structure of the +CGTFT command. */
  T_BAT_res_percent_cuscfg  *ptr_res_que_percent_cuscfg; /*<  0:  4> pointer to Structure of response for %CUSCFG command */
  T_BAT_res_que_percent_pbci *ptr_res_que_percent_pbci; /*<  0:  4> pointer to The query answer structure of the %PBCI command. */
  T_BAT_res_que_percent_simef *ptr_res_que_percent_simef; /*<  0:  4> pointer to The query answer structure of the %SIMEF command. */
  T_BAT_no_parameter        *ptr_res_at_busy;         /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_no_parameter        *ptr_res_at_no_answer;    /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_uns_plus_cbm    *ptr_res_plus_cbm;        /*<  0:  4> pointer to The unsolicited result code structure of the +CBM command. */
  T_BAT_res_uns_plus_cbmi   *ptr_res_plus_cbmi;       /*<  0:  4> pointer to The unsolicited result code structure of the +CBMI command. */
  T_BAT_res_uns_percent_ccbs *ptr_res_percent_ccbs;   /*<  0:  4> pointer to The unsolicited result code structure of the %CCBS command. */
  T_BAT_res_uns_plus_cccm   *ptr_res_plus_cccm;       /*<  0:  4> pointer to The unsolicited result code structure of the +CCCM command. */
  T_BAT_res_uns_percent_cccn *ptr_res_percent_cccn;   /*<  0:  4> pointer to The unsolicited result code structure of the %CCCN command. */
  T_BAT_res_uns_plus_ccwa   *ptr_res_plus_ccwa;       /*<  0:  4> pointer to The unsolicited result code structure of the +CCWA command. */
  T_BAT_res_uns_plus_ccwa_w *ptr_res_plus_ccwa_w;     /*<  0:  4> pointer to The unsolicited result code structure of the +CCWA_W command. */
  T_BAT_no_parameter        *ptr_res_plus_ccwe;       /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_uns_plus_cdip   *ptr_res_plus_cdip;       /*<  0:  4> pointer to The unsolicited result code structure of the +CDIP command. */
  T_BAT_res_uns_plus_cds    *ptr_res_plus_cds;        /*<  0:  4> pointer to The unsolicited result code structure of the +CDS command. */
  T_BAT_no_parameter        *ptr_plus_ccwv;           /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_uns_percent_cgev *ptr_res_percent_cgev;   /*<  0:  4> pointer to The unsolicited result code structure of the %CGEV command. */
  T_BAT_res_uns_plus_cgev   *ptr_res_plus_cgev;       /*<  0:  4> pointer to The unsolicited result code structure of the +CGEV command. */
  T_BAT_res_uns_percent_cgreg *ptr_res_percent_cgreg; /*<  0:  4> pointer to The unsolicited result code structure of the %CGREG command. */
  T_BAT_res_uns_plus_cgreg  *ptr_res_plus_cgreg;      /*<  0:  4> pointer to The unsolicited result code structure of the +CGREG command. */
  T_BAT_res_uns_plus_clae   *ptr_res_plus_clae;       /*<  0:  4> pointer to The unsolicited result code structure of the +CLAE command. */
  T_BAT_res_uns_plus_clav   *ptr_res_plus_clav;       /*<  0:  4> pointer to The unsolicited result code structure of the +CLAV command. */
  T_BAT_res_uns_plus_clip   *ptr_res_plus_clip;       /*<  0:  4> pointer to The unsolicited result code structure of the +CLIP command. */
  T_BAT_res_uns_plus_clip_w *ptr_res_plus_clip_w;     /*<  0:  4> pointer to The unsolicited result code structure of the +CLIP_W command. */
  T_BAT_res_uns_plus_cmt    *ptr_res_plus_cmt;        /*<  0:  4> pointer to The unsolicited result code structure of the +CMT command. */
  T_BAT_res_uns_plus_cmti   *ptr_res_plus_cmti;       /*<  0:  4> pointer to The unsolicited result code structure of the +CMTI command. */
  T_BAT_res_uns_plus_cmt_w  *ptr_res_plus_cmt_w;      /*<  0:  4> pointer to The unsolicited result code structure of the +CMT_W command. */
  T_BAT_res_uns_percent_cnap *ptr_res_percent_cnap;   /*<  0:  4> pointer to The unsolicited result code structure of the %CNAP command. */
  T_BAT_res_uns_plus_colp   *ptr_res_plus_colp;       /*<  0:  4> pointer to The unsolicited result code structure of the +COLP command. */
  T_BAT_res_uns_plus_colp_w *ptr_res_plus_colp_w;     /*<  0:  4> pointer to The unsolicited result code structure of the +COLP_W command. */
  T_BAT_res_uns_percent_cpi *ptr_res_percent_cpi;     /*<  0:  4> pointer to The unsolicited result code structure of the %CPI command. */
  T_BAT_res_uns_percent_cpi_w *ptr_res_percent_cpi_w; /*<  0:  4> pointer to The unsolicited result code structure of the %CPI_W command. */
  T_BAT_res_uns_percent_cpri *ptr_res_percent_cpri;   /*<  0:  4> pointer to The unsolicited result code structure of the %CPRI command. */
  T_BAT_res_uns_percent_cproam *ptr_res_percent_cproam; /*<  0:  4> pointer to The unsolicited result code structure of the %CPROAM command. */
  T_BAT_res_uns_percent_cpvwi *ptr_res_percent_cpvwi; /*<  0:  4> pointer to The unsolicited result code structure of the %CPVWI command. */
  T_BAT_res_uns_plus_cr     *ptr_res_plus_cr;         /*<  0:  4> pointer to The unsolicited result code structure of the +CR command. */
  T_BAT_res_uns_percent_creg *ptr_res_percent_creg;   /*<  0:  4> pointer to The unsolicited result code structure of the %CREG command. */
  T_BAT_res_uns_plus_cring  *ptr_plus_cring;          /*<  0:  4> pointer to The unsolicited result code structure of the +CRING command. */
  T_BAT_res_uns_percent_csq *ptr_res_percent_csq;     /*<  0:  4> pointer to The unsolicited result code structure of the %CSQ command. */
  T_BAT_res_uns_plus_cssi   *ptr_res_plus_cssi;       /*<  0:  4> pointer to The unsolicited result code structure of the +CSSI command. */
  T_BAT_res_uns_percent_cssn *ptr_res_percent_cssn;   /*<  0:  4> pointer to The unsolicited result code structure of the %CSSN command. */
  T_BAT_res_uns_plus_cssu   *ptr_res_plus_cssu;       /*<  0:  4> pointer to The unsolicited result code structure of the +CSSU command. */
  T_BAT_res_uns_percent_cstat *ptr_res_percent_cstat; /*<  0:  4> pointer to The unsolicited result code structure of the %CSTAT command. */
  T_BAT_res_uns_percent_ctyi *ptr_res_percent_ctyi;   /*<  0:  4> pointer to The unsolicited result code structure of the %CTYI command. */
  T_BAT_res_uns_plus_ctzr   *ptr_res_plus_ctzr;       /*<  0:  4> pointer to The unsolicited result code structure of the +CTZR command. */
  T_BAT_res_uns_percent_ctzv *ptr_res_percent_ctzv;   /*<  0:  4> pointer to The unsolicited result code structure of the %CTZV command. */
  T_BAT_res_uns_plus_ctzv   *ptr_res_plus_ctzv;       /*<  0:  4> pointer to The unsolicited result code structure of the +CTZV command. */
  T_BAT_res_uns_percent_ctzv_w *ptr_res_percent_ctzv_w; /*<  0:  4> pointer to The unsolicited result code structure of the %CTZV_W command. */
  T_BAT_res_uns_plus_cusd   *ptr_res_plus_cusd;       /*<  0:  4> pointer to The unsolicited result code structure of the +CUSD command. */
  T_BAT_res_uns_plus_cusd_w *ptr_res_plus_cusd_w;     /*<  0:  4> pointer to The unsolicited result code structure of the +CUSD_W command. */
  T_BAT_no_parameter        *ptr_res_uns_at_no_carrier; /*<  0:  4> pointer to Dummy structure                         */
  T_BAT_res_uns_plus_fhs    *ptr_res_plus_fhs;        /*<  0:  4> pointer to The unsolicited result code structure of the +FHS command. */
  T_BAT_res_uns_plus_ilrr   *ptr_res_plus_ilrr;       /*<  0:  4> pointer to The unsolicited result code structure of the +ILRR command. */
  T_BAT_res_uns_percent_rdl *ptr_res_percent_rdl;     /*<  0:  4> pointer to The unsolicited result code structure of the %RDL command. */
  T_BAT_res_uns_percent_rdlb *ptr_res_percent_rdlb;   /*<  0:  4> pointer to The unsolicited result code structure of the %RDLB command. */
  T_BAT_res_uns_percent_sata *ptr_res_percent_sata;   /*<  0:  4> pointer to The unsolicited result code structure of the %SATA command. */
  T_BAT_res_uns_percent_sati *ptr_res_percent_sati;   /*<  0:  4> pointer to The unsolicited result code structure of the %SATI command. */
  T_BAT_res_uns_percent_satn *ptr_res_percent_satn;   /*<  0:  4> pointer to The unsolicited result code structure of the %SATN command. */
  T_BAT_res_uns_percent_simef *ptr_res_percent_simef; /*<  0:  4> pointer to The unsolicited result code structure of the %SIMEF command. */
  T_BAT_res_uns_percent_simins *ptr_res_percent_simins; /*<  0:  4> pointer to The unsolicited result code structure of the %SIMINS command. */
  T_BAT_res_uns_percent_simrem *ptr_res_percent_simrem; /*<  0:  4> pointer to The unsolicited result code structure of the %SIMREM command. */
  T_BAT_res_uns_percent_sncnt *ptr_uns_percent_sncnt; /*<  0:  4> pointer to The unsolicited result code structure of the %SNCNT command. */
  T_BAT_res_uns_percent_cniv *ptr_res_percent_cniv;   /*<  0:  4> pointer to The unsolicited result code structure of the %CNIV command. */
// ELEM-FF: REL99 
  T_BAT_res_uns_percent_cmgrs *ptr_res_percent_cmgrs; /*<  0:  4> pointer to Unsolicited result during retransmission */
  T_BAT_res_uns_percent_pbci *ptr_res_uns_percent_pbci; /*<  0:  4> pointer to The unsolicited result code structure of the %PBCI command. */
  T_BAT_custom              *ptr_custom;              /*<  0:  4> pointer to for sending / receiving of customer AT command / response */
} T_BAT_response;
#endif

#ifndef __T_BAT_cmd_response__
#define __T_BAT_cmd_response__
/*
 * Structure for receiving BAT responses
 * CCDGEN:WriteStruct_Count==2849
 */
typedef struct
{
  T_BAT_ctrl_response       ctrl_response;            /*<  0:  4> (enum=32bit) controller for union                  */
  T_BAT_response            response;                 /*<  4:  4> Structured Element                                 */
} T_BAT_cmd_response;
#endif


/*
 * End of substructure section, begin of primitive definition section
 */


#include "CDG_LEAVE.h"


#endif
